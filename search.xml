<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Elasticsearch面试题</title>
    <url>/2022/10/30/Elasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>ES常见面试题</p>
<h4 id="1-ElasticSearch基础"><a href="#1-ElasticSearch基础" class="headerlink" title="1. ElasticSearch基础"></a><font color=DarkOrange>1. ElasticSearch基础</font></h4><h5 id="1-1-什么是Elasticsearch"><a href="#1-1-什么是Elasticsearch" class="headerlink" title="1.1 什么是Elasticsearch"></a><font color=DarkOrange>1.1 什么是Elasticsearch</font></h5><p>Elasticsearch 是基于 Lucene 的 Restful 的分布式实时全文搜索引擎，每个字段都被索引并可被搜索，可以快速存储、搜索、分析海量的数据</p>
<blockquote>
<p>全文检索是指对每一个词建立一个索引，指明该词在文章中出现的次数和位置。当查询时，根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程</p>
</blockquote>
<h5 id="1-2-Elasticsearch-的基本概念"><a href="#1-2-Elasticsearch-的基本概念" class="headerlink" title="1.2 Elasticsearch 的基本概念"></a><font color=DarkOrange>1.2 Elasticsearch 的基本概念</font></h5><ul>
<li>index 索引：索引类似于mysql 中的数据库，Elasticesearch 中的索引是存在数据的地方，包含了一堆有相似结构的文档数据</li>
<li>type 类型：类型是用来定义数据结构，可以认为是 mysql 中的一张表，type 是 index 中的一个逻辑数据分类</li>
<li>document 文档：类似于 MySQL 中的一行，不同之处在于 ES 中的每个文档可以有不同的字段，但是对于通用字段应该具有相同的数据类型，文档是es中的最小数据单元，可以认为一个文档就是一条记录</li>
<li>Field 字段：Field是Elasticsearch的最小单位，一个document里面有多个field</li>
<li>shard 分片：单台机器无法存储大量数据，es可以将一个索引中的数据切分为多个shard，分布在多台服务器上存储。有了shard就可以横向扩展，存储更多数据，让搜索和分析等操作分布到多台服务器上去执行，提升吞吐量和性能。shard 分片数量在建立索引时设置，设置后不能修改，默认5个；replica 副本数量默认1个，可随时修改数量</li>
<li>replica 副本：任何服务器随时可能故障或宕机，此时 shard 可能会丢失，通过创建 replica 副本，可以在 shard 故障时提供备用服务，保证数据不丢失，另外 replica 还可以提升搜索操作的吞吐量</li>
</ul>
<h5 id="1-3-什么是倒排索引"><a href="#1-3-什么是倒排索引" class="headerlink" title="1.3 什么是倒排索引"></a><font color=DarkOrange>1.3 什么是倒排索引</font></h5><p>在搜索引擎中，每个文档都有对应的文档 ID，文档内容可以表示为一系列关键词的集合，例如，某个文档经过分词，提取了 20 个关键词，而通过倒排索引，可以记录每个关键词在文档中出现的次数和出现位置。也就是说，倒排索引是 关键词到文档 ID 的映射，每个关键词都对应着一系列的文件，这些文件中都出现了该关键词</p>
<p><strong>要注意倒排索引的两个细节：</strong></p>
<ul>
<li>倒排索引中的所有词项对应一个或多个文档</li>
<li>倒排索引中的词项 根据字典顺序升序排列</li>
</ul>
<h5 id="1-4-doc-values-的作用"><a href="#1-4-doc-values-的作用" class="headerlink" title="1.4 doc_values 的作用"></a><font color=DarkOrange>1.4 doc_values 的作用</font></h5><p>倒排索引虽然可以提高搜索性能，但也存在缺陷，比如我们需要对数据做排序或聚合等操作时，lucene 会提取所有出现在文档集合的排序字段，然后构建一个排好序的文档集合，而这个步骤是基于内存的，如果排序数据量巨大的话，容易造成内存溢出和性能缓慢</p>
<p>doc_values 就是 es 在构建倒排索引的同时，会对开启 doc_values 的字段构建一个有序的 “document文档 &#x3D;&#x3D;&gt; field value” 的列式存储映射，可以看作是以文档维度，实现了根据指定字段进行排序和聚合的功能，降低对内存的依赖。另外 doc_values 保存在操作系统的磁盘中，当 doc_values 大于节点的可用内存，ES可以从操作系统页缓存中加载或弹出，从而避免发生内存溢出的异常，但如果 docValues 远小于节点的可用内存，操作系统就自然将所有 doc_values 存于内存中（堆外内存），有助于快速访问</p>
<h5 id="1-5-text-和-keyword类型的区别"><a href="#1-5-text-和-keyword类型的区别" class="headerlink" title="1.5 text 和 keyword类型的区别"></a><font color=DarkOrange>1.5 text 和 keyword类型的区别</font></h5><p>两个类型的区别主要是分词：keyword 类型是不会分词的，直接根据字符串内容建立倒排索引，所以keyword类型的字段只能通过精确值搜索到；Text 类型在存入 Elasticsearch 的时候，会先分词，然后根据分词后的内容建立倒排索引</p>
<h5 id="1-6-query-和-filter-的区别"><a href="#1-6-query-和-filter-的区别" class="headerlink" title="1.6 query 和 filter 的区别"></a><font color=DarkOrange>1.6 query 和 filter 的区别</font></h5><ul>
<li>query：查询操作不仅仅会进行查询，还会计算分值，用于确定相关度</li>
<li>filter：查询操作仅判断是否满足查询条件，不会计算任何分值，也不会关心返回的排序问题，同时，filter 查询的结果可以被缓存，提高性能</li>
</ul>
<h4 id="2-ES的写入流程"><a href="#2-ES的写入流程" class="headerlink" title="2. ES的写入流程"></a><font color=DarkOrange>2. ES的写入流程</font></h4><h5 id="2-1-ES写数据的整体流程"><a href="#2-1-ES写数据的整体流程" class="headerlink" title="2.1 ES写数据的整体流程"></a><font color=DarkOrange>2.1 ES写数据的整体流程</font></h5><p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7ov3hao7ij30pr0bndhh.jpg" alt="image.png"></p>
<ul>
<li>客户端选择 ES 的某个 node 发送请求过去，这个 node 就是协调节点 coordinating node</li>
<li>coordinating node 对 document 进行路由，将请求转发给对应的 node（有 primary shard）</li>
<li>实际的 node 上的 primary shard 处理请求，然后将数据同步到 replica node</li>
<li>coordinating node 等到 primary node 和所有 replica node 都执行成功之后，最后返回响应结果给客户端</li>
</ul>
<h5 id="2-2-ES主分片写数据的详细流程"><a href="#2-2-ES主分片写数据的详细流程" class="headerlink" title="2.2 ES主分片写数据的详细流程"></a><font color=DarkOrange>2.2 ES主分片写数据的详细流程</font></h5><p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7ov576wq8j30s20avjtl.jpg" alt="image.png"></p>
<ol>
<li><p>主分片先将数据写入ES的 memory buffer，然后定时（默认1s）将 memory buffer 中的数据写入一个新的 segment 文件中，并进入操作系统缓存 Filesystem cache（同时清空 memory buffer），这个过程就叫做 refresh；每个 segment 文件实际上是一些倒排索引的集合， 只有经历了 refresh 操作之后，这些数据才能变成可检索的</p>
<blockquote>
<p>ES 的近实时性：数据存在 memory buffer 时是搜索不到的，只有数据被 refresh 到  Filesystem cache 之后才能被搜索到，而 refresh 是每秒一次， 所以称 es 是近实时的；可以手动调用 es 的 api 触发一次 refresh 操作，让数据马上可以被搜索到</p>
</blockquote>
</li>
<li><p>由于 memory Buffer 和 Filesystem Cache 都是基于内存，假设服务器宕机，那么数据就会丢失，所以 ES 通过 translog 日志文件来保证数据的可靠性，在数据写入 memory buffer 的同时，将数据也写入 translog 日志文件中，当机器宕机重启时，es 会自动读取 translog 日志文件中的数据，恢复到 memory buffer 和 Filesystem cache 中去</p>
<blockquote>
<p>ES 数据丢失的问题：translog 也是先写入 Filesystem cache，然后默认每隔 5 秒刷一次到磁盘中，所以默认情况下，可能有 5 秒的数据会仅仅停留在 memory buffer 或者 translog 文件的 Filesystem cache中，而不在磁盘上，如果此时机器宕机，会丢失 5 秒钟的数据。也可以将 translog 设置成每次写操作必须是直接 fsync 到磁盘，但是性能会差很多</p>
</blockquote>
</li>
<li><p>flush 操作：不断重复上面的步骤，translog 会变得越来越大，不过 translog 文件默认每30分钟或者 阈值超过 512M 时，就会触发 commit 操作，即 flush操作，将 memory buffer 中所有的数据写入新的 segment 文件中， 并将内存中所有的 segment 文件全部落盘，最后清空 translog 事务日志</p>
<blockquote>
<ul>
<li>将 memory buffer 中的数据 refresh 到 Filesystem Cache 中去，清空 buffer</li>
<li>创建一个新的 commit point（提交点），同时强行将 Filesystem Cache 中目前所有的数据都 fsync 到磁盘文件中</li>
<li>删除旧的 translog 日志文件并创建一个新的 translog 日志文件，此时 commit 操作完成</li>
</ul>
</blockquote>
</li>
</ol>
<h4 id="3-ES的更新和删除流程"><a href="#3-ES的更新和删除流程" class="headerlink" title="3. ES的更新和删除流程"></a><font color=DarkOrange>3. ES的更新和删除流程</font></h4><p>删除和更新都是写操作，但是由于 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；所以 ES 利用 .del 文件 标记文档是否被删除，磁盘上的每个段都有一个相应的.del 文件</p>
<ul>
<li>如果是删除操作，文档其实并没有真的被删除，而是在 .del 文件中被标记为 deleted 状态。该文档依然能匹配查询，但是会在结果中被过滤掉</li>
<li>如果是更新操作，就是将旧的 doc 标识为 deleted 状态，然后创建一个新的 doc</li>
</ul>
<p>memory buffer 每 refresh 一次，就会产生一个 segment 文件 ，所以默认情况下是 1s 生成一个 segment 文件，这样下来 segment 文件会越来越多，此时会定期执行 merge。每次 merge 的时候，会将多个 segment 文件合并成一个，同时这里会将标识为 deleted 的 doc 给物理删除掉，不写入到新的 segment 中，然后将新的 segment 文件写入磁盘，这里会写一个 commit point ，标识所有新的 segment 文件，然后打开 segment 文件供搜索使用，同时删除旧的 segment 文件</p>
<h4 id="4-ES的搜索流程"><a href="#4-ES的搜索流程" class="headerlink" title="4. ES的搜索流程"></a><font color=DarkOrange>4. ES的搜索流程</font></h4><p>搜索被执行成一个两阶段过程，即 Query Then Fetch：</p>
<ul>
<li>Query阶段<ul>
<li>客户端发送请求到 coordinate node，协调节点将搜索请求广播到所有的 primary shard 或 replica，每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。接着每个分片返回各自优先队列中 所有 docId 和 打分值 给协调节点，由协调节点进行数据的合并、排序、分页等操作，产出最终结果</li>
</ul>
</li>
<li>Fetch阶段<ul>
<li>协调节点根据 Query阶段产生的结果，去各个节点上查询 docId 实际的 document 内容，最后由协调节点返回结果给客户端</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>coordinate node 对 doc id 进行哈希路由，将请求转发到对应的 node，此时会使用 round-robin 随机轮询算法，在 primary shard 以及其所有 replica 中随机选择一个，让读请求负载均衡</li>
<li>接收请求的 node 返回 document 给 coordinate node</li>
<li>coordinate node 返回 document 给客户端</li>
</ul>
</blockquote>
<p>Query Then Fetch 的搜索类型在文档相关性打分的时候参考的是本分片的数据，这样在文档数量较少的时候可能不够准确，DFS Query Then Fetch 增加了一个预查询的处理，询问 Term 和 Document frequency，这个评分更准确，但是性能会变差</p>
<h4 id="5-ES在高并发下如何保证读写一致性"><a href="#5-ES在高并发下如何保证读写一致性" class="headerlink" title="5. ES在高并发下如何保证读写一致性"></a><font color=DarkOrange>5. ES在高并发下如何保证读写一致性</font></h4><ul>
<li>对于更新操作：可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖<ul>
<li>每个文档都有一个_version 版本号，这个版本号在文档被改变时加一。Elasticsearch使用这个 _version 保证所有修改都被正确排序，当一个旧版本出现在新版本之后，它会被简单的忽略</li>
<li>利用_version的这一优点确保数据不会因为修改冲突而丢失，比如指定文档的version来做更改，如果那个版本号不是现在的，我们的请求就失败了</li>
</ul>
</li>
<li>对于写操作，一致性级别支持 quorum&#x2F;one&#x2F;all，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，副本将会在一个不同的节点上重建<ul>
<li>one：写操作只要有一个primary shard是active活跃可用的，就可以执行</li>
<li>all：写操作必须所有的primary shard和replica shard都是活跃可用的，才可以执行</li>
<li>quorum：默认值，要求ES中大部分的shard是活跃可用的，才可以执行写操作</li>
</ul>
</li>
<li>对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置replication 为 async 时，也可以通过设置搜索请求参数 _preference 为 primary 来查询主分片，确保文档是最新版本</li>
</ul>
<h4 id="6-ES集群如何选举Master节点"><a href="#6-ES集群如何选举Master节点" class="headerlink" title="6. ES集群如何选举Master节点"></a><font color=DarkOrange>6. ES集群如何选举Master节点</font></h4><h5 id="6-1-Elasticsearch的分布式原理"><a href="#6-1-Elasticsearch的分布式原理" class="headerlink" title="6.1 Elasticsearch的分布式原理"></a><font color=DarkOrange>6.1 Elasticsearch的分布式原理</font></h5><p>Elasticsearch 会对存储的数据进行切分，划分到不同的分片上，同时每一个分片会生成多个副本，从而保证分布式环境的高可用。ES集群中的节点是对等的，节点间会选出集群的 Master，由 Master 会负责维护集群状态信息，并同步给其他节点</p>
<p>Elasticsearch 的性能会不会很低：不会，ES只有建立 index 和 type 时需要经过 Master，而数据的写入有一个简单的 Routing 规则，可以路由到集群中的任意节点，所以数据写入压力是分散在整个集群的</p>
<h5 id="6-2-ES集群如何选举Master"><a href="#6-2-ES集群如何选举Master" class="headerlink" title="6.2 ES集群如何选举Master"></a><font color=DarkOrange>6.2 ES集群如何选举Master</font></h5><p>Elasticsearch 的选主是 ZenDiscovery 模块负责的，主要包含Ping（节点之间通过这个RPC来发现彼此）和 Unicast（单播模块包含一个主机列表以控制哪些节点需要ping通）这两部分</p>
<ul>
<li>确认候选主节点的最少投票通过数量（elasticsearch.yml 设置的值 discovery.zen.minimum_master_nodes）</li>
<li>选举时，集群中每个节点对所有 master候选节点（node.master: true）根据 nodeId 进行字典排序，然后选出第一个节点（第0位），暂且认为它是master节点</li>
<li>如果对某个节点的投票数达到阈值，并且该节点自己也选举自己，那这个节点就是master；否则重新选举一直到满足上述条件</li>
</ul>
<p><strong>补充：</strong> master节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；data节点可以关闭http功能</p>
<h5 id="6-3-Elasticsearch是如何避免脑裂现象"><a href="#6-3-Elasticsearch是如何避免脑裂现象" class="headerlink" title="6.3 Elasticsearch是如何避免脑裂现象"></a><font color=DarkOrange>6.3 Elasticsearch是如何避免脑裂现象</font></h5><ul>
<li>当集群中 master 候选节点数量不小于3个时（node.master: true），可以通过设置最少投票通过数量（discovery.zen.minimum_master_nodes），设置超过所有候选节点一半以上来解决脑裂问题，即设置为 (N&#x2F;2)+1</li>
<li>当集群 master 候选节点 只有两个时，这种情况是不合理的，最好把另外一个node.master改成false。如果我们不改节点设置，还是套上面的(N&#x2F;2)+1公式，此时discovery.zen.minimum_master_nodes应该设置为2。这就出现一个问题，两个master备选节点，只要有一个挂，就选不出master了</li>
</ul>
<h4 id="7-建立索引阶段性能提升方法"><a href="#7-建立索引阶段性能提升方法" class="headerlink" title="7. 建立索引阶段性能提升方法"></a><font color=DarkOrange>7. 建立索引阶段性能提升方法</font></h4><ul>
<li>如果是大批量导入，可以设置 index.number_of_replicas: 0 关闭副本，等数据导入完成之后再开启副本</li>
<li>使用批量请求并调整其大小：每次批量数据 5–15 MB 大是个不错的起始点</li>
<li>如果搜索结果不需要近实时性，可以把每个索引的 index.refresh_interval 改到30s</li>
<li>增加 index.translog.flush_threshold_size 设置，从默认的 512 MB 到更大一些的值，比如 1 GB</li>
<li>使用 SSD 存储介质</li>
<li>段和合并：Elasticsearch 默认值是 20 MB&#x2F;s。但如果用的是 SSD，可以考虑提高到 100–200 MB&#x2F;s。如果你在做批量导入，完全不在意搜索，你可以彻底关掉合并限流</li>
</ul>
<h4 id="8-ES的深度分页与滚动搜索scroll"><a href="#8-ES的深度分页与滚动搜索scroll" class="headerlink" title="8. ES的深度分页与滚动搜索scroll"></a><font color=DarkOrange>8. ES的深度分页与滚动搜索scroll</font></h4><ul>
<li>深度分页<ul>
<li>深度分页其实就是搜索的深浅度，比如第1页，第2页，第10页，第20页，是比较浅的；第10000页，第20000页就是很深了。搜索得太深，就会造成性能问题，会耗费内存和占用cpu。而且es为了性能，他不支持超过一万条数据以上的分页查询。那么如何解决深度分页带来的问题，我们应该避免深度分页操作（限制分页页数），比如最多只能提供100页的展示，从第101页开始就没了，毕竟用户也不会搜的那么深</li>
</ul>
</li>
<li>滚动搜索<ul>
<li>一次性查询1万+数据，往往会造成性能影响，因为数据量太多了。这个时候可以使用滚动搜索，也就是 scroll。 滚动搜索可以先查询出一些数据，然后再紧接着依次往下查询。在第一次查询的时候会有一个滚动id，相当于一个锚标记 ，随后再次滚动搜索会需要上一次搜索滚动id，根据这个进行下一次的搜索请求。每次搜索都是基于一个历史的数据快照，查询数据的期间，如果有数据变更，那么和搜索是没有关系的</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeTop算法题</title>
    <url>/2022/11/14/CodeTop%E7%AE%97%E6%B3%95%E9%A2%98/</url>
    <content><![CDATA[<p>面试LeetCode算法题整理，按照出现的频率依次递减排序，题目类型包含：简单、中等、困难</p>
<p>CodeTop地址：<a href="https://codetop.cc/home">点击跳转</a></p>
<p><strong>备注：</strong>出现的频率会随时间变化而变化，具体以CodeTop出现频率为准，每个题目整理出<strong>题目</strong>、<strong>思路</strong>、<strong>代码</strong>三部分</p>
<h4 id="1-无重复字符的最长子串-中等"><a href="#1-无重复字符的最长子串-中等" class="headerlink" title="1. 无重复字符的最长子串-中等"></a><font color=DarkOrange>1. 无重复字符的最长子串-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度</p>
<p><strong>思路：</strong></p>
<p>滑动窗口</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-反转链表-简单"><a href="#2-反转链表-简单" class="headerlink" title="2. 反转链表-简单"></a><font color=DarkOrange>2. 反转链表-简单</font></h4><p><strong>题目：</strong></p>
<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表</p>
<p><strong>思路：</strong></p>
<p>方法一：迭代</p>
<p>方法二：递归</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-LRU缓存-中等"><a href="#3-LRU缓存-中等" class="headerlink" title="3. LRU缓存-中等"></a><font color=DarkOrange>3. LRU缓存-中等</font></h4><p><strong>题目：</strong></p>
<p>请你设计并实现一个满足LRU (最近最少使用) 缓存约束的数据结构</p>
<p>实现 <code>LRUCache</code> 类：</p>
<ul>
<li><code>LRUCache(int capacity)</code> 以 <strong>正整数</strong> 作为容量 <code>capacity</code> 初始化 LRU 缓存</li>
<li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> </li>
<li>void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字</li>
</ul>
<p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行</p>
<p><strong>思路：</strong></p>
<p>哈希表 + 双向链表</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-数组中的第K个最大元素-中等"><a href="#4-数组中的第K个最大元素-中等" class="headerlink" title="4. 数组中的第K个最大元素-中等"></a><font color=DarkOrange>4. 数组中的第K个最大元素-中等</font></h4><p><strong>题目：</strong></p>
<p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>k</code> 个最大的元素</p>
<p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素</p>
<p>你必须设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题</p>
<p><strong>思路：</strong></p>
<p>方法一：基于快速排序的选择方法</p>
<p>方法二：基于堆排序的选择方法</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-K个一组翻转链表-困难"><a href="#5-K个一组翻转链表-困难" class="headerlink" title="5. K个一组翻转链表-困难"></a><font color=DarkOrange>5. K个一组翻转链表-困难</font></h4><p><strong>题目：</strong></p>
<p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表</p>
<p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序</p>
<p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换</p>
<p><strong>思路：</strong></p>
<p>模拟</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-三数之和-中等"><a href="#6-三数之和-中等" class="headerlink" title="6. 三数之和-中等"></a><font color=DarkOrange>6. 三数之和-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组<code>nums</code> ，判断是否存在三元组<code>[nums[i], nums[j], nums[k]]</code>满足<code>i != j</code>、<code>i != k</code>且<code>j != k</code>，同时还满足<code>nums[i] + nums[j] + nums[k] == 0</code> </p>
<p>请你返回所有和为 <code>0</code> 且不重复的三元组</p>
<p><strong>注意：</strong>答案中不可以包含重复的三元组</p>
<p><strong>思路：</strong></p>
<p>排序 + 双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="7-最大子数组和-中等"><a href="#7-最大子数组和-中等" class="headerlink" title="7. 最大子数组和-中等"></a><font color=DarkOrange>7. 最大子数组和-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和</p>
<p><strong>子数组</strong> 是数组中的一个连续部分</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：分治</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="8-排序数组-快排-中等"><a href="#8-排序数组-快排-中等" class="headerlink" title="8. 排序数组-快排-中等"></a><font color=DarkOrange>8. 排序数组-快排-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列</p>
<p><strong>思路：</strong></p>
<p>通过划分将待排序的序列分成前后两部分，其中前一部分的数据都比后一部分的数据要小，然后再递归调用函数对两部分的序列分别进行快速排序</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="9-合并两个有序链表-简单"><a href="#9-合并两个有序链表-简单" class="headerlink" title="9. 合并两个有序链表-简单"></a><font color=DarkOrange>9. 合并两个有序链表-简单</font></h4><p><strong>题目：</strong></p>
<p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的</p>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：迭代</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="10-两数之和-简单"><a href="#10-两数之和-简单" class="headerlink" title="10. 两数之和-简单"></a><font color=DarkOrange>10. 两数之和-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现</p>
<p>你可以按任意顺序返回答案</p>
<p><strong>思路：</strong></p>
<p>方法一：暴力枚举</p>
<p>方法二：哈希表</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="11-二叉树的层序遍历-中等"><a href="#11-二叉树的层序遍历-中等" class="headerlink" title="11. 二叉树的层序遍历-中等"></a><font color=DarkOrange>11. 二叉树的层序遍历-中等</font></h4><p><strong>题目：</strong></p>
<p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）</p>
<p><strong>思路：</strong></p>
<p>广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="12-搜索旋转排序数组-中等"><a href="#12-搜索旋转排序数组-中等" class="headerlink" title="12. 搜索旋转排序数组-中等"></a><font color=DarkOrange>12. 搜索旋转排序数组-中等</font></h4><p><strong>题目：</strong></p>
<p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> </p>
<p>在传递给函数之前，<code>nums</code>在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 旋转，使数组变为<code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 从 0 开始 计数）。例如，<code> [0,1,2,4,5,6,7]</code>在下标<code>3</code>处经旋转后可能变为<code>[4,5,6,7,0,1,2]</code> </p>
<p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> </p>
<p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题</p>
<p><strong>思路：</strong></p>
<p>二分查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="13-买卖股票的最佳时机-简单"><a href="#13-买卖股票的最佳时机-简单" class="headerlink" title="13. 买卖股票的最佳时机-简单"></a><font color=DarkOrange>13. 买卖股票的最佳时机-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格</p>
<p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润</p>
<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：暴力法</p>
<p>方法二：一次遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="14-有效的括号-简单"><a href="#14-有效的括号-简单" class="headerlink" title="14. 有效的括号-简单"></a><font color=DarkOrange>14. 有效的括号-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合</li>
<li>左括号必须以正确的顺序闭合</li>
<li>每个右括号都有一个对应的相同类型的左括号</li>
</ol>
<p><strong>思路：</strong></p>
<p>栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="15-岛屿数量-中等"><a href="#15-岛屿数量-中等" class="headerlink" title="15. 岛屿数量-中等"></a><font color=DarkOrange>15. 岛屿数量-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量</p>
<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和&#x2F;或竖直方向上相邻的陆地连接形成</p>
<p>此外，你可以假设该网格的四条边均被水包围</p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二：广度优先搜索</p>
<p>方法三：并查集</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="16-环形链表-简单"><a href="#16-环形链表-简单" class="headerlink" title="16. 环形链表-简单"></a><font color=DarkOrange>16. 环形链表-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环</p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况</p>
<p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：哈希表</p>
<p>方法二：快慢指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="17-最长回文子串-中等"><a href="#17-最长回文子串-中等" class="headerlink" title="17. 最长回文子串-中等"></a><font color=DarkOrange>17. 最长回文子串-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：中心扩展算法</p>
<p>方法三：Manacher 算法</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="18-二叉树的锯齿形层序遍历-中等"><a href="#18-二叉树的锯齿形层序遍历-中等" class="headerlink" title="18. 二叉树的锯齿形层序遍历-中等"></a><font color=DarkOrange>18. 二叉树的锯齿形层序遍历-中等</font></h4><p><strong>题目：</strong></p>
<p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>锯齿形层序遍历</strong> 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）</p>
<p><strong>思路：</strong></p>
<p>广度优先遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="19-合并两个有序数组-简单"><a href="#19-合并两个有序数组-简单" class="headerlink" title="19. 合并两个有序数组-简单"></a><font color=DarkOrange>19. 合并两个有序数组-简单</font></h4><p><strong>题目：</strong></p>
<p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目</p>
<p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列</p>
<p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：直接合并后排序</p>
<p>方法二：双指针</p>
<p>方法三：逆向双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="20-二叉树的最近公共祖先-中等"><a href="#20-二叉树的最近公共祖先-中等" class="headerlink" title="20. 二叉树的最近公共祖先-中等"></a><font color=DarkOrange>20. 二叉树的最近公共祖先-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）”</p>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：存储父节点</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="21-全排列-中等"><a href="#21-全排列-中等" class="headerlink" title="21. 全排列-中等"></a><font color=DarkOrange>21. 全排列-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案</p>
<p><strong>思路：</strong></p>
<p>回溯</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="22-相交链表-简单"><a href="#22-相交链表-简单" class="headerlink" title="22. 相交链表-简单"></a><font color=DarkOrange>22. 相交链表-简单</font></h4><p><strong>题目：</strong></p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h87c37dsm4j311m0q40zb.jpg" alt="image.png" style="zoom:50%;" /></div>

<p><strong>思路：</strong></p>
<p>方法一：哈希集合</p>
<p>方法二：双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="23-螺旋矩阵-中等"><a href="#23-螺旋矩阵-中等" class="headerlink" title="23. 螺旋矩阵-中等"></a><font color=DarkOrange>23. 螺旋矩阵-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素</p>
<p><strong>思路：</strong></p>
<p>方法一：模拟</p>
<p>方法二：按层模拟</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="24-合并K个升序链表-困难"><a href="#24-合并K个升序链表-困难" class="headerlink" title="24. 合并K个升序链表-困难"></a><font color=DarkOrange>24. 合并K个升序链表-困难</font></h4><p><strong>题目：</strong></p>
<p>给你一个链表数组，每个链表都已经按升序排列</p>
<p>请你将所有链表合并到一个升序链表中，返回合并后的链表</p>
<p><strong>思路：</strong></p>
<p>方法一：顺序合并</p>
<p>方法二：分治合并</p>
<p>方法三：使用优先队列合并</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="25-反转链表-II-中等"><a href="#25-反转链表-II-中等" class="headerlink" title="25. 反转链表 II-中等"></a><font color=DarkOrange>25. 反转链表 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code>的链表节点，返回 <strong>反转后的链表</strong> </p>
<p><strong>思路：</strong></p>
<p>方法一：穿针引线</p>
<p>方法二：一次遍历「穿针引线」反转链表（头插法）</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="26-字符串相加-简单"><a href="#26-字符串相加-简单" class="headerlink" title="26. 字符串相加-简单"></a><font color=DarkOrange>26. 字符串相加-简单</font></h4><p><strong>题目：</strong></p>
<p>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和并同样以字符串形式返回</p>
<p>你不能使用任何內建的用于处理大整数的库（比如 <code>BigInteger</code>）， 也不能直接将输入的字符串转换为整数形式</p>
<p><strong>思路：</strong></p>
<p>模拟</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="27-环形链表-II-中等"><a href="#27-环形链表-II-中等" class="headerlink" title="27. 环形链表 II-中等"></a><font color=DarkOrange>27. 环形链表 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 *如果链表无环，则返回 <code>null</code></p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况</p>
<p><strong>思路：</strong></p>
<p>方法一：哈希表</p>
<p>方法二：快慢指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="28-长递增子序列-中等"><a href="#28-长递增子序列-中等" class="headerlink" title="28. 长递增子序列-中等"></a><font color=DarkOrange>28. 长递增子序列-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度</p>
<p><strong>子序列</strong> 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：贪心 + 二分查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="29-接雨水-困难"><a href="#29-接雨水-困难" class="headerlink" title="29. 接雨水-困难"></a><font color=DarkOrange>29. 接雨水-困难</font></h4><p><strong>题目：</strong></p>
<p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：单调栈</p>
<p>方法三：双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="30-二叉树中的最大路径和-困难"><a href="#30-二叉树中的最大路径和-困难" class="headerlink" title="30. 二叉树中的最大路径和-困难"></a><font color=DarkOrange>30. 二叉树中的最大路径和-困难</font></h4><p><strong>题目：</strong></p>
<p><strong>路径</strong> 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点</p>
<p><strong>路径和</strong> 是路径中各节点值的总和</p>
<p>给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> </p>
<p><strong>思路：</strong></p>
<p>递归</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="31-重排链表-中等"><a href="#31-重排链表-中等" class="headerlink" title="31. 重排链表-中等"></a><font color=DarkOrange>31. 重排链表-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个单链表 <code>L</code> 的头节点 <code>head</code> ，单链表 <code>L</code> 表示为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">L0 → L1 → … → Ln - 1 → Ln</span><br></pre></td></tr></table></figure>

<p>请将其重新排列后变为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …</span><br></pre></td></tr></table></figure>

<p>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换</p>
<p><strong>思路：</strong></p>
<p>方法一：线性表</p>
<p>方法二：寻找链表中点 + 链表逆序 + 合并链表</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="32-二叉树的中序遍历-简单"><a href="#32-二叉树的中序遍历-简单" class="headerlink" title="32. 二叉树的中序遍历-简单"></a><font color=DarkOrange>32. 二叉树的中序遍历-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉树的根节点 <code>root</code> ，返回 它的 <strong>中序</strong>遍历</p>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：迭代</p>
<p>方法三：Morris 中序遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="33-二分查找-简单"><a href="#33-二分查找-简单" class="headerlink" title="33. 二分查找-简单"></a><font color=DarkOrange>33. 二分查找-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code></p>
<p><strong>思路：</strong></p>
<p>二分查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="34-编辑距离-困难"><a href="#34-编辑距离-困难" class="headerlink" title="34. 编辑距离-困难"></a><font color=DarkOrange>34. 编辑距离-困难</font></h4><p><strong>题目：</strong></p>
<p>给你两个单词 <code>word1</code> 和 <code>word2</code>， 请返回将 <code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数</p>
<p>你可以对一个单词进行如下三种操作：</p>
<ul>
<li>插入一个字符</li>
<li>删除一个字符</li>
<li>替换一个字符</li>
</ul>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="35-用栈实现队列-简单"><a href="#35-用栈实现队列-简单" class="headerlink" title="35. 用栈实现队列-简单"></a><font color=DarkOrange>35. 用栈实现队列-简单</font></h4><p><strong>题目：</strong></p>
<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>
<p>实现 <code>MyQueue</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>
<li><code>int pop()</code> 从队列的开头移除并返回元素</li>
<li><code>int peek()</code> 返回队列开头的元素</li>
<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>
</ul>
<p>说明：</p>
<ul>
<li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的</li>
<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可</li>
</ul>
<p><strong>思路：</strong></p>
<p>双栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="36-寻找两个正序数组的中位数-困难"><a href="#36-寻找两个正序数组的中位数-困难" class="headerlink" title="36. 寻找两个正序数组的中位数-困难"></a><font color=DarkOrange>36. 寻找两个正序数组的中位数-困难</font></h4><p><strong>题目：</strong></p>
<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> </p>
<p>算法的时间复杂度应该为 <code>O(log (m+n))</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：二分查找</p>
<p>方法二：划分数组</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="37-二叉树的右视图-中等"><a href="#37-二叉树的右视图-中等" class="headerlink" title="37. 二叉树的右视图-中等"></a><font color=DarkOrange>37. 二叉树的右视图-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值</p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二：广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="38-除链表的倒数第N个结点-中等"><a href="#38-除链表的倒数第N个结点-中等" class="headerlink" title="38. 除链表的倒数第N个结点-中等"></a><font color=DarkOrange>38. 除链表的倒数第N个结点-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点</p>
<p><strong>思路：</strong></p>
<p>方法一：计算链表长度</p>
<p>方法二：栈</p>
<p>方法三：双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="39-爬楼梯-简单"><a href="#39-爬楼梯-简单" class="headerlink" title="39. 爬楼梯-简单"></a><font color=DarkOrange>39. 爬楼梯-简单</font></h4><p><strong>题目：</strong></p>
<p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶</p>
<p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：矩阵快速幂</p>
<p>方法三：通项公式</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="40-合并区间-中等"><a href="#40-合并区间-中等" class="headerlink" title="40. 合并区间-中等"></a><font color=DarkOrange>40. 合并区间-中等</font></h4><p><strong>题目：</strong></p>
<p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</p>
<p><strong>思路：</strong></p>
<p>排序</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="41-排序链表-中等"><a href="#41-排序链表-中等" class="headerlink" title="41. 排序链表-中等"></a><font color=DarkOrange>41. 排序链表-中等</font></h4><p><strong>题目：</strong></p>
<p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> </p>
<p><strong>思路：</strong></p>
<p>方法一：自顶向下归并排序</p>
<p>方法二：自底向上归并排序</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="42-删除排序链表中的重复元素-II-中等"><a href="#42-删除排序链表中的重复元素-II-中等" class="headerlink" title="42. 删除排序链表中的重复元素 II-中等"></a><font color=DarkOrange>42. 删除排序链表中的重复元素 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个已排序的链表的头<code>head</code>，删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表</p>
<p><strong>思路：</strong></p>
<p>一次遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="43-下一个排列-中等"><a href="#43-下一个排列-中等" class="headerlink" title="43. 下一个排列-中等"></a><font color=DarkOrange>43. 下一个排列-中等</font></h4><p><strong>题目：</strong></p>
<p>整数数组的一个 <strong>排列</strong> 就是将其所有成员以序列或线性顺序排列</p>
<ul>
<li>例如，<code>arr = [1,2,3]</code> ，以下这些都可以视作 <code>arr</code> 的排列：<code>[1,2,3]</code>、<code>[1,3,2]</code>、<code>[3,1,2]</code>、<code>[2,3,1]</code></li>
</ul>
<p>整数数组的 <strong>下一个排列</strong> 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 <strong>下一个排列</strong> 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）</p>
<ul>
<li>例如，<code>arr = [1,2,3]</code> 的下一个排列是 <code>[1,3,2]</code> </li>
<li>类似地，<code>arr = [2,3,1]</code> 的下一个排列是 <code>[3,1,2]</code> </li>
<li>而 <code>arr = [3,2,1]</code> 的下一个排列是 <code>[1,2,3]</code> ，因为 <code>[3,2,1]</code> 不存在一个字典序更大的排列</li>
</ul>
<p>给你一个整数数组 <code>nums</code> ，找出 <code>nums</code> 的下一个排列</p>
<p>必须<strong>原地</strong>修改，只允许使用额外常数空间</p>
<p><strong>思路：</strong></p>
<p>两遍扫描</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="44-x-的平方根-简单"><a href="#44-x-的平方根-简单" class="headerlink" title="44. x 的平方根 -简单"></a><font color=DarkOrange>44. x 的平方根 -简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 <strong>算术平方根</strong> </p>
<p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 **舍去 **</p>
<p><strong>注意：</strong>不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code>  </p>
<p><strong>思路：</strong></p>
<p>方法一：袖珍计算器算法</p>
<p>方法二：二分查找</p>
<p>方法三：牛顿迭代</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="45-两数相加-中等"><a href="#45-两数相加-中等" class="headerlink" title="45. 两数相加-中等"></a><font color=DarkOrange>45. 两数相加-中等</font></h4><p><strong>题目：</strong></p>
<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头</p>
<p><strong>思路：</strong></p>
<p>模拟</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="46-字符串转换整数-atoi-中等"><a href="#46-字符串转换整数-atoi-中等" class="headerlink" title="46. 字符串转换整数 (atoi)-中等"></a><font color=DarkOrange>46. 字符串转换整数 (atoi)-中等</font></h4><p><strong>题目：</strong></p>
<p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&#x2F;C++ 中的 <code>atoi</code> 函数）</p>
<p>函数 <code>myAtoi(string s)</code> 的算法如下：</p>
<ol>
<li>读入字符串并丢弃无用的前导空格</li>
<li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正</li>
<li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略</li>
<li>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）</li>
<li>如果整数数超过 32 位有符号整数范围 <code>[−231, 231 − 1]</code> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>−231</code> 的整数应该被固定为 <code>−231</code> ，大于 <code>231 − 1</code> 的整数应该被固定为 <code>231 − 1</code> </li>
<li>返回整数作为最终结果</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>本题中的空白字符只包括空格字符 <code>&#39; &#39;</code> </li>
<li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符</li>
</ul>
<p><strong>思路：</strong></p>
<p>自动机</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="47-最长公共子序列-中等"><a href="#47-最长公共子序列-中等" class="headerlink" title="47. 最长公共子序列-中等"></a><font color=DarkOrange>47. 最长公共子序列-中等</font></h4><p><strong>题目：</strong></p>
<p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> </p>
<p>一个字符串的 <strong>子序列</strong> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串</p>
<ul>
<li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列</li>
</ul>
<p>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列</p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="48-括号生成-中等"><a href="#48-括号生成-中等" class="headerlink" title="48. 括号生成-中等"></a><font color=DarkOrange>48. 括号生成-中等</font></h4><p><strong>题目：</strong></p>
<p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合</p>
<p><strong>思路：</strong></p>
<p>方法一：暴力法</p>
<p>方法二：回溯法</p>
<p>方法三：按括号序列的长度递归</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="49-滑动窗口最大值-困难"><a href="#49-滑动窗口最大值-困难" class="headerlink" title="49. 滑动窗口最大值-困难"></a><font color=DarkOrange>49. 滑动窗口最大值-困难</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的<code>k</code> 个数字。滑动窗口每次只向右移动一位</p>
<p>返回 滑动窗口中的最大值</p>
<p><strong>思路：</strong></p>
<p>方法一：优先队列</p>
<p>方法二：单调队列</p>
<p>方法三：分块 + 预处理</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="50-复原-IP-地址-中等"><a href="#50-复原-IP-地址-中等" class="headerlink" title="50. 复原 IP 地址-中等"></a><font color=DarkOrange>50. 复原 IP 地址-中等</font></h4><p><strong>题目：</strong></p>
<p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 <code>0</code> 到 <code>255</code> 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>&#39;.&#39;</code> 分隔</p>
<ul>
<li>例如：<code>&quot;0.1.2.201&quot;</code> 和<code> &quot;192.168.1.1&quot;</code> 是 <strong>有效</strong> IP 地址，但是 <code>&quot;0.011.255.245&quot;</code>、<code>&quot;192.168.1.312&quot;</code> 和<code>&quot;192.168@1.1&quot;</code> 是 <strong>无效</strong> IP 地址</li>
</ul>
<p>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能的<strong>有效 IP 地址</strong>，这些地址可以通过在 <code>s</code> 中插入 <code>&#39;.&#39;</code> 来形成。你 <strong>不能</strong> 重新排序或删除 <code>s</code> 中的任何数字。你可以按 <strong>任何</strong> 顺序返回答案</p>
<p><strong>思路：</strong></p>
<p>回溯</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="51-缺失的第一个正数-困难"><a href="#51-缺失的第一个正数-困难" class="headerlink" title="51. 缺失的第一个正数-困难"></a><font color=DarkOrange>51. 缺失的第一个正数-困难</font></h4><p><strong>题目：</strong></p>
<p>给你一个未排序的整数数组 <code>nums</code> ，请你找出其中没有出现的最小的正整数</p>
<p>请你实现时间复杂度为 <code>O(n)</code> 并且只使用常数级别额外空间的解决方案</p>
<p><strong>思路：</strong></p>
<p>方法一：哈希表</p>
<p>方法二：置换</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="52-链表中倒数第k个节点-简单"><a href="#52-链表中倒数第k个节点-简单" class="headerlink" title="52. 链表中倒数第k个节点-简单"></a><font color=DarkOrange>52. 链表中倒数第k个节点-简单</font></h4><p><strong>题目：</strong></p>
<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点</p>
<p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点</p>
<p><strong>思路：</strong></p>
<p>方法一：顺序查找</p>
<p>方法二：双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="53-从前序与中序遍历序列构造二叉树-中等"><a href="#53-从前序与中序遍历序列构造二叉树-中等" class="headerlink" title="53. 从前序与中序遍历序列构造二叉树-中等"></a><font color=DarkOrange>53. 从前序与中序遍历序列构造二叉树-中等</font></h4><p><strong>题目：</strong></p>
<p>给定两个整数数组 <code>preorder</code> 和 <code>inorder</code> ，其中 <code>preorder</code> 是二叉树的<strong>先序遍历</strong>， <code>inorder</code> 是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点</p>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：迭代</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="54-比较版本号-中等"><a href="#54-比较版本号-中等" class="headerlink" title="54. 比较版本号-中等"></a><font color=DarkOrange>54. 比较版本号-中等</font></h4><p><strong>题目：</strong></p>
<p>给你两个版本号 <code>version1</code> 和 <code>version2</code> ，请你比较它们</p>
<p>版本号由一个或多个修订号组成，各修订号由一个 <code>&#39;.&#39;</code> 连接。每个修订号由 <strong>多位数字</strong> 组成，可能包含 <strong>前导零</strong> 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，<code>2.5.33</code> 和 <code>0.1</code> 都是有效的版本号</p>
<p>比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 <strong>忽略任何前导零后的整数值</strong> 。也就是说，修订号 <code>1</code> 和修订号 <code>001</code> <strong>相等</strong> 。如果版本号没有指定某个下标处的修订号，则该修订号视为 <code>0</code> 。例如，版本 <code>1.0</code> 小于版本<code>1.1</code> ，因为它们下标为 <code>0</code> 的修订号相同，而下标为 <code>1</code> 的修订号分别为 <code>0</code> 和 <code>1</code> ，<code>0 &lt; 1</code> </p>
<p>返回规则如下：</p>
<ul>
<li>如果 <code>*version1* &gt; *version2*</code> 返回 <code>1</code></li>
<li>如果 <code>*version1* &lt; *version2*</code> 返回 <code>-1</code></li>
<li>除此之外返回 <code>0</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：字符串分割</p>
<p>方法二：双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="55-零钱兑换-中等"><a href="#55-零钱兑换-中等" class="headerlink" title="55. 零钱兑换-中等"></a><font color=DarkOrange>55. 零钱兑换-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额</p>
<p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> </p>
<p>你可以认为每种硬币的数量是无限的</p>
<p><strong>思路：</strong></p>
<p>方法一：记忆化搜索</p>
<p>方法二：动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="56-最小覆盖子串-困难"><a href="#56-最小覆盖子串-困难" class="headerlink" title="56. 最小覆盖子串-困难"></a><font color=DarkOrange>56. 最小覆盖子串-困难</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> </p>
<p><strong>注意：</strong></p>
<ul>
<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>
<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案</li>
</ul>
<p><strong>思路：</strong></p>
<p>滑动窗口</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="57-二叉树的前序遍历-简单"><a href="#57-二叉树的前序遍历-简单" class="headerlink" title="57. 二叉树的前序遍历-简单"></a><font color=DarkOrange>57. 二叉树的前序遍历-简单</font></h4><p><strong>题目：</strong></p>
<p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong> 遍历</p>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：迭代</p>
<p>方法三：Morris 遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="58-反转字符串中的单词-中等"><a href="#58-反转字符串中的单词-中等" class="headerlink" title="58. 反转字符串中的单词-中等"></a><font color=DarkOrange>58. 反转字符串中的单词-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序</p>
<p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开</p>
<p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串</p>
<p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格</p>
<p><strong>思路：</strong></p>
<p>方法一：使用语言特性</p>
<p>方法二：自行编写对应的函数</p>
<p>方法三：双端队列</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="59-字符串相乘-中等"><a href="#59-字符串相乘-中等" class="headerlink" title="59. 字符串相乘-中等"></a><font color=DarkOrange>59. 字符串相乘-中等</font></h4><p><strong>题目：</strong></p>
<p>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式</p>
<p><strong>注意：</strong>不能使用任何内置的 BigInteger 库或直接将输入转换为整数</p>
<p><strong>思路：</strong></p>
<p>方法一：做加法</p>
<p>方法二：做乘法</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="60-最小栈-中等"><a href="#60-最小栈-中等" class="headerlink" title="60. 最小栈-中等"></a><font color=DarkOrange>60. 最小栈-中等</font></h4><p><strong>题目：</strong></p>
<p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈</p>
<p>实现 <code>MinStack</code> 类：</p>
<ul>
<li><code>MinStack()</code> 初始化堆栈对象</li>
<li><code>void push(int val)</code> 将元素val推入堆栈</li>
<li><code>void pop()</code> 删除堆栈顶部的元素</li>
<li><code>int top()</code> 获取堆栈顶部的元素</li>
<li><code>int getMin()</code> 获取堆栈中的最小元素</li>
</ul>
<p><strong>思路：</strong></p>
<p>辅助栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="61-平衡二叉树-简单"><a href="#61-平衡二叉树-简单" class="headerlink" title="61. 平衡二叉树-简单"></a><font color=DarkOrange>61. 平衡二叉树-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉树，判断它是否是高度平衡的二叉树</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<blockquote>
<p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 </p>
</blockquote>
<p><strong>思路：</strong></p>
<p>方法一：自顶向下的递归</p>
<p>方法二：自底向上的递归</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="62-子集-中等"><a href="#62-子集-中等" class="headerlink" title="62. 子集-中等"></a><font color=DarkOrange>62. 子集-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）</p>
<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集</p>
<p><strong>思路：</strong></p>
<p>方法一：迭代法实现子集枚举</p>
<p>方法二：递归法实现子集枚举</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="63-二叉树的最大深度-简单"><a href="#63-二叉树的最大深度-简单" class="headerlink" title="63. 二叉树的最大深度-简单"></a><font color=DarkOrange>63. 二叉树的最大深度-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉树，找出其最大深度</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点</p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二：广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="64-求根节点到叶节点数字之和-中等"><a href="#64-求根节点到叶节点数字之和-中等" class="headerlink" title="64. 求根节点到叶节点数字之和-中等"></a><font color=DarkOrange>64. 求根节点到叶节点数字之和-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个二叉树的根节点 <code>root</code> ，树中每个节点都存放有一个 <code>0</code> 到 <code>9</code> 之间的数字</p>
<p>每条从根节点到叶节点的路径都代表一个数字：</p>
<ul>
<li>例如，从根节点到叶节点的路径 <code>1 -&gt; 2 -&gt; 3</code> 表示数字 <code>123</code></li>
</ul>
<p>计算从根节点到叶节点生成的 <strong>所有数字之和</strong> </p>
<p><strong>叶节点</strong> 是指没有子节点的节点</p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二：广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="65-最长有效括号-困难"><a href="#65-最长有效括号-困难" class="headerlink" title="65. 最长有效括号-困难"></a><font color=DarkOrange>65. 最长有效括号-困难</font></h4><p><strong>题目：</strong></p>
<p>给你一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：栈</p>
<p>方法三：不需要额外的空间</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="66-对称二叉树-简单"><a href="#66-对称二叉树-简单" class="headerlink" title="66. 对称二叉树-简单"></a><font color=DarkOrange>66. 对称二叉树-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称</p>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：迭代</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="67-验证二叉搜索树-中等"><a href="#67-验证二叉搜索树-中等" class="headerlink" title="67. 验证二叉搜索树-中等"></a><font color=DarkOrange>67. 验证二叉搜索树-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树</p>
<p><strong>有效</strong> 二叉搜索树定义如下：</p>
<ul>
<li>节点的左子树只包含 <strong>小于</strong> 当前节点的数</li>
<li>节点的右子树只包含 <strong>大于</strong> 当前节点的数</li>
<li>所有左子树和右子树自身必须也是二叉搜索树</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一: 递归</p>
<p>方法二：中序遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="68-最小路径和-中等"><a href="#68-最小路径和-中等" class="headerlink" title="68. 最小路径和-中等"></a><font color=DarkOrange>68. 最小路径和-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小</p>
<p><strong>说明：</strong>每次只能向下或者向右移动一步</p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="69-二叉树的直径-简单"><a href="#69-二叉树的直径-简单" class="headerlink" title="69. 二叉树的直径-简单"></a><font color=DarkOrange>69. 二叉树的直径-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点</p>
<p><strong>思路：</strong></p>
<p>深度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="70-路径总和-II-中等"><a href="#70-路径总和-II-中等" class="headerlink" title="70. 路径总和 II-中等"></a><font color=DarkOrange>70. 路径总和 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径</p>
<p><strong>叶子节点</strong> 是指没有子节点的节点</p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二：广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="71-Rand7-实现-Rand10-简单"><a href="#71-Rand7-实现-Rand10-简单" class="headerlink" title="71.  Rand7() 实现 Rand10()-简单"></a><font color=DarkOrange>71.  Rand7() 实现 Rand10()-简单</font></h4><p><strong>题目：</strong></p>
<p>给定方法 <code>rand7</code> 可生成 <code>[1,7]</code> 范围内的均匀随机整数，试写一个方法 <code>rand10</code> 生成 <code>[1,10]</code> 范围内的均匀随机整数</p>
<p>你只能调用 <code>rand7()</code> 且不能调用其他方法。请不要使用系统的 <code>Math.random()</code> 方法</p>
<p>每个测试用例将有一个内部参数 <code>n</code>，即你实现的函数 <code>rand10()</code> 在测试时将被调用的次数。请注意，这不是传递给 <code>rand10()</code> 的参数</p>
<p><strong>思路：</strong></p>
<p>拒绝采样</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="72-组合总和-中等"><a href="#72-组合总和-中等" class="headerlink" title="72. 组合总和-中等"></a><font color=DarkOrange>72. 组合总和-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合</p>
<p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的</p>
<p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 <code>150</code> 个</p>
<p><strong>思路：</strong></p>
<p>搜索回溯</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="73-旋转图像-中等"><a href="#73-旋转图像-中等" class="headerlink" title="73. 旋转图像-中等"></a><font color=DarkOrange>73. 旋转图像-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵 <code>matrix</code> 表示一个图像。请你将图像顺时针旋转 90 度</p>
<p>你必须在<strong>原地</strong> 旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong> 使用另一个矩阵来旋转图像</p>
<p><strong>思路：</strong></p>
<p>方法一：使用辅助数组</p>
<p>方法二：原地旋转</p>
<p>方法三：用翻转代替旋转</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="74-路径总和-简单"><a href="#74-路径总和-简单" class="headerlink" title="74. 路径总和-简单"></a><font color=DarkOrange>74. 路径总和-简单</font></h4><p><strong>题目：</strong></p>
<p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> </p>
<p><strong>叶子节点</strong> 是指没有子节点的节点</p>
<p><strong>思路：</strong></p>
<p>方法一：广度优先搜索</p>
<p>方法二：递归</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="75-回文链表-简单"><a href="#75-回文链表-简单" class="headerlink" title="75. 回文链表-简单"></a><font color=DarkOrange>75. 回文链表-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：将值复制到数组中后用双指针法</p>
<p>方法二：递归</p>
<p>方法三：快慢指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="76-多数元素-简单"><a href="#76-多数元素-简单" class="headerlink" title="76. 多数元素-简单"></a><font color=DarkOrange>76. 多数元素-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素</p>
<p><strong>思路：</strong></p>
<p>方法一：哈希表</p>
<p>方法二：排序</p>
<p>方法三：随机化</p>
<p>方法四：分治</p>
<p>方法五：Boyer-Moore 投票算法</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="77-最长重复子数组-中等"><a href="#77-最长重复子数组-中等" class="headerlink" title="77. 最长重复子数组-中等"></a><font color=DarkOrange>77. 最长重复子数组-中等</font></h4><p><strong>题目：</strong></p>
<p>给两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，返回两个数组中 <strong>公共的</strong> 、长度最长的子数组的长度 </p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：滑动窗口</p>
<p>方法三：二分查找 + 哈希</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="78-最大正方形-中等"><a href="#78-最大正方形-中等" class="headerlink" title="78. 最大正方形-中等"></a><font color=DarkOrange>78. 最大正方形-中等</font></h4><p><strong>题目：</strong></p>
<p>在一个由 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 组成的二维矩阵内，找到只包含 <code>&#39;1&#39;</code> 的最大正方形，并返回其面积</p>
<p><strong>思路：</strong></p>
<p>方法一：暴力法</p>
<p>方法二：动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="79-字符串解码-中等"><a href="#79-字符串解码-中等" class="headerlink" title="79. 字符串解码-中等"></a><font color=DarkOrange>79. 字符串解码-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个经过编码的字符串，返回它解码后的字符串</p>
<p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数</p>
<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的</p>
<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入</p>
<p><strong>思路：</strong></p>
<p>方法一：栈操作</p>
<p>方法二：递归</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="80-搜索二维矩阵-II-中等"><a href="#80-搜索二维矩阵-II-中等" class="headerlink" title="80. 搜索二维矩阵 II-中等"></a><font color=DarkOrange>80. 搜索二维矩阵 II-中等</font></h4><p><strong>题目：</strong></p>
<p>编写一个高效的算法来搜索 <code>*m* x *n*</code> 矩阵 <code>matrix</code> 中的一个目标值 <code>target</code> 。该矩阵具有以下特性：</p>
<ul>
<li>每行的元素从左到右升序排列</li>
<li>每列的元素从上到下升序排列</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：直接查找</p>
<p>方法二：二分查找</p>
<p>方法三：Z 字形查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="81-翻转二叉树-简单"><a href="#81-翻转二叉树-简单" class="headerlink" title="81. 翻转二叉树-简单"></a><font color=DarkOrange>81. 翻转二叉树-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点</p>
<p><strong>思路：</strong></p>
<p>递归</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="82-在排序数组中查找元素的第一个和最后一个位置-中等"><a href="#82-在排序数组中查找元素的第一个和最后一个位置-中等" class="headerlink" title="82. 在排序数组中查找元素的第一个和最后一个位置-中等"></a><font color=DarkOrange>82. 在排序数组中查找元素的第一个和最后一个位置-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置</p>
<p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code></p>
<p>你必须设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题</p>
<p><strong>思路：</strong></p>
<p>二分查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="83-最长公共前缀-简单"><a href="#83-最长公共前缀-简单" class="headerlink" title="83. 最长公共前缀-简单"></a><font color=DarkOrange>83. 最长公共前缀-简单</font></h4><p><strong>题目：</strong></p>
<p>编写一个函数来查找字符串数组中的最长公共前缀</p>
<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code></p>
<p><strong>思路：</strong></p>
<p>方法一：横向扫描</p>
<p>方法二：纵向扫描</p>
<p>方法三：分治</p>
<p>方法四：二分查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="84-寻找峰值-中等"><a href="#84-寻找峰值-中等" class="headerlink" title="84. 寻找峰值-中等"></a><font color=DarkOrange>84. 寻找峰值-中等</font></h4><p><strong>题目：</strong></p>
<p>峰值元素是指其值严格大于左右相邻值的元素</p>
<p>给你一个整数数组 <code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 <strong>任何一个峰值</strong> 所在位置即可</p>
<p>你可以假设 <code>nums[-1] = nums[n] = -∞</code> </p>
<p>你必须实现时间复杂度为 <code>O(log n)</code> 的算法来解决此问题</p>
<p><strong>思路：</strong></p>
<p>方法一：寻找最大值</p>
<p>方法二：迭代爬坡</p>
<p>方法三：方法二的二分查找优化</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="85-最长连续序列-中等"><a href="#85-最长连续序列-中等" class="headerlink" title="85. 最长连续序列-中等"></a><font color=DarkOrange>85. 最长连续序列-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度</p>
<p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题</p>
<p><strong>思路：</strong></p>
<p>哈希表</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="86-基本计算器-II-中等"><a href="#86-基本计算器-II-中等" class="headerlink" title="86. 基本计算器 II-中等"></a><font color=DarkOrange>86. 基本计算器 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值</p>
<p>整数除法仅保留整数部分</p>
<p>你可以假设给定的表达式总是有效的。所有中间结果将在 <code>[-2^31, 2^31 - 1]</code> 的范围内</p>
<p><strong>注意：</strong>不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval()</code> </p>
<p><strong>思路：</strong></p>
<p>栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="87-岛屿的最大面积-中等"><a href="#87-岛屿的最大面积-中等" class="headerlink" title="87. 岛屿的最大面积-中等"></a><font color=DarkOrange>87. 岛屿的最大面积-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个大小为 <code>m x n</code> 的二进制矩阵 <code>grid</code> </p>
<p><strong>岛屿</strong> 是由一些相邻的 <code>1</code> (代表土地) 构成的组合，这里的「相邻」要求两个 <code>1</code> 必须在 <strong>水平或者竖直的四个方向上</strong> 相邻。你可以假设 <code>grid</code> 的四个边缘都被 <code>0</code>（代表水）包围着</p>
<p>岛屿的面积是岛上值为 <code>1</code> 的单元格的数目</p>
<p>计算并返回 <code>grid</code> 中最大的岛屿面积。如果没有岛屿，则返回面积为 <code>0</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二：深度优先搜索 + 栈</p>
<p>方法三：广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="88-删除排序链表中的重复元素-简单"><a href="#88-删除排序链表中的重复元素-简单" class="headerlink" title="88. 删除排序链表中的重复元素-简单"></a><font color=DarkOrange>88. 删除排序链表中的重复元素-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个已排序的链表的头 <code>head</code> ， 删除所有重复的元素，使每个元素只出现一次 。返回已排序的链表</p>
<p><strong>思路：</strong></p>
<p>一次遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="89-不同路径-中等"><a href="#89-不同路径-中等" class="headerlink" title="89. 不同路径-中等"></a><font color=DarkOrange>89. 不同路径-中等</font></h4><p><strong>题目：</strong></p>
<p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）</p>
<p>问总共有多少条不同的路径？</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：组合数学</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="90-打家劫舍-中等"><a href="#90-打家劫舍-中等" class="headerlink" title="90. 打家劫舍-中等"></a><font color=DarkOrange>90. 打家劫舍-中等</font></h4><p><strong>题目：</strong></p>
<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong></p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额</p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="91-买卖股票的最佳时机-II-中等"><a href="#91-买卖股票的最佳时机-II-中等" class="headerlink" title="91. 买卖股票的最佳时机 II-中等"></a><font color=DarkOrange>91. 买卖股票的最佳时机 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格</p>
<p>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售</p>
<p>返回你能获得的 <strong>最大</strong> 利润</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：贪心</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="92-两两交换链表中的节点-中等"><a href="#92-两两交换链表中的节点-中等" class="headerlink" title="92. 两两交换链表中的节点-中等"></a><font color=DarkOrange>92. 两两交换链表中的节点-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）</p>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：迭代</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="93-乘积最大子数组-中等"><a href="#93-乘积最大子数组-中等" class="headerlink" title="93. 乘积最大子数组-中等"></a><font color=DarkOrange>93. 乘积最大子数组-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积</p>
<p>测试用例的答案是一个 <strong>32-位</strong> 整数</p>
<p><strong>子数组</strong> 是数组的连续子序列</p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="94-移动零-简单"><a href="#94-移动零-简单" class="headerlink" title="94. 移动零-简单"></a><font color=DarkOrange>94. 移动零-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序</p>
<p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作</p>
<p><strong>思路：</strong></p>
<p>双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="95-二叉树最大宽度-中等"><a href="#95-二叉树最大宽度-中等" class="headerlink" title="95. 二叉树最大宽度-中等"></a><font color=DarkOrange>95. 二叉树最大宽度-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一棵二叉树的根节点 <code>root</code> ，返回树的 <strong>最大宽度</strong> </p>
<p>树的 <strong>最大宽度</strong> 是所有层中最大的 <strong>宽度</strong> </p>
<p>每一层的 <strong>宽度</strong> 被定义为该层最左和最右的非空节点（即，两个端点）之间的长度。将这个二叉树视作与满二叉树结构相同，两端点间会出现一些延伸到这一层的 <code>null</code> 节点，这些 <code>null</code> 节点也计入长度</p>
<p>题目数据保证答案将会在 <strong>32 位</strong> 带符号整数范围内</p>
<p><strong>思路：</strong></p>
<p>方法一：广度优先搜索</p>
<p>方法二：深度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="96-复制带随机指针的链表-中等"><a href="#96-复制带随机指针的链表-中等" class="headerlink" title="96. 复制带随机指针的链表-中等"></a><font color=DarkOrange>96. 复制带随机指针的链表-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点</p>
<p>构造这个链表的 <strong><a href="https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin">深拷贝</a><strong>。 深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的<code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。</strong>复制链表中的指针都不应指向原链表中的节点</strong> </p>
<p>例如，如果原链表中有 <code>X</code> 和 <code>Y</code> 两个节点，其中 <code>X.random --&gt; Y</code> 。那么在复制链表中对应的两个节点 <code>x</code> 和 <code>y</code> ，同样有 <code>x.random --&gt; y</code> </p>
<p>返回复制链表的头节点</p>
<p>用一个由 <code>n</code> 个节点组成的链表来表示输入&#x2F;输出中的链表。每个节点用一个 <code>[val, random_index]</code> 表示：</p>
<ul>
<li><code>val</code>：一个表示 <code>Node.val</code> 的整数</li>
<li><code>random_index</code>：随机指针指向的节点索引（范围从 <code>0</code> 到 <code>n-1</code>）；如果不指向任何节点，则为 <code>null</code></li>
</ul>
<p>你的代码 <strong>只</strong> 接受原链表的头节点 <code>head</code> 作为传入参数</p>
<p><strong>思路：</strong></p>
<p>方法一：回溯 + 哈希表</p>
<p>方法二：迭代 + 节点拆分</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="97-排序数组-堆排序-中等"><a href="#97-排序数组-堆排序-中等" class="headerlink" title="97. 排序数组-堆排序-中等"></a><font color=DarkOrange>97. 排序数组-堆排序-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列</p>
<p><strong>思路：</strong></p>
<p>先将待排序的序列建成大根堆，使得每个父节点的元素大于等于它的子节点</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="98-寻找旋转排序数组中的最小值-中等"><a href="#98-寻找旋转排序数组中的最小值-中等" class="headerlink" title="98. 寻找旋转排序数组中的最小值-中等"></a><font color=DarkOrange>98. 寻找旋转排序数组中的最小值-中等</font></h4><p><strong>题目：</strong></p>
<p>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7]</code> 在变化后可能得到：</p>
<ul>
<li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,2]</code></li>
<li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,2,4,5,6,7]</code></li>
</ul>
<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> </p>
<p>给你一个元素值 <strong>互不相同</strong> 的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> </p>
<p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题</p>
<p><strong>思路：</strong></p>
<p>二分查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="99-最大数-中等"><a href="#99-最大数-中等" class="headerlink" title="99. 最大数-中等"></a><font color=DarkOrange>99. 最大数-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一组非负整数 <code>nums</code>，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数</p>
<p><strong>注意：</strong>输出结果可能非常大，所以你需要返回一个字符串而不是整数</p>
<p><strong>思路：</strong></p>
<p>排序</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="100-二叉树的序列化与反序列化-困难"><a href="#100-二叉树的序列化与反序列化-困难" class="headerlink" title="100. 二叉树的序列化与反序列化-困难"></a><font color=DarkOrange>100. 二叉树的序列化与反序列化-困难</font></h4><p><strong>题目：</strong></p>
<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据</p>
<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 &#x2F; 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构</p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二：括号表示编码 + 递归下降解码</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="101-长度最小的子数组-中等"><a href="#101-长度最小的子数组-中等" class="headerlink" title="101. 长度最小的子数组-中等"></a><font color=DarkOrange>101. 长度最小的子数组-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> </p>
<p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：暴力法</p>
<p>方法二：前缀和 + 二分查找</p>
<p>方法三：滑动窗口</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="102-单词拆分-中等"><a href="#102-单词拆分-中等" class="headerlink" title="102. 单词拆分-中等"></a><font color=DarkOrange>102. 单词拆分-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串 <code>s</code> 和一个字符串列表 <code>wordDict</code> 作为字典。请你判断是否可以利用字典中出现的单词拼接出 <code>s</code> </p>
<p><strong>注意：</strong>不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用</p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="103-验证IP地址-中等"><a href="#103-验证IP地址-中等" class="headerlink" title="103. 验证IP地址-中等"></a><font color=DarkOrange>103. 验证IP地址-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个字符串 <code>queryIP</code>。如果是有效的 IPv4 地址，返回 <code>&quot;IPv4&quot;</code> ；如果是有效的 IPv6 地址，返回 <code>&quot;IPv6&quot;</code> ；如果不是上述类型的 IP 地址，返回 <code>&quot;Neither&quot;</code> </p>
<p><strong>有效的IPv4地址</strong> 是 <code>“x1.x2.x3.x4”</code> 形式的IP地址。 其中 <code>0 &lt;= xi &lt;= 255</code> 且 <code>xi</code> <strong>不能包含</strong> 前导零。例如: <code>“192.168.1.1”</code> 、 <code>“192.168.1.0”</code> 为有效IPv4地址， <code>“192.168.01.1”</code> 为无效IPv4地址; <code>“192.168.1.00”</code> 、 <code>“192.168@1.1”</code> 为无效IPv4地址</p>
<p><strong>一个有效的IPv6地址</strong> 是一个格式为<code>“x1:x2:x3:x4:x5:x6:x7:x8”</code> 的IP地址，其中：</p>
<ul>
<li><code>1 &lt;= xi.length &lt;= 4</code></li>
<li><code>xi</code> 是一个 <strong>十六进制字符串</strong> ，可以包含数字、小写英文字母( <code>&#39;a&#39;</code> 到 <code>&#39;f&#39;</code> )和大写英文字母( <code>&#39;A&#39;</code> 到 <code>&#39;F&#39;</code> )</li>
<li>在 <code>xi</code> 中允许前导零</li>
</ul>
<p>例如 <code>&quot;2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code> 和<code>&quot;2001:db8:85a3:0:0:8A2E:0370:7334&quot;</code> 是有效的 IPv6地址，而 <code>&quot;2001:0db8:85a3::8A2E:037j:7334&quot;</code> 和 <code>&quot;02001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code> 是无效的 IPv6 地址</p>
<p><strong>思路：</strong></p>
<p>依次判断</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="104-和为-K-的子数组-中等"><a href="#104-和为-K-的子数组-中等" class="headerlink" title="104. 和为 K 的子数组-中等"></a><font color=DarkOrange>104. 和为 K 的子数组-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回该数组中和为 <code>k</code> 的连续子数组的个数</p>
<p><strong>思路：</strong></p>
<p>方法一：枚举</p>
<p>方法二：前缀和 + 哈希表优化</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="105-只出现一次的数字-简单"><a href="#105-只出现一次的数字-简单" class="headerlink" title="105. 只出现一次的数字-简单"></a><font color=DarkOrange>105. 只出现一次的数字-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code> ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素</p>
<p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间</p>
<p><strong>思路：</strong></p>
<p>位运算</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="106-用两个栈实现队列-简单"><a href="#106-用两个栈实现队列-简单" class="headerlink" title="106. 用两个栈实现队列-简单"></a><font color=DarkOrange>106. 用两个栈实现队列-简单</font></h4><p><strong>题目：</strong></p>
<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 )</p>
<p><strong>思路：</strong></p>
<p>双栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="107-对角线遍历-中等"><a href="#107-对角线遍历-中等" class="headerlink" title="107. 对角线遍历-中等"></a><font color=DarkOrange>107. 对角线遍历-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个大小为 m x n 的矩阵 mat ，请以对角线遍历的顺序，用一个数组返回这个矩阵中的所有元素</p>
<p><strong>思路：</strong></p>
<p>直接模拟</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="108-移掉-K-位数字-中等"><a href="#108-移掉-K-位数字-中等" class="headerlink" title="108. 移掉 K 位数字-中等"></a><font color=DarkOrange>108. 移掉 K 位数字-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个以字符串表示的非负整数 <code>num</code> 和一个整数 <code>k</code> ，移除这个数中的 <code>k</code> 位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字</p>
<p><strong>思路：</strong></p>
<p>贪心 + 单调栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="109-基本计算器-困难"><a href="#109-基本计算器-困难" class="headerlink" title="109. 基本计算器-困难"></a><font color=DarkOrange>109. 基本计算器-困难</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值</p>
<p>注意:不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval()</code> </p>
<p><strong>思路：</strong></p>
<p>括号展开 + 栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="110-二叉搜索树与双向链表-中等"><a href="#110-二叉搜索树与双向链表-中等" class="headerlink" title="110. 二叉搜索树与双向链表-中等"></a><font color=DarkOrange>110. 二叉搜索树与双向链表-中等</font></h4><p><strong>题目：</strong></p>
<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<h4 id="111-排序数组-归并排序-中等"><a href="#111-排序数组-归并排序-中等" class="headerlink" title="111. 排序数组-归并排序-中等"></a><font color=DarkOrange>111. 排序数组-归并排序-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列</p>
<p><strong>思路：</strong></p>
<p>利用了分治的思想来对序列进行排序</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="112-LFU-缓存-困难"><a href="#112-LFU-缓存-困难" class="headerlink" title="112. LFU 缓存-困难"></a><font color=DarkOrange>112. LFU 缓存-困难</font></h4><p><strong>题目：</strong></p>
<p>请你为最不经常使用（LFU）缓存算法设计并实现数据结构</p>
<p>实现 <code>LFUCache</code> 类：</p>
<ul>
<li><code>LFUCache(int capacity)</code> - 用数据结构的容量 <code>capacity</code> 初始化对象</li>
<li><code>int get(int key)</code> - 如果键 <code>key</code> 存在于缓存中，则获取键的值，否则返回 <code>-1</code> </li>
<li><code>void put(int key, int value)</code> - 如果键 <code>key</code> 已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量 <code>capacity</code> 时，则应该在插入新项之前，移除最不经常使用的项。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除 <strong>最近最久未使用</strong> 的键</li>
</ul>
<p>为了确定最不常使用的键，可以为缓存中的每个键维护一个 <strong>使用计数器</strong> 。使用计数最小的键是最久未使用的键</p>
<p>当一个键首次插入到缓存中时，它的使用计数器被设置为 <code>1</code> (由于 put 操作)。对缓存中的键执行 <code>get</code> 或 <code>put</code> 操作，使用计数器的值将会递增</p>
<p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行</p>
<p><strong>思路：</strong></p>
<p>方法一：哈希表 + 平衡二叉树</p>
<p>方法二：双哈希表</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="113-每日温度-中等"><a href="#113-每日温度-中等" class="headerlink" title="113. 每日温度-中等"></a><font color=DarkOrange>113. 每日温度-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替</p>
<p><strong>思路：</strong></p>
<p>方法一：暴力</p>
<p>方法二：单调栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="114-课程表-中等"><a href="#114-课程表-中等" class="headerlink" title="114. 课程表-中等"></a><font color=DarkOrange>114. 课程表-中等</font></h4><p><strong>题目：</strong></p>
<p>你这个学期必须选修 <code>numCourses</code> 门课程，记为 <code>0</code> 到 <code>numCourses - 1</code> </p>
<p>在选修某些课程之前需要一些先修课程。 先修课程按数组 <code>prerequisites</code> 给出，其中 <code>prerequisites[i] = [ai, bi]</code> ，表示如果要学习课程 <code>ai</code> 则 <strong>必须</strong> 先学习课程 <code>bi</code> </p>
<ul>
<li>例如，先修课程对 <code>[0, 1]</code> 表示：想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code></li>
</ul>
<p>请你判断是否可能完成所有课程的学习？如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二: 广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="115-排序奇升偶降链表-中等"><a href="#115-排序奇升偶降链表-中等" class="headerlink" title="115. 排序奇升偶降链表-中等"></a><font color=DarkOrange>115. 排序奇升偶降链表-中等</font></h4><p><strong>题目：</strong></p>
<p>字节跳动高频题</p>
<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="116-二叉树的完全性检验-中等"><a href="#116-二叉树的完全性检验-中等" class="headerlink" title="116. 二叉树的完全性检验-中等"></a><font color=DarkOrange>116. 二叉树的完全性检验-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉树的 <code>root</code> ，确定它是否是一个完全二叉树</p>
<p>在一个 <strong>完全二叉树</strong> 中，除了最后一个关卡外，所有关卡都是完全被填满的，并且最后一个关卡中的所有节点都是尽可能靠左的。它可以包含 <code>1</code> 到 <code>2h</code> 节点之间的最后一级 <code>h</code> </p>
<p><strong>思路：</strong></p>
<p>广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="117-检测循环依赖-中等"><a href="#117-检测循环依赖-中等" class="headerlink" title="117. 检测循环依赖-中等"></a><font color=DarkOrange>117. 检测循环依赖-中等</font></h4><p><strong>题目：</strong></p>
<p>补充题</p>
<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="118-二叉搜索树的第k大节点-简单"><a href="#118-二叉搜索树的第k大节点-简单" class="headerlink" title="118. 二叉搜索树的第k大节点-简单"></a><font color=DarkOrange>118. 二叉搜索树的第k大节点-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一棵二叉搜索树，请找出其中第 k 大的节点的值</p>
<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="119-盛最多水的容器-中等"><a href="#119-盛最多水的容器-中等" class="headerlink" title="119. 盛最多水的容器-中等"></a><font color=DarkOrange>119. 盛最多水的容器-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> </p>
<p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水</p>
<p>返回容器可以储存的最大水量</p>
<p><strong>说明：</strong>你不能倾斜容器</p>
<p><strong>思路：</strong></p>
<p>双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="120-单词搜索-中等"><a href="#120-单词搜索-中等" class="headerlink" title="120. 单词搜索-中等"></a><font color=DarkOrange>120. 单词搜索-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> </p>
<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用</p>
<p><strong>思路：</strong></p>
<p>回溯</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="121-青蛙跳台阶问题-简单"><a href="#121-青蛙跳台阶问题-简单" class="headerlink" title="121. 青蛙跳台阶问题-简单"></a><font color=DarkOrange>121. 青蛙跳台阶问题-简单</font></h4><p><strong>题目：</strong></p>
<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 <code>n</code> 级的台阶总共有多少种跳法</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1</p>
<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="122-组合总和-II-中等"><a href="#122-组合总和-II-中等" class="headerlink" title="122. 组合总和 II-中等"></a><font color=DarkOrange>122. 组合总和 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合</p>
<p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> </p>
<p><strong>注意：</strong>解集不能包含重复的组合</p>
<p><strong>思路：</strong></p>
<p>回溯</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="123-跳跃游戏-中等"><a href="#123-跳跃游戏-中等" class="headerlink" title="123. 跳跃游戏-中等"></a><font color=DarkOrange>123. 跳跃游戏-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> </p>
<p>数组中的每个元素代表你在该位置可以跳跃的最大长度</p>
<p>判断你是否能够到达最后一个下标</p>
<p><strong>思路：</strong></p>
<p>贪心</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="124-二叉树的后序遍历-简单"><a href="#124-二叉树的后序遍历-简单" class="headerlink" title="124. 二叉树的后序遍历-简单"></a><font color=DarkOrange>124. 二叉树的后序遍历-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一棵二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>后序遍历</strong> </p>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：迭代</p>
<p>方法三：Morris 遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="125-数组中的逆序对-困难"><a href="#125-数组中的逆序对-困难" class="headerlink" title="125. 数组中的逆序对-困难"></a><font color=DarkOrange>125. 数组中的逆序对-困难</font></h4><p><strong>题目：</strong></p>
<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数</p>
<p><strong>思路：</strong></p>
<p>方法一：归并排序</p>
<p>方法二：离散化树状数组</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="126-螺旋矩阵-II-中等"><a href="#126-螺旋矩阵-II-中等" class="headerlink" title="126. 螺旋矩阵 II-中等"></a><font color=DarkOrange>126. 螺旋矩阵 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> </p>
<p><strong>思路：</strong></p>
<p>模拟</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="127-搜索二维矩阵-中等"><a href="#127-搜索二维矩阵-中等" class="headerlink" title="127. 搜索二维矩阵-中等"></a><font color=DarkOrange>127. 搜索二维矩阵-中等</font></h4><p><strong>题目：</strong></p>
<p>编写一个高效的算法来判断 <code>m x n</code> 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p>
<ul>
<li>每行中的整数从左到右按升序排列</li>
<li>每行的第一个整数大于前一行的最后一个整数</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：两次二分查找</p>
<p>方法二：一次二分查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="128-删除有序数组中的重复项-简单"><a href="#128-删除有序数组中的重复项-简单" class="headerlink" title="128. 删除有序数组中的重复项-简单"></a><font color=DarkOrange>128. 删除有序数组中的重复项-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你<strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong></p>
<p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 <code>k</code> 个元素，那么 <code>nums</code> 的前 <code>k</code> 个元素应该保存最终结果</p>
<p>将最终结果插入 <code>nums</code> 的前 <code>k</code> 个位置后返回 <code>k</code> </p>
<p>不要使用额外的空间，你必须在 <strong>原地修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成</p>
<p><strong>思路：</strong></p>
<p>双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="129-圆环回原点问题-中等"><a href="#129-圆环回原点问题-中等" class="headerlink" title="129. 圆环回原点问题-中等"></a><font color=DarkOrange>129. 圆环回原点问题-中等</font></h4><p><strong>题目：</strong></p>
<p>字节跳动高频题</p>
<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="130-全排列-II-中等"><a href="#130-全排列-II-中等" class="headerlink" title="130. 全排列 II-中等"></a><font color=DarkOrange>130. 全排列 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个可包含重复数字的序列 <code>nums</code> ，<strong>按任意顺序</strong> 返回所有不重复的全排列</p>
<p><strong>思路：</strong></p>
<p>搜索回溯</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="131-零钱兑换-II-中等"><a href="#131-零钱兑换-II-中等" class="headerlink" title="131. 零钱兑换 II-中等"></a><font color=DarkOrange>131. 零钱兑换 II-中等</font></h4><p><strong>题目：</strong></p>
<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="132-斐波那契数列-简单"><a href="#132-斐波那契数列-简单" class="headerlink" title="132. 斐波那契数列-简单"></a><font color=DarkOrange>132. 斐波那契数列-简单</font></h4><p><strong>题目：</strong></p>
<p>写一个函数，输入 <code>n</code> ，求斐波那契（Fibonacci）数列的第 <code>n</code> 项（即 <code>F(N)</code>）。斐波那契数列的定义如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">F(0) = 0,   F(1) = 1</span><br><span class="line">F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br></pre></td></tr></table></figure>

<p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：矩阵快速幂</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="133-Pow-x-n-中等"><a href="#133-Pow-x-n-中等" class="headerlink" title="133. Pow(x, n)-中等"></a><font color=DarkOrange>133. Pow(x, n)-中等</font></h4><p><strong>题目：</strong></p>
<p>实现pow(x, n) ，即计算 <code>x</code> 的整数 <code>n</code> 次幂函数（即，<code>x^n</code> ）</p>
<p><strong>思路：</strong></p>
<p>方法一：快速幂 + 递归</p>
<p>方法二：快速幂 + 迭代</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="134-旋转链表-中等"><a href="#134-旋转链表-中等" class="headerlink" title="134. 旋转链表-中等"></a><font color=DarkOrange>134. 旋转链表-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置</p>
<p><strong>思路：</strong></p>
<p>闭合为环</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="135-删除二叉搜索树中的节点-中等"><a href="#135-删除二叉搜索树中的节点-中等" class="headerlink" title="135. 删除二叉搜索树中的节点-中等"></a><font color=DarkOrange>135. 删除二叉搜索树中的节点-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉搜索树的根节点 <strong>root</strong> 和一个值 <strong>key</strong>，删除二叉搜索树中的 <strong>key</strong> 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用</p>
<p>一般来说，删除节点可分为两个步骤：</p>
<ol>
<li>首先找到需要删除的节点</li>
<li>如果找到了，删除它</li>
</ol>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：迭代</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="136-最小的k个数-简单"><a href="#136-最小的k个数-简单" class="headerlink" title="136. 最小的k个数-简单"></a><font color=DarkOrange>136. 最小的k个数-简单</font></h4><p><strong>题目：</strong></p>
<p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4</p>
<p><strong>思路：</strong></p>
<p>方法一：排序</p>
<p>方法二：堆</p>
<p>方法三：快排思想</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="137-卖股票的最佳时机-III-困难"><a href="#137-卖股票的最佳时机-III-困难" class="headerlink" title="137. 卖股票的最佳时机 III-困难"></a><font color=DarkOrange>137. 卖股票的最佳时机 III-困难</font></h4><p><strong>题目：</strong></p>
<p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格</p>
<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>两笔</strong> 交易</p>
<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）</p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="138-整数反转-简单"><a href="#138-整数反转-简单" class="headerlink" title="138. 整数反转-简单"></a><font color=DarkOrange>138. 整数反转-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果</p>
<p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−2^31, 2^31 − 1]</code> ，就返回 0</p>
<p><strong>假设环境不允许存储 64 位整数（有符号或无符号）</strong></p>
<p><strong>思路：</strong></p>
<p>数学</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="139-连续子数组的最大和-简单"><a href="#139-连续子数组的最大和-简单" class="headerlink" title="139. 连续子数组的最大和-简单"></a><font color=DarkOrange>139. 连续子数组的最大和-简单</font></h4><p><strong>题目：</strong></p>
<p>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值</p>
<p>要求时间复杂度为O(n)</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：分治</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="140-整数组顺序使奇数位于偶数前面-简单"><a href="#140-整数组顺序使奇数位于偶数前面-简单" class="headerlink" title="140. 整数组顺序使奇数位于偶数前面-简单"></a><font color=DarkOrange>140. 整数组顺序使奇数位于偶数前面-简单</font></h4><p><strong>题目：</strong></p>
<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数在数组的前半部分，所有偶数在数组的后半部分</p>
<p><strong>思路：</strong></p>
<p>方法一：两次遍历</p>
<p>方法二：双指针 + 一次遍历</p>
<p>方法三：原地交换</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="141-二叉搜索树中第K小的元素-中等"><a href="#141-二叉搜索树中第K小的元素-中等" class="headerlink" title="141. 二叉搜索树中第K小的元素-中等"></a><font color=DarkOrange>141. 二叉搜索树中第K小的元素-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉搜索树的根节点 <code>root</code> ，和一个整数 <code>k</code> ，请你设计一个算法查找其中第 <code>k</code> 个最小元素（从 1 开始计数）</p>
<p><strong>思路：</strong></p>
<p>方法一：中序遍历</p>
<p>方法二：记录子树的结点数</p>
<p>方法三：平衡二叉搜索树</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="142-用队列实现栈-简单"><a href="#142-用队列实现栈-简单" class="headerlink" title="142. 用队列实现栈-简单"></a><font color=DarkOrange>142. 用队列实现栈-简单</font></h4><p><strong>题目：</strong></p>
<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）</p>
<p>实现 <code>MyStack</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 压入栈顶</li>
<li><code>int pop()</code> 移除并返回栈顶元素</li>
<li><code>int top()</code> 返回栈顶元素</li>
<li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code></li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>你只能使用队列的基本操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作</li>
<li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：两个队列</p>
<p>方法二：一个队列</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="143-字典序的第K小数字-困难"><a href="#143-字典序的第K小数字-困难" class="headerlink" title="143. 字典序的第K小数字-困难"></a><font color=DarkOrange>143. 字典序的第K小数字-困难</font></h4><p><strong>题目：</strong></p>
<p>给定整数 <code>n</code> 和 <code>k</code>，返回 <code>[1, n]</code> 中字典序第 <code>k</code> 小的数字</p>
<p><strong>思路：</strong></p>
<p>字典树思想</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="144-分发糖果-困难"><a href="#144-分发糖果-困难" class="headerlink" title="144. 分发糖果-困难"></a><font color=DarkOrange>144. 分发糖果-困难</font></h4><p><strong>题目：</strong></p>
<p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code> 表示每个孩子的评分</p>
<p>你需要按照以下要求，给这些孩子分发糖果：</p>
<ul>
<li>每个孩子至少分配到 <code>1</code> 个糖果</li>
<li>相邻两个孩子评分更高的孩子会获得更多的糖果</li>
</ul>
<p>请你给每个孩子分发糖果，计算并返回需要准备的 <strong>最少糖果数目</strong> </p>
<p><strong>思路：</strong></p>
<p>方法一：两次遍历</p>
<p>方法二：常数空间遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="145-圆圈中最后剩下的数字-简单"><a href="#145-圆圈中最后剩下的数字-简单" class="headerlink" title="145. 圆圈中最后剩下的数字-简单"></a><font color=DarkOrange>145. 圆圈中最后剩下的数字-简单</font></h4><p><strong>题目：</strong></p>
<p>0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字</p>
<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3</p>
<p><strong>思路：</strong></p>
<p>方法一：数学 + 递归</p>
<p>方法二：数学 + 迭代</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="146-颜色分类-中等"><a href="#146-颜色分类-中等" class="headerlink" title="146. 颜色分类-中等"></a><font color=DarkOrange>146. 颜色分类-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个包含红色、白色和蓝色、共 <code>n</code> 个元素的数组 <code>nums</code> ，<strong>原地</strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列</p>
<p>我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色</p>
<p>必须在不使用库的sort函数的情况下解决这个问题</p>
<p><strong>思路：</strong></p>
<p>方法一：单指针</p>
<p>方法二：双指针</p>
<p>方法三：双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="147-矩阵中的最长递增路径-困难"><a href="#147-矩阵中的最长递增路径-困难" class="headerlink" title="147. 矩阵中的最长递增路径-困难"></a><font color=DarkOrange>147. 矩阵中的最长递增路径-困难</font></h4><p><strong>题目：</strong></p>
<p>给定一个 <code>m x n</code> 整数矩阵 <code>matrix</code> ，找出其中 <strong>最长递增路径</strong> 的长度</p>
<p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你 <strong>不能</strong> 在 <strong>对角线</strong> 方向上移动或移动到 <strong>边界外</strong>（即不允许环绕）</p>
<p><strong>思路：</strong></p>
<p>方法一：记忆化深度优先搜索</p>
<p>方法二：拓扑排序</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="148-二维数组中的查找-中等"><a href="#148-二维数组中的查找-中等" class="headerlink" title="148. 二维数组中的查找-中等"></a><font color=DarkOrange>148. 二维数组中的查找-中等</font></h4><p><strong>题目：</strong></p>
<p>在一个 n * m 的二维数组中，每一行都按照从左到右 <strong>非递减</strong> 的顺序排序，每一列都按照从上到下 <strong>非递减</strong> 的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数</p>
<p><strong>思路：</strong></p>
<p>方法一：直接查找</p>
<p>方法二：二分查找</p>
<p>方法三：Z 字形查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="149-奇偶链表-中等"><a href="#149-奇偶链表-中等" class="headerlink" title="149. 奇偶链表-中等"></a><font color=DarkOrange>149. 奇偶链表-中等</font></h4><p><strong>题目：</strong></p>
<p>给定单链表的头节点 <code>head</code> ，将所有索引为奇数的节点和索引为偶数的节点分别组合在一起，然后返回重新排序的列表</p>
<p><strong>第一个</strong>节点的索引被认为是 <strong>奇数</strong> ， <strong>第二个</strong>节点的索引为 <strong>偶数</strong> ，以此类推</p>
<p>请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致</p>
<p>你必须在 <code>O(1)</code> 的额外空间复杂度和 <code>O(n)</code> 的时间复杂度下解决这个问题</p>
<p><strong>思路：</strong></p>
<p>分离节点后合并</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="150-解码方法-中等"><a href="#150-解码方法-中等" class="headerlink" title="150. 解码方法-中等"></a><font color=DarkOrange>150. 解码方法-中等</font></h4><p><strong>题目：</strong></p>
<p>一条包含字母 <code>A-Z</code> 的消息通过以下映射进行了 <strong>编码</strong> ：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;A&#x27;</span> -&gt; <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="string">&#x27;B&#x27;</span> -&gt; <span class="string">&quot;2&quot;</span></span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;Z&#x27;</span> -&gt; <span class="string">&quot;26&quot;</span></span><br></pre></td></tr></table></figure>

<p>要 <strong>解码</strong> 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，<code>&quot;11106&quot;</code> 可以映射为：</p>
<ul>
<li><code>&quot;AAJF&quot;</code> ，将消息分组为 <code>(1 1 10 6)</code></li>
<li><code>&quot;KJF&quot;</code> ，将消息分组为 <code>(11 10 6)</code></li>
</ul>
<p>注意，消息不能分组为 <code>(1 11 06)</code> ，因为 <code>&quot;06&quot;</code> 不能映射为 <code>&quot;F&quot;</code> ，这是由于 <code>&quot;6&quot;</code> 和 <code>&quot;06&quot;</code> 在映射中并不等价</p>
<p>给你一个只含数字的 <strong>非空</strong> 字符串 <code>s</code> ，请计算并返回 <strong>解码</strong> 方法的 <strong>总数</strong> </p>
<p>题目数据保证答案肯定是一个 <strong>32 位</strong> 的整数</p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="151-另一棵树的子树-简单"><a href="#151-另一棵树的子树-简单" class="headerlink" title="151. 另一棵树的子树-简单"></a><font color=DarkOrange>151. 另一棵树的子树-简单</font></h4><p><strong>题目：</strong></p>
<p>给你两棵二叉树 <code>root</code> 和 <code>subRoot</code> 。检验 <code>root</code> 中是否包含和 <code>subRoot</code> 具有相同结构和节点值的子树。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> </p>
<p>二叉树 <code>tree</code> 的一棵子树包括 <code>tree</code> 的某个节点和这个节点的所有后代节点。<code>tree</code> 也可以看做它自身的一棵子树</p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索暴力匹配</p>
<p>方法二：深度优先搜索序列上做串匹配</p>
<p>方法三：树哈希</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="152-打乱数组-中等"><a href="#152-打乱数组-中等" class="headerlink" title="152. 打乱数组-中等"></a><font color=DarkOrange>152. 打乱数组-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code> ，设计算法来打乱一个没有重复元素的数组。打乱后，数组的所有排列应该是 <strong>等可能</strong> 的</p>
<p>实现 <code>Solution</code> class：</p>
<ul>
<li><code>Solution(int[] nums)</code> 使用整数数组 <code>nums</code> 初始化对象</li>
<li><code>int[] reset()</code> 重设数组到它的初始状态并返回</li>
<li><code>int[] shuffle()</code> 返回数组随机打乱后的结果</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：暴力</p>
<p>方法二：Fisher-Yates 洗牌算法</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="153-验证回文串-简单"><a href="#153-验证回文串-简单" class="headerlink" title="153. 验证回文串-简单"></a><font color=DarkOrange>153. 验证回文串-简单</font></h4><p><strong>题目：</strong></p>
<p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> </p>
<p>字母和数字都属于字母数字字符</p>
<p>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：筛选 + 判断</p>
<p>方法二：在原字符串上直接判断</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="154-回文数-简单"><a href="#154-回文数-简单" class="headerlink" title="154. 回文数-简单"></a><font color=DarkOrange>154. 回文数-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> </p>
<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数</p>
<ul>
<li>例如，<code>121</code> 是回文，而 <code>123</code> 不是</li>
</ul>
<p><strong>思路：</strong></p>
<p>反转一半数字</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="154-轮转数组-中等"><a href="#154-轮转数组-中等" class="headerlink" title="154. 轮转数组-中等"></a><font color=DarkOrange>154. 轮转数组-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个数组，将数组中的元素向右轮转 <code>k</code> 个位置，其中 <code>k</code> 是非负数</p>
<p><strong>思路：</strong></p>
<p>方法一：使用额外的数组</p>
<p>方法二：环状替换</p>
<p>方法三：数组翻转</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="155-跳跃游戏-II-中等"><a href="#155-跳跃游戏-II-中等" class="headerlink" title="155. 跳跃游戏 II-中等"></a><font color=DarkOrange>155. 跳跃游戏 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的第一个位置</p>
<p>数组中的每个元素代表你在该位置可以跳跃的最大长度</p>
<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置</p>
<p>假设你总是可以到达数组的最后一个位置</p>
<p><strong>思路：</strong></p>
<p>方法一：反向查找出发位置</p>
<p>方法二：正向查找可到达的最大位置</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="157-两数相加-II-中等"><a href="#157-两数相加-II-中等" class="headerlink" title="157. 两数相加 II-中等"></a><font color=DarkOrange>157. 两数相加 II-中等</font></h4><p><strong>题目：</strong></p>
<p>给你两个 <strong>非空</strong> 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表</p>
<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头</p>
<p><strong>思路：</strong></p>
<p>栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="158-二叉树的镜像-简单"><a href="#158-二叉树的镜像-简单" class="headerlink" title="158. 二叉树的镜像-简单"></a><font color=DarkOrange>158. 二叉树的镜像-简单</font></h4><p><strong>题目：</strong></p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h88ink6q3sj30hk0fi752.jpg" alt="image.png" style="zoom:67%;" /></div>

<p><strong>思路：</strong></p>
<p>递归</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="159-寻找重复数-中等"><a href="#159-寻找重复数-中等" class="headerlink" title="159. 寻找重复数-中等"></a><font color=DarkOrange>159. 寻找重复数-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个包含 <code>n + 1</code> 个整数的数组 <code>nums</code> ，其数字都在 <code>[1, n]</code> 范围内（包括 <code>1</code> 和 <code>n</code>），可知至少存在一个重复的整数</p>
<p>假设 <code>nums</code> 只有 <strong>一个重复的整数</strong> ，返回 <strong>这个重复的数</strong> </p>
<p>你设计的解决方案必须 <strong>不修改</strong> 数组 <code>nums</code> 且只用常量级 <code>O(1)</code> 的额外空间</p>
<p><strong>思路：</strong></p>
<p>方法一：二分查找</p>
<p>方法二：二进制</p>
<p>方法三：快慢指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="160-实现-Trie-前缀树-中等"><a href="#160-实现-Trie-前缀树-中等" class="headerlink" title="160. 实现 Trie (前缀树)-中等"></a><font color=DarkOrange>160. 实现 Trie (前缀树)-中等</font></h4><p><strong>题目：</strong></p>
<p><strong>Trie</strong>（发音类似 “try”）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查</p>
<p>请你实现 Trie 类：</p>
<ul>
<li><code>Trie()</code> 初始化前缀树对象</li>
<li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> </li>
<li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> </li>
<li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>字典树</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="161-数据流的中位数-困难"><a href="#161-数据流的中位数-困难" class="headerlink" title="161. 数据流的中位数-困难"></a><font color=DarkOrange>161. 数据流的中位数-困难</font></h4><p><strong>题目：</strong></p>
<p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值</p>
<p>例如，</p>
<p>[2,3,4] 的中位数是 3</p>
<p>[2,3] 的中位数是 (2 + 3) &#x2F; 2 &#x3D; 2.5</p>
<p>设计一个支持以下两种操作的数据结构：</p>
<ul>
<li>void addNum(int num) - 从数据流中添加一个整数到数据结构中</li>
<li>double findMedian() - 返回目前所有元素的中位数</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：优先队列</p>
<p>方法二：有序集合 + 双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="162-二叉树展开为链表-中等"><a href="#162-二叉树展开为链表-中等" class="headerlink" title="162. 二叉树展开为链表-中等"></a><font color=DarkOrange>162. 二叉树展开为链表-中等</font></h4><p><strong>题目：</strong></p>
<p>给你二叉树的根结点 <code>root</code> ，请你将它展开为一个单链表：</p>
<ul>
<li>展开后的单链表应该同样使用 <code>TreeNode</code> ，其中 <code>right</code> 子指针指向链表中下一个结点，而左子指针始终为 <code>null</code> </li>
<li>展开后的单链表应该与二叉树 <strong>先序遍历</strong> 顺序相同</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：前序遍历</p>
<p>方法二：前序遍历和展开同步进行</p>
<p>方法三：寻找前驱节点</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="163-接近的三数之和-中等"><a href="#163-接近的三数之和-中等" class="headerlink" title="163. 接近的三数之和-中等"></a><font color=DarkOrange>163. 接近的三数之和-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> 和 一个目标值 <code>target</code>。请你从 <code>nums</code> 中选出三个整数，使它们的和与 <code>target</code> 最接近</p>
<p>返回这三个数的和</p>
<p>假定每组输入只存在恰好一个解</p>
<p><strong>思路：</strong></p>
<p>排序 + 双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="164-打家劫舍-II-中等"><a href="#164-打家劫舍-II-中等" class="headerlink" title="164. 打家劫舍 II-中等"></a><font color=DarkOrange>164. 打家劫舍 II-中等</font></h4><p><strong>题目：</strong></p>
<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> </p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额</p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="165-三角形最小路径和-中等"><a href="#165-三角形最小路径和-中等" class="headerlink" title="165. 三角形最小路径和-中等"></a><font color=DarkOrange>165. 三角形最小路径和-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个三角形 <code>triangle</code> ，找出自顶向下的最小路径和</p>
<p>每一步只能移动到下一行中相邻的结点上。<strong>相邻的结点</strong> 在这里指的是 <strong>下标</strong> 与 <strong>上一层结点下标</strong> 相同或者等于 <strong>上一层结点下标 + 1</strong> 的两个结点。也就是说，如果正位于当前行的下标 <code>i</code> ，那么下一步可以移动到下一行的下标 <code>i</code> 或 <code>i + 1</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：动态规划 + 空间优化</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="166-顺时针打印矩阵-简单"><a href="#166-顺时针打印矩阵-简单" class="headerlink" title="166. 顺时针打印矩阵-简单"></a><font color=DarkOrange>166. 顺时针打印矩阵-简单</font></h4><p><strong>题目：</strong></p>
<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字</p>
<p><strong>思路：</strong></p>
<p>方法一：模拟</p>
<p>方法二：按层模拟</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="167-正则表达式匹配-困难"><a href="#167-正则表达式匹配-困难" class="headerlink" title="167. 正则表达式匹配-困难"></a><font color=DarkOrange>167. 正则表达式匹配-困难</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串 <code>s</code> 和一个字符规律 <code>p</code>，请你来实现一个支持 <code>&#39;.&#39;</code> 和 <code>&#39;*&#39;</code> 的正则表达式匹配</p>
<ul>
<li><code>&#39;.&#39;</code> 匹配任意单个字符</li>
<li><code>&#39;*&#39;</code> 匹配零个或多个前面的那一个元素</li>
</ul>
<p>所谓匹配，是要涵盖 <strong>整个</strong> 字符串 <code>s</code>的，而不是部分字符串</p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="168-从中序与后序遍历序列构造二叉树-中等"><a href="#168-从中序与后序遍历序列构造二叉树-中等" class="headerlink" title="168. 从中序与后序遍历序列构造二叉树-中等"></a><font color=DarkOrange>168. 从中序与后序遍历序列构造二叉树-中等</font></h4><p><strong>题目：</strong></p>
<p>给定两个整数数组 <code>inorder</code> 和 <code>postorder</code> ，其中 <code>inorder</code> 是二叉树的中序遍历， <code>postorder</code> 是同一棵树的后序遍历，请你构造并返回这颗二叉树</p>
<p><strong>思路：</strong></p>
<p>方法一：递归</p>
<p>方法二：迭代</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="169-第-N-位数字-中等"><a href="#169-第-N-位数字-中等" class="headerlink" title="169. 第 N 位数字-中等"></a><font color=DarkOrange>169. 第 N 位数字-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数 <code>n</code> ，请你在无限的整数序列 <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]</code> 中找出并返回第 <code>n</code> 位上的数字</p>
<p><strong>思路：</strong></p>
<p>方法一：二分查找</p>
<p>方法二：直接计算</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="170-树的子结构-中等"><a href="#170-树的子结构-中等" class="headerlink" title="170. 树的子结构-中等"></a><font color=DarkOrange>170. 树的子结构-中等</font></h4><p><strong>题目：</strong></p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h88j43kz1xj30p60gw40b.jpg" alt="image.png" style="zoom:67%;" /></div>

<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="171-链表求和-中等"><a href="#171-链表求和-中等" class="headerlink" title="171. 链表求和-中等"></a><font color=DarkOrange>171. 链表求和-中等</font></h4><p><strong>题目：</strong></p>
<p>给定两个用链表表示的整数，每个节点包含一个数位</p>
<p>这些数位是反向存放的，也就是个位排在链表首部</p>
<p>编写函数对这两个整数求和，并用链表形式返回结果</p>
<p><strong>思路：</strong></p>
<p>模拟</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="172-有效的括号字符串-中等"><a href="#172-有效的括号字符串-中等" class="headerlink" title="172. 有效的括号字符串-中等"></a><font color=DarkOrange>172. 有效的括号字符串-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个只包含三种字符的字符串：<code>（ </code>，<code>）</code> 和 <code>*</code>，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：</p>
<ol>
<li>任何左括号 <code>(</code> 必须有相应的右括号 <code>)</code></li>
<li>任何右括号 <code>)</code> 必须有相应的左括号 <code>(</code> </li>
<li>左括号 <code>(</code> 必须在对应的右括号之前 <code>)</code></li>
<li><code>*</code> 可以被视为单个右括号 <code>)</code> ，或单个左括号 <code>(</code> ，或一个空字符串</li>
<li>一个空字符串也被视为有效字符串</li>
</ol>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：栈</p>
<p>方法三：贪心</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="173-两个链表的第一个公共节点-简单"><a href="#173-两个链表的第一个公共节点-简单" class="headerlink" title="173. 两个链表的第一个公共节点-简单"></a><font color=DarkOrange>173. 两个链表的第一个公共节点-简单</font></h4><p><strong>题目：</strong></p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h88j86dqzej30lk0c6myc.jpg" alt="image.png" style="zoom:67%;" /></div>

<p><strong>思路：</strong></p>
<p>方法一：哈希集合</p>
<p>方法二：双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="174-前-K-个高频元素-中等"><a href="#174-前-K-个高频元素-中等" class="headerlink" title="174. 前 K 个高频元素-中等"></a><font color=DarkOrange>174. 前 K 个高频元素-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案</p>
<p><strong>思路：</strong></p>
<p>方法一：堆</p>
<p>方法二：基于快速排序</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="175-不同的二叉搜索树-中等"><a href="#175-不同的二叉搜索树-中等" class="headerlink" title="175. 不同的二叉搜索树-中等"></a><font color=DarkOrange>175. 不同的二叉搜索树-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：数学</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="176-两个数组的交集-简单"><a href="#176-两个数组的交集-简单" class="headerlink" title="176. 两个数组的交集-简单"></a><font color=DarkOrange>176. 两个数组的交集-简单</font></h4><p><strong>题目：</strong></p>
<p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回它们的交集 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> </p>
<p><strong>思路：</strong></p>
<p>方法一：两个集合</p>
<p>方法二：排序 + 双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="177-36进制加法-中等"><a href="#177-36进制加法-中等" class="headerlink" title="177. 36进制加法-中等"></a><font color=DarkOrange>177. 36进制加法-中等</font></h4><p><strong>题目：</strong></p>
<p>字节高频题</p>
<p><strong>思路：</strong><br><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="178-数组中出现次数超过一半的数字-简单"><a href="#178-数组中出现次数超过一半的数字-简单" class="headerlink" title="178. 数组中出现次数超过一半的数字-简单"></a><font color=DarkOrange>178. 数组中出现次数超过一半的数字-简单</font></h4><p><strong>题目：</strong></p>
<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素</p>
<p><strong>思路：</strong></p>
<p>方法一：哈希表</p>
<p>方法二：排序</p>
<p>方法三：随机化</p>
<p>方法四：分治</p>
<p>方法五：Boyer-Moore 投票算法</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="179-Excel表列名称-简单"><a href="#179-Excel表列名称-简单" class="headerlink" title="179. Excel表列名称-简单"></a><font color=DarkOrange>179. Excel表列名称-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数 <code>columnNumber</code> ，返回它在 Excel 表中相对应的列名称</p>
<p>例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">A -&gt; 1</span><br><span class="line">B -&gt; 2</span><br><span class="line">C -&gt; 3</span><br><span class="line">...</span><br><span class="line">Z -&gt; 26</span><br><span class="line">AA -&gt; 27</span><br><span class="line">AB -&gt; 28 </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>思路：</strong></p>
<p>数学</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="180-扑克牌中的顺子-简单"><a href="#180-扑克牌中的顺子-简单" class="headerlink" title="180. 扑克牌中的顺子-简单"></a><font color=DarkOrange>180. 扑克牌中的顺子-简单</font></h4><p><strong>题目：</strong></p>
<p>从<strong>若干副扑克牌</strong>中随机抽 <code>5</code> 张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14</p>
<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="181-鸡蛋掉落-困难"><a href="#181-鸡蛋掉落-困难" class="headerlink" title="181. 鸡蛋掉落-困难"></a><font color=DarkOrange>181. 鸡蛋掉落-困难</font></h4><p><strong>题目：</strong></p>
<p>给你 <code>k</code> 枚相同的鸡蛋，并可以使用一栋从第 <code>1</code> 层到第 <code>n</code> 层共有 <code>n</code> 层楼的建筑</p>
<p>已知存在楼层 <code>f</code> ，满足 <code>0 &lt;= f &lt;= n</code> ，任何从 <strong>高于</strong> <code>f</code> 的楼层落下的鸡蛋都会碎，从 <code>f</code> 楼层或比它低的楼层落下的鸡蛋都不会破</p>
<p>每次操作，你可以取一枚没有碎的鸡蛋并把它从任一楼层 <code>x</code> 扔下（满足 <code>1 &lt;= x &lt;= n</code>）。如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 <strong>重复使用</strong> 这枚鸡蛋</p>
<p>请你计算并返回要确定 <code>f</code> <strong>确切的值</strong> 的 <strong>最小操作次数</strong> 是多少？</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划 + 二分查找</p>
<p>方法二：决策单调性</p>
<p>方法三：数学法</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="182-最长递增子序列的个数-中等"><a href="#182-最长递增子序列的个数-中等" class="headerlink" title="182. 最长递增子序列的个数-中等"></a><font color=DarkOrange>182. 最长递增子序列的个数-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个未排序的整数数组 <code>nums</code> ， 返回最长递增子序列的个数</p>
<p><strong>注意</strong> 这个数列必须是 <strong>严格</strong> 递增的</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：贪心 + 前缀和 + 二分查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="183-简化路径-中等"><a href="#183-简化路径-中等" class="headerlink" title="183. 简化路径-中等"></a><font color=DarkOrange>183. 简化路径-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的 Unix 风格 <strong>绝对路径</strong> （以 <code>&#39;/&#39;</code> 开头），请你将其转化为更加简洁的规范路径</p>
<p>在 Unix 风格的文件系统中，一个点（<code>.</code>）表示当前目录本身；此外，两个点 （<code>..</code>） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，<code>&#39;//&#39;</code>）都被视为单个斜杠 <code>&#39;/&#39;</code> 。 对于此问题，任何其他格式的点（例如，<code>&#39;...&#39;</code>）均被视为文件&#x2F;目录名称</p>
<p>请注意，返回的 <strong>规范路径</strong> 必须遵循下述格式：</p>
<ul>
<li>始终以斜杠 <code>&#39;/&#39;</code> 开头</li>
<li>两个目录名之间必须只有一个斜杠 <code>&#39;/&#39;</code> </li>
<li>最后一个目录名（如果存在）<strong>不能</strong> 以 <code>&#39;/&#39;</code> 结尾</li>
<li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 <code>&#39;.&#39;</code> 或 <code>&#39;..&#39;</code>）</li>
</ul>
<p>返回简化后得到的 <strong>规范路径</strong> </p>
<p><strong>思路：</strong></p>
<p>栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="184-数组中重复的数据-中等"><a href="#184-数组中重复的数据-中等" class="headerlink" title="184. 数组中重复的数据-中等"></a><font color=DarkOrange>184. 数组中重复的数据-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，其中 <code>nums</code> 的所有整数都在范围 <code>[1, n]</code> 内，且每个整数出现 <strong>一次</strong> 或 <strong>两次</strong> 。请你找出所有出现 <strong>两次</strong> 的整数，并以数组形式返回</p>
<p>你必须设计并实现一个时间复杂度为 <code>O(n)</code> 且仅使用常量额外空间的算法解决此问题</p>
<p><strong>思路：</strong></p>
<p>方法一：将元素交换到对应的位置</p>
<p>方法二：使用正负号作为标记</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="185-斐波那契数-简单"><a href="#185-斐波那契数-简单" class="headerlink" title="185. 斐波那契数-简单"></a><font color=DarkOrange>185. 斐波那契数-简单</font></h4><p><strong>题目：</strong></p>
<p><strong>斐波那契数</strong> （通常用 <code>F(n)</code> 表示）形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">F(0) = 0，F(1) = 1</span><br><span class="line">F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</span><br></pre></td></tr></table></figure>

<p>给定 <code>n</code> ，请计算 <code>F(n)</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：矩阵快速幂</p>
<p>方法三：通项公式</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="186-删除字符串中的所有相邻重复项-简单"><a href="#186-删除字符串中的所有相邻重复项-简单" class="headerlink" title="186. 删除字符串中的所有相邻重复项-简单"></a><font color=DarkOrange>186. 删除字符串中的所有相邻重复项-简单</font></h4><p><strong>题目：</strong></p>
<p>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们</p>
<p>在 S 上反复执行重复项删除操作，直到无法继续删除</p>
<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一</p>
<p><strong>思路：</strong></p>
<p>栈</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="187-加油站-中等"><a href="#187-加油站-中等" class="headerlink" title="187. 加油站-中等"></a><font color=DarkOrange>187. 加油站-中等</font></h4><p><strong>题目：</strong></p>
<p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升</p>
<p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空</p>
<p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的</p>
<p><strong>思路：</strong></p>
<p>一次遍历</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="188-有效三角形的个数-中等"><a href="#188-有效三角形的个数-中等" class="headerlink" title="188. 有效三角形的个数-中等"></a><font color=DarkOrange>188. 有效三角形的个数-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个包含非负整数的数组 <code>nums</code> ，返回其中可以组成三角形三条边的三元组个数</p>
<p><strong>思路：</strong></p>
<p>方法一：排序 + 二分查找</p>
<p>方法二：排序 + 双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="189-最大连续1的个数-III-中等"><a href="#189-最大连续1的个数-III-中等" class="headerlink" title="189. 最大连续1的个数 III-中等"></a><font color=DarkOrange>189. 最大连续1的个数 III-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个二进制数组 <code>nums</code> 和一个整数 <code>k</code>，如果可以翻转最多 <code>k</code> 个 <code>0</code> ，则返回数组中连续 <code>1</code> 的最大个数 </p>
<p><strong>思路：</strong></p>
<p>方法一：二分查找</p>
<p>方法二：滑动窗口</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="190-二叉树中和为某一值的路径-中等"><a href="#190-二叉树中和为某一值的路径-中等" class="headerlink" title="190. 二叉树中和为某一值的路径-中等"></a><font color=DarkOrange>190. 二叉树中和为某一值的路径-中等</font></h4><p><strong>题目：</strong></p>
<p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径</p>
<p><strong>叶子节点</strong> 是指没有子节点的节点</p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二：广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="191-在排序数组中查找数字-I-简单"><a href="#191-在排序数组中查找数字-I-简单" class="headerlink" title="191. 在排序数组中查找数字 I-简单"></a><font color=DarkOrange>191. 在排序数组中查找数字 I-简单</font></h4><p><strong>题目：</strong></p>
<p>统计一个数字在排序数组中出现的次数</p>
<p><strong>思路：</strong></p>
<p>二分查找</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="192-分隔链表-中等"><a href="#192-分隔链表-中等" class="headerlink" title="192. 分隔链表-中等"></a><font color=DarkOrange>192. 分隔链表-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个链表的头节点 <code>head</code> 和一个特定值 <code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前</p>
<p>你应当 <strong>保留</strong> 两个分区中每个节点的初始相对位置</p>
<p><strong>思路：</strong></p>
<p>模拟</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="193-24-点游戏-困难"><a href="#193-24-点游戏-困难" class="headerlink" title="193. 24 点游戏-困难"></a><font color=DarkOrange>193. 24 点游戏-困难</font></h4><p><strong>题目：</strong></p>
<p>给定一个长度为4的整数数组 <code>cards</code> 。你有 <code>4</code> 张卡片，每张卡片上都包含一个范围在 <code>[1,9]</code> 的数字。您应该使用运算符 <code>[&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;]</code> 和括号 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 将这些卡片上的数字排列成数学表达式，以获得值24</p>
<p>你须遵守以下规则：</p>
<ul>
<li>除法运算符 <code>&#39;/&#39;</code> 表示实数除法，而不是整数除法<ul>
<li>例如， <code>4 /(1 - 2 / 3)= 4 /(1 / 3)= 12</code></li>
</ul>
</li>
<li>每个运算都在两个数字之间。特别是，不能使用 <code>“-”</code> 作为一元运算符<ul>
<li>例如，如果 <code>cards =[1,1,1,1]</code> ，则表达式 <code>“-1 -1 -1 -1”</code> 是 <strong>不允许</strong> 的</li>
</ul>
</li>
<li>你不能把数字串在一起<ul>
<li>例如，如果 <code>cards =[1,2,1,2]</code> ，则表达式 <code>“12 + 12”</code> 无效</li>
</ul>
</li>
</ul>
<p>如果可以得到这样的表达式，其计算结果为 <code>24</code> ，则返回 <code>true </code>，否则返回 <code>false</code> </p>
<p><strong>思路：</strong></p>
<p>回溯</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="194-二叉树的最小深度-简单"><a href="#194-二叉树的最小深度-简单" class="headerlink" title="194. 二叉树的最小深度-简单"></a><font color=DarkOrange>194. 二叉树的最小深度-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉树，找出其最小深度</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量</p>
<p><strong>说明：</strong>叶子节点是指没有子节点的节点</p>
<p><strong>思路：</strong></p>
<p>方法一：深度优先搜索</p>
<p>方法二：广度优先搜索</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="195-下一个更大元素-III-中等"><a href="#195-下一个更大元素-III-中等" class="headerlink" title="195. 下一个更大元素 III-中等"></a><font color=DarkOrange>195. 下一个更大元素 III-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个正整数 <code>n</code> ，请你找出符合条件的最小整数，其由重新排列 <code>n</code> 中存在的每位数字组成，并且其值大于 <code>n</code> 。如果不存在这样的正整数，则返回 <code>-1</code> </p>
<p><strong>注意</strong> ，返回的整数应当是一个 <strong>32 位整数</strong> ，如果存在满足题意的答案，但不是 <strong>32 位整数</strong> ，同样返回 <code>-1</code> </p>
<p><strong>思路：</strong></p>
<p>方法一：下一个排列</p>
<p>方法二：数学</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="196-通配符匹配-困难"><a href="#196-通配符匹配-困难" class="headerlink" title="196. 通配符匹配-困难"></a><font color=DarkOrange>196. 通配符匹配-困难</font></h4><p><strong>题目：</strong></p>
<p>给定一个字符串 (<code>s</code>) 和一个字符模式 (<code>p</code>) ，实现一个支持 <code>&#39;?&#39;</code> 和 <code>&#39;*&#39;</code> 的通配符匹配</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;?&#x27;</span> 可以匹配任何单个字符。</span><br><span class="line"><span class="string">&#x27;*&#x27;</span> 可以匹配任意字符串（包括空字符串）。</span><br></pre></td></tr></table></figure>

<p>两个字符串<strong>完全匹配</strong>才算匹配成功</p>
<p><strong>说明:</strong></p>
<ul>
<li><code>s</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母</li>
<li><code>p</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母，以及字符 <code>?</code> 和 <code>*</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：贪心算法</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="197-完全平方数-中等"><a href="#197-完全平方数-中等" class="headerlink" title="197. 完全平方数-中等"></a><font color=DarkOrange>197. 完全平方数-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数 <code>n</code> ，返回和为 <code>n</code> 的完全平方数的最少数量</p>
<p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是</p>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>方法二：数学</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="198-解数独-困难"><a href="#198-解数独-困难" class="headerlink" title="198. 解数独-困难"></a><font color=DarkOrange>198. 解数独-困难</font></h4><p><strong>题目：</strong></p>
<p>编写一个程序，通过填充空格来解决数独问题</p>
<p>数独的解法需 <strong>遵循如下规则</strong>：</p>
<ol>
<li>数字 <code>1-9</code> 在每一行只能出现一次</li>
<li>数字 <code>1-9</code> 在每一列只能出现一次</li>
<li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次</li>
</ol>
<p>数独部分空格内已填入了数字，空白格用 <code>&#39;.&#39;</code> 表示</p>
<p><strong>思路：</strong></p>
<p>方法一：回溯</p>
<p>方法二：位运算优化</p>
<p>方法三：枚举优化</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="199-阿拉伯数字转中文数字-中等"><a href="#199-阿拉伯数字转中文数字-中等" class="headerlink" title="199. 阿拉伯数字转中文数字-中等"></a><font color=DarkOrange>199. 阿拉伯数字转中文数字-中等</font></h4><p><strong>题目：</strong><br><strong>思路：</strong><br><strong>代码：</strong></p>
<h4 id="200-反转字符串-简单"><a href="#200-反转字符串-简单" class="headerlink" title="200. 反转字符串-简单"></a><font color=DarkOrange>200. 反转字符串-简单</font></h4><p><strong>题目：</strong></p>
<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出</p>
<p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题</p>
<p><strong>思路：</strong></p>
<p>双指针</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub + Go + Gin创建RESTful风格的项目</title>
    <url>/2022/12/03/GitHub%E5%88%9B%E5%BB%BAGo-Gin-RESTful%E9%A3%8E%E6%A0%BC%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>通过GitHub + Go + Gin创建RESTful风格的项目，搭建一个基础的脚手架</p>
<p>完整项目GitHub地址：<a href="https://github.com/huajun-chen/GinRESTful">点击跳转</a></p>
<h4 id="1-GutHub-New"><a href="#1-GutHub-New" class="headerlink" title="1. GutHub New"></a><font color=DarkOrange>1. GutHub New</font></h4><p>打开GitHub，进入首页，点击<code>New</code>开始创建新项目</p>
<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qkp3xulaj328016g4qp.jpg" alt="image.png"></p>
<h4 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a><font color=DarkOrange>2. 创建项目</font></h4><p>点击<code>New</code>之后，填写项目名、项目描述，填写完项目名之后，后面会显示此项目名是否可用，绿钩为可用，红叉为不可用，其他选项默认即可，然后点击<code>Create repository</code>按钮创建项目</p>
<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qky746qaj3280160ndf.jpg" alt="image.png"></p>
<h4 id="3-创建成功"><a href="#3-创建成功" class="headerlink" title="3. 创建成功"></a><font color=DarkOrange>3. 创建成功</font></h4><p>创建项目成功之后页面会跳转，在此页面复制项目地址</p>
<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8ql0g1krlj328016gauw.jpg" alt="image.png"></p>
<h4 id="4-克隆项目"><a href="#4-克隆项目" class="headerlink" title="4. 克隆项目"></a><font color=DarkOrange>4. 克隆项目</font></h4><p>在本地电脑，进行需要存放项目的目录下，将项目克隆到本地，并且在本地新建<code>dev</code>开发分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 项目地址 // 克隆项目</span><br><span class="line"><span class="built_in">cd</span> 项目名 // 进行项目目录</span><br><span class="line">git checkout -b 分支名 // 新建分支并切换到此分支</span><br></pre></td></tr></table></figure>

<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8ql7fxamdj30ua0v2qlc.jpg" alt="image.png" style="zoom:50%;" /></div>

<h4 id="5-打开项目"><a href="#5-打开项目" class="headerlink" title="5. 打开项目"></a><font color=DarkOrange>5. 打开项目</font></h4><p>使用本地<code>IDE</code>打开项目（这里以<code>Goland IDE</code>演示），在项目里添加<code>GOPROXY</code></p>
<p>路径：<code>Goland</code>-&gt;<code>Preferences...</code>-&gt;<code>Go</code>-&gt;<code>Go Modules</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure>

<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qlextrflj31ik13kwnl.jpg" alt="image.png"></p>
<h4 id="6-创建go-mod"><a href="#6-创建go-mod" class="headerlink" title="6. 创建go mod"></a><font color=DarkOrange>6. 创建go mod</font></h4><p>在编译器里，打开终端，在终端通过命令的方式创建<code>go mod</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go mod init 项目名</span><br></pre></td></tr></table></figure>

<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qlkroqh3j32801cgn9j.jpg" alt="image.png"></p>
<h4 id="7-安装Gin"><a href="#7-安装Gin" class="headerlink" title="7. 安装Gin"></a><font color=DarkOrange>7. 安装Gin</font></h4><p>在终端通过命令的方式下载并安装<code>Gin</code>包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure>

<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qlpgvihqj32801cg1kx.jpg" alt="image.png"></p>
<h4 id="8-main程序"><a href="#8-main程序" class="headerlink" title="8. main程序"></a><font color=DarkOrange>8. main程序</font></h4><p>新建<code>main.go</code>文件，在<code>main</code>文件里编写第一个<code>Gin</code>示例</p>
<p>在<code>main</code>文件所在的目录下执行<code>go run main.go</code>运行<code>main</code>函数</p>
<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qly589jgj32801ce1f4.jpg" alt="image.png"></p>
<h4 id="9-浏览器访问"><a href="#9-浏览器访问" class="headerlink" title="9. 浏览器访问"></a><font color=DarkOrange>9. 浏览器访问</font></h4><p>在浏览器通过访问<code>localhost:8080/ping</code>或<code>127.0.0.1:8080/ping</code>的方式访问服务</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qlxcsj7bj30pc09040d.jpg" alt="image.png" style="zoom:67%;" /></div>

<h4 id="10-添加文件"><a href="#10-添加文件" class="headerlink" title="10. 添加文件"></a><font color=DarkOrange>10. 添加文件</font></h4><p>在项目里添加<code>.gitignore</code>和<code>README.md</code>文件</p>
<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qm74jjgtj31880sw791.jpg" alt="image.png"></p>
<h4 id="11-提交代码"><a href="#11-提交代码" class="headerlink" title="11. 提交代码"></a><font color=DarkOrange>11. 提交代码</font></h4><p>编写代码之后，在本地进行代码提交</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add 文件名</span><br><span class="line">git commit -m <span class="string">&quot;本次提交描述&quot;</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>

<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qmdi8artj32801cih82.jpg" alt="image.png"></p>
<h4 id="12-合并代码"><a href="#12-合并代码" class="headerlink" title="12. 合并代码"></a><font color=DarkOrange>12. 合并代码</font></h4><p>代码从本地提交到远程仓库之后，需要在远程仓库对代码进行合并</p>
<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qn4b53z1j328016gdy4.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qn5bc2u0j328016g7ma.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8qn67pkhaj328016i1ew.jpg" alt="image.png"></p>
<p>此项目会继续更新，敬请期待…</p>
<hr>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker、k8s面试题</title>
    <url>/2022/11/24/Docker%E3%80%81k8s%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>参考链接：<a href="https://dockone.io/article/2434304">点击跳转</a></p>
<p>阿里云开发者社区链接：<a href="https://developer.aliyun.com/article/873550">点击跳转</a></p>
<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-设计模式</title>
    <url>/2022/11/24/Go-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>设计模式是软件工程中各种常见问题的经典解决方案，设计模式不只是代码，而是组织代码的方式。假设一行行的代码是砖，设计模式就是蓝图</p>
<table>
<thead>
<tr>
<th><div style="width: 32pt">类型</div></th>
<th><div style="width: 63pt">设计模式</div></th>
<th>简述</th>
<th><div style="width: 25pt">常用</div></th>
</tr>
</thead>
<tbody><tr>
<td>创建型</td>
<td>工厂模式</td>
<td>定义一个创建对象的接口，让其子类自己决定范例化哪一个工厂类，是最常用的设计模式之一</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>抽象工厂模式</td>
<td>为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>建造者模式</td>
<td>将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>原型模式</td>
<td>用一个已经创建的范例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象</td>
<td><font color=Red>no</font></td>
</tr>
<tr>
<td></td>
<td>单例模式</td>
<td>保证一个类仅有一个范例，并提供一个访问它的全局访问点单例模式只涉及到一个类，该类负责创建自己的对象，而且确保只有单个对象被创建</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td>结构型</td>
<td>适配器模式</td>
<td>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>桥接模式</td>
<td>将抽象与实现分离，使两者可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>组合模式</td>
<td><strong>对象树模式&#x2F;整体-部分模式</strong>。将对象组合成树状的层次结构的模式，用来表示“整体-部分”的关系，使用户对单个对象和组合对象具有一致的访问性</td>
<td><font color=Red>no</font></td>
</tr>
<tr>
<td></td>
<td>装饰器模式</td>
<td>动态地给一个对象添加一些额外的职责。允许向一个现有的对象添加新的功能，同时又不改变其结构</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>外观模式</td>
<td>又称为门面模式，它为子系统中的接口提供一个一致的接口，来隐藏子系统内部的复杂性，使得子系统更加容易使用</td>
<td><font color=Red>no</font></td>
</tr>
<tr>
<td></td>
<td>享元模式</td>
<td>运用共享技术有效地支持大量细粒度的对象，减少对象的创建数量，以节省内存占用和提高性能</td>
<td><font color=Red>no</font></td>
</tr>
<tr>
<td></td>
<td>代理模式</td>
<td>由于某些原因需要为某对象提供一种代理以控制对该对象的访问当访问对象不适合或者不能直接引用目标对象的时候，可以通过代理对象作为访问对象和目标对象之间的中介</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td>行为型</td>
<td>责任链模式</td>
<td>为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>命令模式</td>
<td>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作</td>
<td><font color=Red>no</font></td>
</tr>
<tr>
<td></td>
<td>迭代器模式</td>
<td>提供了一种方法顺序访问一个聚合对象中的所有元素，而又不暴露该聚合对象的内部表示用于顺序访问集合对象的元素，调用者无需知道集合对象的底层表示，从而实现调用者和聚合对象的解耦</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>中介者模式</td>
<td>用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护</td>
<td><font color=Red>no</font></td>
</tr>
<tr>
<td></td>
<td>备忘录模式</td>
<td>保存一个对象的某个状态，以便在适当的时候恢复对象</td>
<td><font color=Red>no</font></td>
</tr>
<tr>
<td></td>
<td>观察者模式</td>
<td>定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>状态模式</td>
<td>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>策略模式</td>
<td>通过定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>模板方法模式</td>
<td>定义一个操作中的算法骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构,即可重定义该算法的某些特定步骤</td>
<td><font color=Forestgreen>yes</font></td>
</tr>
<tr>
<td></td>
<td>访问者模式</td>
<td>将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。它将对数据的操作与数据结构进行分离，是行为类模式中最复杂的一种模式</td>
<td><font color=Red>no</font></td>
</tr>
</tbody></table>
<h4 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1. 工厂模式"></a><font color=DarkOrange>1. 工厂模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="2-抽象工厂模式"><a href="#2-抽象工厂模式" class="headerlink" title="2. 抽象工厂模式"></a><font color=DarkOrange>2. 抽象工厂模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="3-建造者模式"><a href="#3-建造者模式" class="headerlink" title="3. 建造者模式"></a><font color=DarkOrange>3. 建造者模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="4-原型模式"><a href="#4-原型模式" class="headerlink" title="4. 原型模式"></a><font color=DarkOrange>4. 原型模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="5-单例模式"><a href="#5-单例模式" class="headerlink" title="5. 单例模式"></a><font color=DarkOrange>5. 单例模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="6-适配器模式"><a href="#6-适配器模式" class="headerlink" title="6. 适配器模式"></a><font color=DarkOrange>6. 适配器模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="7-桥接模式"><a href="#7-桥接模式" class="headerlink" title="7. 桥接模式"></a><font color=DarkOrange>7. 桥接模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="8-组合模式"><a href="#8-组合模式" class="headerlink" title="8. 组合模式"></a><font color=DarkOrange>8. 组合模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="9-装饰器模式"><a href="#9-装饰器模式" class="headerlink" title="9. 装饰器模式"></a><font color=DarkOrange>9. 装饰器模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="10-外观模式"><a href="#10-外观模式" class="headerlink" title="10. 外观模式"></a><font color=DarkOrange>10. 外观模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="11-享元模式"><a href="#11-享元模式" class="headerlink" title="11. 享元模式"></a><font color=DarkOrange>11. 享元模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="12-代理模式"><a href="#12-代理模式" class="headerlink" title="12. 代理模式"></a><font color=DarkOrange>12. 代理模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="13-责任链模式"><a href="#13-责任链模式" class="headerlink" title="13. 责任链模式"></a><font color=DarkOrange>13. 责任链模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="14-命令模式"><a href="#14-命令模式" class="headerlink" title="14. 命令模式"></a><font color=DarkOrange>14. 命令模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="15-迭代器模式"><a href="#15-迭代器模式" class="headerlink" title="15. 迭代器模式"></a><font color=DarkOrange>15. 迭代器模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="16-中介者模式"><a href="#16-中介者模式" class="headerlink" title="16. 中介者模式"></a><font color=DarkOrange>16. 中介者模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="17-备忘录模式"><a href="#17-备忘录模式" class="headerlink" title="17. 备忘录模式"></a><font color=DarkOrange>17. 备忘录模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="18-观察者模式"><a href="#18-观察者模式" class="headerlink" title="18. 观察者模式"></a><font color=DarkOrange>18. 观察者模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="19-状态模式"><a href="#19-状态模式" class="headerlink" title="19. 状态模式"></a><font color=DarkOrange>19. 状态模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="20-策略模式"><a href="#20-策略模式" class="headerlink" title="20. 策略模式"></a><font color=DarkOrange>20. 策略模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="21-模板方法模式"><a href="#21-模板方法模式" class="headerlink" title="21. 模板方法模式"></a><font color=DarkOrange>21. 模板方法模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="22-访问者模式"><a href="#22-访问者模式" class="headerlink" title="22. 访问者模式"></a><font color=DarkOrange>22. 访问者模式</font></h4><p><strong>问题</strong></p>
<p><strong>解决</strong></p>
<h4 id="23-设计模式的“道”"><a href="#23-设计模式的“道”" class="headerlink" title="23. 设计模式的“道”"></a><font color=DarkOrange>23. 设计模式的“道”</font></h4><p>设计模式分为“术”的部分和“道”的部分，上面那些设计模式就是“术”的部分，他们是一些围绕着设计模式核心思路的经典解决方案。换句话说，重要的是理解为什么要用那些设计模式，具体问题，具体分析，而不是把某种设计模式生搬硬套进代码</p>
<p>设计模式有6大原则，以上的设计模式目的就是为了使软件系统能达到这些原则：</p>
<ul>
<li>开闭原则<ul>
<li>软件应该对扩展开放，对修改关闭</li>
<li>对系统进行扩展，而无需修改现有的代码。这可以降低软件的维护成本，同时也增加可扩展性</li>
</ul>
</li>
<li>里氏替换原则<ul>
<li>任何基类可以出现的地方，子类一定可以出现</li>
<li>里氏替换原则是对开闭原则的补充，实现开闭原则的关键步骤就是抽象化，基类与子类的关系就是要尽可能的抽象化</li>
</ul>
</li>
<li>依赖倒置原则<ul>
<li>面向接口编程，抽象不应该依赖于具体类，具体类应当依赖于抽象</li>
<li>这是为了减少类间的耦合，使系统更适宜于扩展，也更便于维护</li>
</ul>
</li>
<li>单一职责原则<ul>
<li>一个类应该只有一个发生变化的原因</li>
<li>一个类承载的越多，耦合度就越高。如果类的职责单一，就可以降低出错的风险，也可以提高代码的可读性</li>
</ul>
</li>
<li>最少知道原则<ul>
<li>一个实体应当尽量少地与其他实体之间发生相互作用</li>
<li>还是为了降低耦合，一个类与其他类的关联越少，越易于扩展</li>
</ul>
</li>
<li>接口分离原则<ul>
<li>使用多个专门的接口，而不使用高耦合的单一接口</li>
<li>避免同一个接口占用过多的职责，更明确的划分，可以降低耦合。高耦合会导致程序不易扩展，提高出错的风险</li>
</ul>
</li>
</ul>
<hr>
<p>编程宝库链接：<a href="http://www.codebaoku.com/design-pattern/design-pattern-index.html">点击跳转</a></p>
<p>掘金链接：<a href="https://juejin.cn/post/7095581880200167432">点击跳转</a></p>
<p>华为云链接：<a href="https://bbs.huaweicloud.com/blogs/279505">点击跳转</a></p>
<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka面试题</title>
    <url>/2022/10/30/Kafka%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>Kafka面试题</p>
<h4 id="1-Kafka都有哪些特点"><a href="#1-Kafka都有哪些特点" class="headerlink" title="1. Kafka都有哪些特点"></a><font color=DarkOrange>1. Kafka都有哪些特点</font></h4><ul>
<li>高吞吐量、低延迟：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分多个partition, consumer group 对partition进行consume操作</li>
<li>可扩展性：kafka集群支持热扩展</li>
<li>持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</li>
<li>容错性：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）</li>
<li>高并发：支持数千个客户端同时读写</li>
</ul>
<h4 id="2-请简述下你在哪些场景下会选择Kafka"><a href="#2-请简述下你在哪些场景下会选择Kafka" class="headerlink" title="2. 请简述下你在哪些场景下会选择Kafka"></a><font color=DarkOrange>2. 请简述下你在哪些场景下会选择Kafka</font></h4><ul>
<li>日志收集：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、HBase、Solr等</li>
<li>消息系统：解耦和生产者和消费者、缓存消息等</li>
<li>用户活动跟踪：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘</li>
<li>运营指标：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告</li>
<li>流式处理：比如spark streaming和 Flink</li>
</ul>
<h4 id="3-Kafka的设计架构你知道吗"><a href="#3-Kafka的设计架构你知道吗" class="headerlink" title="3. Kafka的设计架构你知道吗"></a><font color=DarkOrange>3. Kafka的设计架构你知道吗</font></h4><p>Kafka架构分为以下几个部分：</p>
<ul>
<li>Producer ：消息生产者，就是向 kafka broker 发消息的客户端</li>
<li>Consumer ：消息消费者，向 kafka broker 取消息的客户端</li>
<li>Topic ：可以理解为一个队列，一个 Topic 又分为一个或多个分区</li>
<li>Consumer Group：这是 kafka 用来实现一个 topic 消息的广播（发给所有的 consumer）和单播（发给任意一个 consumer）的手段。一个 topic 可以有多个 Consumer Group</li>
<li>Broker ：一台 kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic</li>
<li>Partition：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker上，每个 partition 是一个有序的队列。partition 中的每条消息都会被分配一个有序的id（offset）。将消息发给 consumer，kafka 只保证按一个 partition 中的消息的顺序，不保证一个 topic 的整体（多个 partition 间）的顺序</li>
<li>Offset：kafka 的存储文件都是按照 offset.kafka 来命名，用 offset 做名字的好处是方便查找。例如你想找位于 2049 的位置，只要找到 2048.kafka 的文件即可。当然 the first offset 就是 00000000000.kafka</li>
</ul>
<h4 id="4-Kafka分区的目的"><a href="#4-Kafka分区的目的" class="headerlink" title="4. Kafka分区的目的"></a><font color=DarkOrange>4. Kafka分区的目的</font></h4><p>分区对于 Kafka 集群的好处是：实现负载均衡。分区对于消费者来说，可以提高并发度，提高效率</p>
<h4 id="5-你知道Kafka是如何做到消息的有序性"><a href="#5-你知道Kafka是如何做到消息的有序性" class="headerlink" title="5. 你知道Kafka是如何做到消息的有序性"></a><font color=DarkOrange>5. 你知道Kafka是如何做到消息的有序性</font></h4><p>kafka 中的每个 partition 中的消息在写入时都是有序的，而且单独一个 partition 只能由一个消费者去消费，可以在里面保证消息的顺序性。但是分区之间的消息是不保证有序的</p>
<h4 id="6-Kafka的高可靠性是怎么实现的"><a href="#6-Kafka的高可靠性是怎么实现的" class="headerlink" title="6. Kafka的高可靠性是怎么实现的"></a><font color=DarkOrange>6. Kafka的高可靠性是怎么实现的</font></h4><p>参考：Kafka 是如何保证数据可靠性和一致性</p>
<h4 id="7-请谈一谈Kafka数据一致性原理"><a href="#7-请谈一谈Kafka数据一致性原理" class="headerlink" title="7. 请谈一谈Kafka数据一致性原理"></a><font color=DarkOrange>7. 请谈一谈Kafka数据一致性原理</font></h4><h4 id="8-ISR、OSR、AR-是什么"><a href="#8-ISR、OSR、AR-是什么" class="headerlink" title="8. ISR、OSR、AR 是什么"></a><font color=DarkOrange>8. ISR、OSR、AR 是什么</font></h4><ul>
<li>SR：In-Sync Replicas 副本同步队列</li>
<li>OSR：Out-of-Sync Replicas</li>
<li>AR：Assigned Replicas 所有副本</li>
</ul>
<p>ISR是由leader维护，follower从leader同步数据有一些延迟，超过相应的阈值会把 follower 剔除出 ISR, 存入OSR（Out-of-Sync Replicas ）列表，新加入的follower也会先存放在OSR中。AR&#x3D;ISR+OSR</p>
<h4 id="9-LEO、HW、LSO、LW等分别代表什么"><a href="#9-LEO、HW、LSO、LW等分别代表什么" class="headerlink" title="9. LEO、HW、LSO、LW等分别代表什么"></a><font color=DarkOrange>9. LEO、HW、LSO、LW等分别代表什么</font></h4><ul>
<li>LEO：是 LogEndOffset 的简称，代表当前日志文件中下一条</li>
<li>HW：水位或水印（watermark）一词，也可称为高水位(high watermark)，通常被用在流式处理领域（比如Apache Flink、Apache Spark等），以表征元素或事件在基于时间层面上的进度。在Kafka中，水位的概念反而与时间无关，而是与位置信息相关。严格来说，它表示的就是位置信息，即位移（offset）。取 partition 对应的 ISR中 最小的 LEO 作为 HW，consumer 最多只能消费到 HW 所在的位置上一条信息</li>
<li>LSO：是 LastStableOffset 的简称，对未完成的事务而言，LSO 的值等于事务中第一条消息的位置(firstUnstableOffset)，对已完成的事务而言，它的值同 HW 相同</li>
<li>LW：Low Watermark 低水位, 代表 AR 集合中最小的 logStartOffset 值</li>
</ul>
<h4 id="10-Kafka在什么情况下会出现消息丢失"><a href="#10-Kafka在什么情况下会出现消息丢失" class="headerlink" title="10. Kafka在什么情况下会出现消息丢失"></a><font color=DarkOrange>10. Kafka在什么情况下会出现消息丢失</font></h4><p>参考：Kafka 是如何保证数据可靠性和一致性</p>
<h4 id="11-怎么尽可能保证Kafka的可靠性"><a href="#11-怎么尽可能保证Kafka的可靠性" class="headerlink" title="11. 怎么尽可能保证Kafka的可靠性"></a><font color=DarkOrange>11. 怎么尽可能保证Kafka的可靠性</font></h4><p>参考：Kafka 是如何保证数据可靠性和一致性</p>
<h4 id="12-消费者和消费者组有什么关系"><a href="#12-消费者和消费者组有什么关系" class="headerlink" title="12. 消费者和消费者组有什么关系"></a><font color=DarkOrange>12. 消费者和消费者组有什么关系</font></h4><h4 id="13-Kafka的每个分区只能被一个消费者线程，如何做到多个线程同时消费一个分区"><a href="#13-Kafka的每个分区只能被一个消费者线程，如何做到多个线程同时消费一个分区" class="headerlink" title="13. Kafka的每个分区只能被一个消费者线程，如何做到多个线程同时消费一个分区"></a><font color=DarkOrange>13. Kafka的每个分区只能被一个消费者线程，如何做到多个线程同时消费一个分区</font></h4><h4 id="14-数据传输的事务有几种"><a href="#14-数据传输的事务有几种" class="headerlink" title="14. 数据传输的事务有几种"></a><font color=DarkOrange>14. 数据传输的事务有几种</font></h4><p>数据传输的事务定义通常有以下三种级别：</p>
<ul>
<li>最多一次：消息不会被重复发送，最多被传输一次，但也有可能一次不传输</li>
<li>最少一次：消息不会被漏发送，最少被传输一次，但也有可能被重复传输</li>
<li>精确的一次（Exactly once）：不会漏传输也不会重复传输，每个消息都传输被</li>
</ul>
<h4 id="15-Kafka消费者是否可以消费指定分区消息"><a href="#15-Kafka消费者是否可以消费指定分区消息" class="headerlink" title="15. Kafka消费者是否可以消费指定分区消息"></a><font color=DarkOrange>15. Kafka消费者是否可以消费指定分区消息</font></h4><p>Kafa consumer消费消息时，向broker发出fetch请求去消费特定分区的消息，consumer指定消息在日志中的偏移量（offset），就可以消费从这个位置开始的消息，customer拥有了offset的控制权，可以向后回滚去重新消费之前的消息，这是很有意义的</p>
<h4 id="16-Kafka消息是采用Pull模式，还是Push模式"><a href="#16-Kafka消息是采用Pull模式，还是Push模式" class="headerlink" title="16. Kafka消息是采用Pull模式，还是Push模式"></a><font color=DarkOrange>16. Kafka消息是采用Pull模式，还是Push模式</font></h4><p>Kafka最初考虑的问题是，customer应该从brokes拉取消息还是brokers将消息推送到consumer，也就是pull还push。在这方面，Kafka遵循了一种大部分消息系统共同的传统的设计：producer将消息推送到broker，consumer从broker拉取消息</p>
<p>一些消息系统比如Scribe和Apache Flume采用了push模式，将消息推送到下游的consumer。这样做有好处也有坏处：由broker决定消息推送的速率，对于不同消费速率的consumer就不太好处理了。消息系统都致力于让consumer以最大的速率最快速的消费消息，但不幸的是，push模式下，当broker推送的速率远大于consumer消费的速率时，consumer恐怕就要崩溃了。最终Kafka还是选取了传统的pull模式</p>
<p>Pull模式的另外一个好处是consumer可以自主决定是否批量的从broker拉取数据。Push模式必须在不知道下游consumer消费能力和消费策略的情况下决定是立即推送每条消息还是缓存之后批量推送。如果为了避免consumer崩溃而采用较低的推送速率，将可能导致一次只推送较少的消息而造成浪费。Pull模式下，consumer就可以根据自己的消费能力去决定这些策略</p>
<p>Pull有个缺点是，如果broker没有可供消费的消息，将导致consumer不断在循环中轮询，直到新消息到t达。为了避免这点，Kafka有个参数可以让consumer阻塞知道新消息到达(当然也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发</p>
<h4 id="17-Kafka-消息格式的演变清楚吗"><a href="#17-Kafka-消息格式的演变清楚吗" class="headerlink" title="17. Kafka 消息格式的演变清楚吗"></a><font color=DarkOrange>17. Kafka 消息格式的演变清楚吗</font></h4><h4 id="18-Kafka-偏移量的演变清楚吗"><a href="#18-Kafka-偏移量的演变清楚吗" class="headerlink" title="18. Kafka 偏移量的演变清楚吗"></a><font color=DarkOrange>18. Kafka 偏移量的演变清楚吗</font></h4><h4 id="19-Kafka高效文件存储设计特点"><a href="#19-Kafka高效文件存储设计特点" class="headerlink" title="19. Kafka高效文件存储设计特点"></a><font color=DarkOrange>19. Kafka高效文件存储设计特点</font></h4><ul>
<li>Kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用</li>
<li>通过索引信息可以快速定位message和确定response的最大大小</li>
<li>通过index元数据全部映射到memory，可以避免segment file的IO磁盘操作</li>
<li>通过索引文件稀疏存储，可以大幅降低index文件元数据占用空间大小</li>
</ul>
<h4 id="20-Kafka创建Topic时如何将分区放置到不同的Broker中"><a href="#20-Kafka创建Topic时如何将分区放置到不同的Broker中" class="headerlink" title="20. Kafka创建Topic时如何将分区放置到不同的Broker中"></a><font color=DarkOrange>20. Kafka创建Topic时如何将分区放置到不同的Broker中</font></h4><h4 id="21-Kafka新建的分区会在哪个目录下创建"><a href="#21-Kafka新建的分区会在哪个目录下创建" class="headerlink" title="21. Kafka新建的分区会在哪个目录下创建"></a><font color=DarkOrange>21. Kafka新建的分区会在哪个目录下创建</font></h4><h4 id="22-谈一谈Kafka的再均衡"><a href="#22-谈一谈Kafka的再均衡" class="headerlink" title="22. 谈一谈Kafka的再均衡"></a><font color=DarkOrange>22. 谈一谈Kafka的再均衡</font></h4><p>在Kafka中，当有新消费者加入或者订阅的topic数发生变化时，会触发Rebalance(再均衡：在同一个消费者组当中，分区的所有权从一个消费者转移到另外一个消费者)机制，Rebalance顾名思义就是重新均衡消费者消费。Rebalance的过程如下：</p>
<ul>
<li>第一步：所有成员都向coordinator发送请求，请求入组。一旦所有成员都发送了请求，coordinator会从中选择一个consumer担任leader的角色，并把组成员信息以及订阅信息发给leader</li>
<li>第二步：leader开始分配消费方案，指明具体哪个consumer负责消费哪些topic的哪些partition。一旦完成分配，leader会将这个方案发给coordinator。coordinator接收到分配方案之后会把方案发给各个consumer，这样组内的所有成员就都知道自己应该消费哪些分区了</li>
</ul>
<p>所以对于Rebalance来说，Coordinator起着至关重要的作用</p>
<h4 id="23-谈谈Kafka分区分配策略"><a href="#23-谈谈Kafka分区分配策略" class="headerlink" title="23. 谈谈Kafka分区分配策略"></a><font color=DarkOrange>23. 谈谈Kafka分区分配策略</font></h4><h4 id="24-Kafka-Producer是如何动态感知主题分区数变化的"><a href="#24-Kafka-Producer是如何动态感知主题分区数变化的" class="headerlink" title="24. Kafka Producer是如何动态感知主题分区数变化的"></a><font color=DarkOrange>24. Kafka Producer是如何动态感知主题分区数变化的</font></h4><h4 id="25-Kafka是如何实现高吞吐率的"><a href="#25-Kafka是如何实现高吞吐率的" class="headerlink" title="25. Kafka是如何实现高吞吐率的"></a><font color=DarkOrange>25. Kafka是如何实现高吞吐率的</font></h4><p>Kafka是分布式消息系统，需要处理海量的消息，Kafka的设计是把所有的消息都写入速度低容量大的硬盘，以此来换取更强的存储能力，但实际上，使用硬盘并没有带来过多的性能损失。kafka主要使用了以下几个方式实现了超高的吞吐率：</p>
<ul>
<li>顺序读写</li>
<li>零拷贝</li>
<li>文件分段</li>
<li>批量发送</li>
<li>数据压缩</li>
</ul>
<h4 id="26-Kafka监控都有哪些"><a href="#26-Kafka监控都有哪些" class="headerlink" title="26. Kafka监控都有哪些"></a><font color=DarkOrange>26. Kafka监控都有哪些</font></h4><h4 id="27-如何为Kafka集群选择合适的Topics-x2F-Partitions数量"><a href="#27-如何为Kafka集群选择合适的Topics-x2F-Partitions数量" class="headerlink" title="27. 如何为Kafka集群选择合适的Topics&#x2F;Partitions数量"></a><font color=DarkOrange>27. 如何为Kafka集群选择合适的Topics&#x2F;Partitions数量</font></h4><h4 id="28-谈谈你对Kafka事务的了解"><a href="#28-谈谈你对Kafka事务的了解" class="headerlink" title="28. 谈谈你对Kafka事务的了解"></a><font color=DarkOrange>28. 谈谈你对Kafka事务的了解</font></h4><h4 id="29-谈谈你对Kafka幂等的了解"><a href="#29-谈谈你对Kafka幂等的了解" class="headerlink" title="29. 谈谈你对Kafka幂等的了解"></a><font color=DarkOrange>29. 谈谈你对Kafka幂等的了解</font></h4><h4 id="30-Kafka缺点"><a href="#30-Kafka缺点" class="headerlink" title="30. Kafka缺点"></a><font color=DarkOrange>30. Kafka缺点</font></h4><ul>
<li>由于是批量发送，数据并非真正的实时</li>
<li>对于mqtt协议不支持</li>
<li>不支持物联网传感数据直接接入</li>
<li>仅支持统一分区内消息有序，无法实现全局消息有序</li>
<li>监控不完善，需要安装插件</li>
<li>依赖zookeeper进行元数据管理</li>
</ul>
<h4 id="31-Kafka新旧消费者的区别"><a href="#31-Kafka新旧消费者的区别" class="headerlink" title="31. Kafka新旧消费者的区别"></a><font color=DarkOrange>31. Kafka新旧消费者的区别</font></h4><p>旧的 Kafka 消费者 API 主要包括：SimpleConsumer（简单消费者） 和 ZookeeperConsumerConnectir（高级消费者）。SimpleConsumer 名字看起来是简单消费者，但是其实用起来很不简单，可以使用它从特定的分区和偏移量开始读取消息。高级消费者和现在新的消费者有点像，有消费者群组，有分区再均衡，不过它使用 ZK 来管理消费者群组，并不具备偏移量和再均衡的可操控性</p>
<h4 id="32-Kafka分区数可以增加或减少吗？为什么"><a href="#32-Kafka分区数可以增加或减少吗？为什么" class="headerlink" title="32. Kafka分区数可以增加或减少吗？为什么"></a><font color=DarkOrange>32. Kafka分区数可以增加或减少吗？为什么</font></h4><p>我们可以使用 bin&#x2F;kafka-topics.sh 命令对 Kafka 增加 Kafka 的分区数据，但是 Kafka 不支持减少分区数</p>
<p>Kafka 分区数据不支持减少是由很多原因的，比如减少的分区其数据放到哪里去？是删除，还是保留？删除的话，那么这些没消费的消息不就丢了。如果保留这些消息如何放到其他分区里面？追加到其他分区后面的话那么就破坏了 Kafka 单个分区的有序性。如果要保证删除分区数据插入到其他分区保证有序性，那么实现起来逻辑就会非常复杂</p>
<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作系统面试题</title>
    <url>/2022/10/28/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>Linux常见面试题整理</p>
<hr>
<p><strong>50个最常用的Unix&#x2F;Linux命令</strong></p>
<h4 id="1-tar"><a href="#1-tar" class="headerlink" title="1. tar"></a><font color=DarkOrange>1. tar</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar cvf archive_name.tar <span class="built_in">dirname</span>/ 创建一个新的tar文件</span><br><span class="line">tar xvf archive_name.tar 解压tar文件</span><br><span class="line">tar tvf archive_name.tar 查看tar文件</span><br></pre></td></tr></table></figure>

<h4 id="2-grep"><a href="#2-grep" class="headerlink" title="2. grep"></a><font color=DarkOrange>2. grep</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep -i <span class="string">&quot;the&quot;</span> demo_file 在文件中查找字符串(不区分大小写)</span><br><span class="line">grep -A 3 -i <span class="string">&quot;example&quot;</span> demo_text 输出成功匹配的行，以及该行之后的三行</span><br><span class="line">grep -r <span class="string">&quot;ramesh&quot;</span> * 在一个文件夹中递归查询包含指定字符串的文件</span><br></pre></td></tr></table></figure>

<h4 id="3-find"><a href="#3-find" class="headerlink" title="3. find"></a><font color=DarkOrange>3. find</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find -iname <span class="string">&quot;MyProgram.c&quot;</span> 查找指定文件名的文件(不区分大小写)</span><br><span class="line">find -iname <span class="string">&quot;MyProgram.c&quot;</span> -<span class="built_in">exec</span> <span class="built_in">md5sum</span> &#123;&#125; \; 对找到的文件执行某个命令</span><br><span class="line">find ~ -empty 查找home目录下的所有空文件</span><br></pre></td></tr></table></figure>

<h4 id="4-ssh"><a href="#4-ssh" class="headerlink" title="4. ssh"></a><font color=DarkOrange>4. ssh</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -l jsmith remotehost.example.com 登录到远程主机</span><br><span class="line">ssh -v -l jsmith remotehost.example.com 调试ssh客户端</span><br><span class="line">ssh -V 显示ssh客户端版本</span><br></pre></td></tr></table></figure>

<h4 id="5-sed"><a href="#5-sed" class="headerlink" title="5. sed"></a><font color=DarkOrange>5. sed</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/.$//&#x27;</span> filename 当你将Dos系统中的文件复制到Unix/Linux后，这个文件每行都会以\r\n结尾，sed可以轻易将其转换为Unix格式的文件，使用\n结尾的文件</span><br><span class="line">sed -n <span class="string">&#x27;1!G; h; p&#x27;</span> filename 反转文件内容并输出</span><br><span class="line">sed <span class="string">&#x27;/./=&#x27;</span> thegeekstuff.txt | sed <span class="string">&#x27;N; s/\n/ /&#x27;</span> 为非空行添加行号</span><br></pre></td></tr></table></figure>

<h4 id="6-awk"><a href="#6-awk" class="headerlink" title="6. awk"></a><font color=DarkOrange>6. awk</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;!($0 in array) &#123; array[$0]; print&#125;&#x27;</span> temp 删除重复行</span><br><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;$3=$4&#x27;</span> /etc/passwd 打印/etc/passwd中所有包含同样的uid和gid的行</span><br><span class="line">awk <span class="string">&#x27;&#123;print $2,$5;&#125;&#x27;</span> employee.txt 打印文件中的指定部分的字段</span><br></pre></td></tr></table></figure>

<h4 id="7-vim"><a href="#7-vim" class="headerlink" title="7. vim"></a><font color=DarkOrange>7. vim</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim +10 filename.txt 打开文件并跳到第10行</span><br><span class="line">vim +/search-term filename.txt 打开文件跳到第一个匹配的行</span><br><span class="line">vim -R /etc/passwd 以只读模式打开文件</span><br></pre></td></tr></table></figure>

<h4 id="8-diff"><a href="#8-diff" class="headerlink" title="8. diff"></a><font color=DarkOrange>8. diff</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">diff -w name_list.txt name_list_new.txt 比较的时候忽略空白符</span><br></pre></td></tr></table></figure>

<h4 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort"></a><font color=DarkOrange>9. sort</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> names.txt 以升序对文件内容排序</span><br><span class="line"><span class="built_in">sort</span> -r names.txt 以降序对文件内容排序</span><br><span class="line"><span class="built_in">sort</span> -t: -k 3n /etc/passwd | more 以第三个字段对/etc/passwd的内容排序</span><br></pre></td></tr></table></figure>

<h4 id="10-export"><a href="#10-export" class="headerlink" title="10. export"></a><font color=DarkOrange>10. export</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> | grep ORCALE 输出跟字符串oracle匹配的环境变量</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=/u01/app/oracle/product/10.2.0 设置全局环境变量</span><br></pre></td></tr></table></figure>

<h4 id="11-xargs"><a href="#11-xargs" class="headerlink" title="11. xargs"></a><font color=DarkOrange>11. xargs</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> *.jpg | xargs -n1 -i <span class="built_in">cp</span> &#123;&#125; /external-hard-drive/directory 将所有图片文件拷贝到外部驱动器</span><br><span class="line">find / -name *.jpg -<span class="built_in">type</span> f -<span class="built_in">print</span> | xargs tar -cvzf images.tar.gz 将系统中所有jpd文件压缩打包</span><br><span class="line"><span class="built_in">cat</span> url-list.txt | xargs wget –c 下载文件中列出的所有url对应的页面</span><br></pre></td></tr></table></figure>

<h4 id="12-ls"><a href="#12-ls" class="headerlink" title="12. ls"></a><font color=DarkOrange>12. ls</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lh 以易读的方式显示文件大小(显示为MB,GB...)</span><br><span class="line"><span class="built_in">ls</span> -ltr 以最后修改时间升序列出文件</span><br><span class="line"><span class="built_in">ls</span> -F 在文件名后面显示文件类型</span><br></pre></td></tr></table></figure>

<h4 id="13-pwd"><a href="#13-pwd" class="headerlink" title="13. pwd"></a><font color=DarkOrange>13. pwd</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">输出当前工作目录</span><br></pre></td></tr></table></figure>

<h4 id="14-cd"><a href="#14-cd" class="headerlink" title="14. cd"></a><font color=DarkOrange>14. cd</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 可以在最近工作的两个目录间切换</span><br><span class="line"><span class="built_in">cd</span> ../ 跳到上级目录</span><br><span class="line"><span class="built_in">cd</span> /opt 不管现在到那直接跳到指定的opt文件夹中</span><br><span class="line"><span class="built_in">cd</span> ~ 切换当前用户的家目录。root用户的家目录就是root目录</span><br></pre></td></tr></table></figure>

<h4 id="15-gzip"><a href="#15-gzip" class="headerlink" title="15. gzip"></a><font color=DarkOrange>15. gzip</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gzip test.txt 创建一个*.gz的压缩文件</span><br><span class="line">gzip -d test.txt.gz 解压*.gz文件</span><br><span class="line">gzip -l *.gz 显示压缩的比率</span><br></pre></td></tr></table></figure>

<h4 id="16-bzip2"><a href="#16-bzip2" class="headerlink" title="16. bzip2"></a><font color=DarkOrange>16. bzip2</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bzip2 test.txt 创建*.bz2压缩文件</span><br><span class="line">bzip2 -d test.txt.bz2 解压*.bz2文件</span><br></pre></td></tr></table></figure>

<h4 id="17-uzip"><a href="#17-uzip" class="headerlink" title="17. uzip"></a><font color=DarkOrange>17. uzip</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">unzip test.zip 解压*.zip文件</span><br><span class="line">unzip -l jasper.zip 查看*.zip文件的内容</span><br></pre></td></tr></table></figure>

<h4 id="18-shutdown"><a href="#18-shutdown" class="headerlink" title="18. shutdown"></a><font color=DarkOrange>18. shutdown</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">shutdown -h now 关闭系统并立即关机</span><br><span class="line">shutdown -h +10 10分钟后关机</span><br><span class="line">shutdown -r now 重启</span><br><span class="line">shutdown -Fr now 重启期间强制进行系统检查</span><br></pre></td></tr></table></figure>

<h4 id="19-ftp"><a href="#19-ftp" class="headerlink" title="19. ftp"></a><font color=DarkOrange>19. ftp</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ftp IP/hostname ftp命令和sftp命令的用法基本相似连接ftp服务器并下载多个文件</span><br><span class="line">ftp&gt; mls *.html - 显示远程主机上文件列表</span><br></pre></td></tr></table></figure>

<h4 id="20-crontab"><a href="#20-crontab" class="headerlink" title="20. crontab"></a><font color=DarkOrange>20. crontab</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">crontab -u john -l 查看某个用户的crontab入口</span><br><span class="line">*/10 * * * * /home/ramesh/check-disk-space 设置一个每十分钟执行一次的计划任务</span><br></pre></td></tr></table></figure>

<h4 id="21-service"><a href="#21-service" class="headerlink" title="21. service"></a><font color=DarkOrange>21. service</font></h4><p>service命令用于运行System V init脚本，这些脚本一般位于&#x2F;etc&#x2F;init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service ssh status 查看服务状态</span><br><span class="line">service --status-all 查看所有服务状态</span><br><span class="line">service ssh restart 重启服务</span><br></pre></td></tr></table></figure>

<h4 id="22-ps"><a href="#22-ps" class="headerlink" title="22. ps"></a><font color=DarkOrange>22. ps</font></h4><p>ps命令用于显示正在运行中的进程的信息，ps命令有很多选项，这里只列出了几个</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -ef | more 查看当前正在运行的所有进程</span><br><span class="line">ps -efH | more 以树状结构显示当前正在运行的进程，H选项表示显示进程的层次结构</span><br></pre></td></tr></table></figure>

<h4 id="23-free"><a href="#23-free" class="headerlink" title="23. free"></a><font color=DarkOrange>23. free</font></h4><p>这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">free 默认情况下free会以字节为单位输出内存的使用量</span><br><span class="line">free -g 如果你想以其他单位输出内存的使用量，需要加一个选项，-g为GB，-m为MB，-k为KB，-b为字节</span><br><span class="line">free -t 如果你想查看所有内存的汇总，请使用-t选项，使用这个选项会在输出中加一个汇总行</span><br></pre></td></tr></table></figure>

<h4 id="24-top"><a href="#24-top" class="headerlink" title="24. top"></a><font color=DarkOrange>24. top</font></h4><p>top命令会显示当前系统中占用资源最多的一些进程（默认以CPU占用率排序）如果你想改变排序方式，可以在结果列表中点击O（大写字母O）会显示所有可用于排序的列，这个时候你就可以选择你想排序的列</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">top -u oracle 如果只想显示某个特定用户的进程，可以使用-u选项</span><br></pre></td></tr></table></figure>

<h4 id="25-df"><a href="#25-df" class="headerlink" title="25. df"></a><font color=DarkOrange>25. df</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -k 显示文件系统的磁盘使用情况，默认情况下<span class="built_in">df</span> -k 将以字节为单位输出磁盘的使用量</span><br><span class="line"><span class="built_in">df</span> -h 使用-h选项可以以更符合阅读习惯的方式显示磁盘使用量</span><br><span class="line"><span class="built_in">df</span> -T 使用-T选项显示文件系统类型</span><br></pre></td></tr></table></figure>

<h4 id="26-kill"><a href="#26-kill" class="headerlink" title="26. kill"></a><font color=DarkOrange>26. kill</font></h4><p>kill用于终止一个进程。一般我们会先用<code>ps -ef</code>查找某个进程得到它的进程号，然后再使用<code>kill -9 进程号</code>终止该进程。你还可以使用killall、pkill、xkill来终止进程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -ef | grep vim</span><br><span class="line">	ramesh    7243  7222  9 22:43 pts/2    00:00:00 vim</span><br><span class="line"><span class="built_in">kill</span> -9 7243</span><br></pre></td></tr></table></figure>

<h4 id="27-rm"><a href="#27-rm" class="headerlink" title="27. rm"></a><font color=DarkOrange>27. rm</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -i filename.txt 删除文件前先确认</span><br><span class="line"><span class="built_in">rm</span> -i file* 在文件名中使用shell的元字符会非常有用。删除文件前先打印文件名并进行确认</span><br><span class="line"><span class="built_in">rm</span> -r example 递归删除文件夹下所有文件，并删除该文件夹</span><br></pre></td></tr></table></figure>

<h4 id="28-cp"><a href="#28-cp" class="headerlink" title="28. cp"></a><font color=DarkOrange>28. cp</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -p file1 file2 拷贝文件1到文件2，并保持文件的权限、属主和时间戳</span><br><span class="line"><span class="built_in">cp</span> -i file1 file2 拷贝file1到file2，如果file2存在会提示是否覆盖</span><br></pre></td></tr></table></figure>

<h4 id="29-mv"><a href="#29-mv" class="headerlink" title="29. mv"></a><font color=DarkOrange>29. mv</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">注意如果使用-f选项则不会进行提示</span><br><span class="line"><span class="built_in">mv</span> -i file1 file2 将文件名file1重命名为file2，如果file2存在则提示是否覆盖</span><br><span class="line"><span class="built_in">mv</span> -v file1 file2 -v会输出重命名的过程，当文件名中包含通配符时，这个选项会非常方便</span><br></pre></td></tr></table></figure>

<h4 id="30-cat"><a href="#30-cat" class="headerlink" title="30. cat"></a><font color=DarkOrange>30. cat</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> file1 file2 你可以一次查看多个文件的内容，下面的命令会先打印file1的内容，然后打印file2的内容</span><br><span class="line"><span class="built_in">cat</span> -n /etc/logrotate.conf -n命令可以在每行的前面加上行号</span><br></pre></td></tr></table></figure>

<h4 id="31-mount"><a href="#31-mount" class="headerlink" title="31. mount"></a><font color=DarkOrange>31. mount</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /u01</span><br><span class="line">mount /dev/sdb1 /u01 如果要挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上</span><br><span class="line">/dev/sdb1 /u01 ext2 defaults 0 2 也可以把它添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载</span><br></pre></td></tr></table></figure>

<h4 id="32-chmod"><a href="#32-chmod" class="headerlink" title="32. chmod"></a><font color=DarkOrange>32. chmod</font></h4><p>chmod用于改变文件和目录的权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> ug+rwx file.txt 给指定文件的属主和属组所有权限(包括读、写、执行)</span><br><span class="line"><span class="built_in">chmod</span> g-rwx file.txt 删除指定文件的属组的所有权限</span><br><span class="line"><span class="built_in">chmod</span> -R ug+rwx file.txt 修改目录的权限，以及递归修改目录下面所有文件和子目录的权限</span><br></pre></td></tr></table></figure>

<h4 id="33-chown"><a href="#33-chown" class="headerlink" title="33. chown"></a><font color=DarkOrange>33. chown</font></h4><p>chown用于改变文件属主和属组</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> oracle:dba dbora.sh 同时将某个文件的属主改为oracle，属组改为db</span><br><span class="line"><span class="built_in">chown</span> -R oracle:dba /home/oracle 使用-R选项对目录和目录下的文件进行递归修改</span><br></pre></td></tr></table></figure>

<h4 id="34-passwd"><a href="#34-passwd" class="headerlink" title="34. passwd"></a><font color=DarkOrange>34. passwd</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">passwd passwd用于在命令行修改密码，使用这个命令会要求你先输入旧密码，然后输入新密码</span><br><span class="line">passwd USERNAME 超级用户可以用这个命令修改其他用户的密码，这个时候不需要输入用户的密码</span><br><span class="line">passwd -d USERNAME passwd还可以删除某个用户的密码，这个命令只有root用户才能操作，删除密码后，这个用户不需要输入密码就可以登录到系统</span><br></pre></td></tr></table></figure>

<h4 id="35-mkdir"><a href="#35-mkdir" class="headerlink" title="35. mkdir"></a><font color=DarkOrange>35. mkdir</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/temp 在home目录下创建一个名为temp的目录</span><br><span class="line"><span class="built_in">mkdir</span> -p dir1/dir2/dir3/dir4/ 使用-p选项可以创建一个路径上所有不存在的目录</span><br></pre></td></tr></table></figure>

<h4 id="36-ifconfig"><a href="#36-ifconfig" class="headerlink" title="36. ifconfig"></a><font color=DarkOrange>36. ifconfig</font></h4><p>ifconfig用于查看和配置Linux系统的网络接口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig -a 查看所有网络接口及其状态</span><br><span class="line">ifconfig eth0 up 使用up命令启动某个接口</span><br><span class="line">ifconfig eth0 down 使用down命令停止某个接口</span><br></pre></td></tr></table></figure>

<h4 id="37-uname"><a href="#37-uname" class="headerlink" title="37. uname"></a><font color=DarkOrange>37. uname</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a <span class="built_in">uname</span>可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息</span><br></pre></td></tr></table></figure>

<h4 id="38-whereis"><a href="#38-whereis" class="headerlink" title="38. whereis"></a><font color=DarkOrange>38. whereis</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">whereis <span class="built_in">ls</span> 当你不知道某个命令的位置时可以使用whereis命令，下面使用whereis查找<span class="built_in">ls</span>的位置</span><br><span class="line">whereis -u -B /tmp -f lsmk 当你想查找某个可执行程序的位置，但这个程序又不在whereis的默认目录下，你可以使用-B选项，并指定目录作为这个选项的参数。下面的命令在/tmp目录下查找lsmk命令</span><br></pre></td></tr></table></figure>

<h4 id="39-whatis"><a href="#39-whatis" class="headerlink" title="39. whatis"></a><font color=DarkOrange>39. whatis</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">whatis <span class="built_in">ls</span> wathis显示某个命令的描述信息</span><br><span class="line">whatis ifconfig wathis显示某个命令的描述信息</span><br></pre></td></tr></table></figure>

<h4 id="40-locate"><a href="#40-locate" class="headerlink" title="40. locate"></a><font color=DarkOrange>40. locate</font></h4><p>locate命名可以显示某个指定文件（或一组文件）的路径，它会使用由updatedb创建的数据库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">locate crontab 命令会显示系统中所有包含crontab字符串的文件</span><br></pre></td></tr></table></figure>

<h4 id="41-man"><a href="#41-man" class="headerlink" title="41. man"></a><font color=DarkOrange>41. man</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">man crontab 显示某个命令的man页面</span><br><span class="line">man SECTION-NUMBER commandname 有些命令可能会有多个man页面，每个man页面对应一种命令类型</span><br></pre></td></tr></table></figure>

<h4 id="42-tail"><a href="#42-tail" class="headerlink" title="42. tail"></a><font color=DarkOrange>42. tail</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> filename.txt <span class="built_in">tail</span>命令默认显示文件最后的10行文本</span><br><span class="line"><span class="built_in">tail</span> -n N filename.txt 你可以使用-n选项指定要显示的行数</span><br><span class="line"><span class="built_in">tail</span> -f log-file 你也可以使用-f选项进行实时查看，这个命令执行后会等待，如果有新行添加到文件尾部，它会继续输出新的行，在查看日志时这个选项会非常有用。你可以通过CTRL-C终止命令的执行</span><br></pre></td></tr></table></figure>

<h4 id="43-less"><a href="#43-less" class="headerlink" title="43. less"></a><font color=DarkOrange>43. less</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">less huge-log-file.log 这个命名可以在不加载整个文件的前提下显示文件内容，在查看大型日志文件的时候这个命令会非常有用</span><br></pre></td></tr></table></figure>

<h4 id="44-su"><a href="#44-su" class="headerlink" title="44. su"></a><font color=DarkOrange>44. su</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">su - USERNAME su命令用于切换用户账号，超级用户使用这个命令可以切换到任何其他用户而不用输入密码</span><br><span class="line">su -s <span class="string">&#x27;SHELLNAME&#x27;</span> USERNAME 用指定用户登录，并且使用指定的shell程序，而不用默认的</span><br></pre></td></tr></table></figure>

<h4 id="45-mysql"><a href="#45-mysql" class="headerlink" title="45. mysql"></a><font color=DarkOrange>45. mysql</font></h4><p>mysql可能是Linux上使用最广泛的数据库，即使你没有在你的服务器上安装mysql，你也可以使用mysql客户端连接到远程的mysql服务器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u root -p -h 192.168.1.2 连接一个远程数据库，需要输入密码</span><br><span class="line">mysql -u root -p 连接本地数据库</span><br></pre></td></tr></table></figure>

<p>你也可以在命令行中输入数据库密码，只需要在-p后面加上密码作为参数，可以直接写在p后面而不用加空格</p>
<h4 id="46-yum"><a href="#46-yum" class="headerlink" title="46. yum"></a><font color=DarkOrange>46. yum</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install httpd 使用yum安装apache</span><br><span class="line">yum update httpd 更新apache</span><br><span class="line">yum remove httpd 卸载/删除apache</span><br></pre></td></tr></table></figure>

<h4 id="47-rpm"><a href="#47-rpm" class="headerlink" title="47. rpm"></a><font color=DarkOrange>47. rpm</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm 使用rpm安装apache</span><br><span class="line">rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm 更新apache</span><br><span class="line">rpm -ev httpd 卸载/删除apache</span><br></pre></td></tr></table></figure>

<h4 id="48-ping"><a href="#48-ping" class="headerlink" title="48. ping"></a><font color=DarkOrange>48. ping</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ping -c 5 gmail.com ping一个远程主机，只发5个数据包</span><br></pre></td></tr></table></figure>

<h4 id="49-date"><a href="#49-date" class="headerlink" title="49. date"></a><font color=DarkOrange>49. date</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> -s <span class="string">&quot;01/31/2010 23:59:53&quot;</span> 设置系统日期</span><br><span class="line">---</span><br><span class="line">当你修改了系统时间，你需要同步硬件时间和系统时间</span><br><span class="line">hwclock –systohc</span><br><span class="line">hwclock --systohc –utc</span><br></pre></td></tr></table></figure>

<h4 id="50-wget"><a href="#50-wget" class="headerlink" title="50. wget"></a><font color=DarkOrange>50. wget</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz 使用wget从网上下载软件、音乐、视频</span><br><span class="line">wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701 下载文件并以指定的文件名保存文件</span><br></pre></td></tr></table></figure>

<h4 id="51-CPU100-怎么排查和处理"><a href="#51-CPU100-怎么排查和处理" class="headerlink" title="51. CPU100%怎么排查和处理"></a><font color=DarkOrange>51. CPU100%怎么排查和处理</font></h4><p>使用top命令定位进程，再用top命令定位线程，再打印线程堆栈查看运行情况</p>
<ol>
<li><code>top</code>命令显示进程运行列表，找到最耗<code>CPU</code>的进程<code>PID</code></li>
<li>找到最耗<code>CPU</code>的线程，<code>top -Hp 进程PID号</code>，显示进程的线程运行列表，找到最耗<code>CPU</code>的线程<code>PID</code></li>
<li>将线程<code>PID</code>转化为16进制，<code>printf &quot;%x\n&quot; 线程PID号</code>，因为在堆栈里，线程<code>ID</code>是用16进制表示的</li>
<li>查看堆栈，找到线程在干嘛，<code>pstack/jstack/grep</code>，<code>jstack 进程PID | grep ‘线程PID的16进制数’ -C5 --color</code>打印进程堆栈，通过线程<code>ID</code>，过滤得到线程堆栈，根据线程<code>PID</code>的16进制数找到消耗<code>CPU</code>高的线程对应的线程的名称，以及看到了改线程正在执行代码的堆栈</li>
</ol>
<h4 id="52"><a href="#52" class="headerlink" title="52. "></a><font color=DarkOrange>52. </font></h4><h4 id="53"><a href="#53" class="headerlink" title="53. "></a><font color=DarkOrange>53. </font></h4><h4 id="54"><a href="#54" class="headerlink" title="54. "></a><font color=DarkOrange>54. </font></h4><h4 id="55"><a href="#55" class="headerlink" title="55."></a><font color=DarkOrange>55.</font></h4><h4 id="56"><a href="#56" class="headerlink" title="56. "></a><font color=DarkOrange>56. </font></h4><h4 id="57"><a href="#57" class="headerlink" title="57. "></a><font color=DarkOrange>57. </font></h4><hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-面试题</title>
    <url>/2022/10/28/Golang%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>Go常见面试题分享，涵盖了常见的Go面试八股文</p>
<h4 id="1-无缓冲Chan的发送和接收是否同步"><a href="#1-无缓冲Chan的发送和接收是否同步" class="headerlink" title="1. 无缓冲Chan的发送和接收是否同步"></a><font color=DarkOrange>1. 无缓冲Chan的发送和接收是否同步</font></h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ch := make(chan int)    无缓冲的channel由于没有缓冲发送和接收需要同步</span><br><span class="line">ch := make(chan int, 2) 有缓冲channel不要求发送和接收操作同步</span><br></pre></td></tr></table></figure>

<ul>
<li>channel无缓冲时，发送阻塞直到数据被接收，接收阻塞直到读到数据</li>
<li>channel有缓冲时，当缓冲满时发送阻塞，当缓冲空时接收阻塞</li>
</ul>
<h4 id="2-什么是channel，为什么它可以做到线程安全"><a href="#2-什么是channel，为什么它可以做到线程安全" class="headerlink" title="2. 什么是channel，为什么它可以做到线程安全"></a><font color=DarkOrange>2. 什么是channel，为什么它可以做到线程安全</font></h4><ul>
<li>Channel是Go中的一个核心类型，可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)，Channel也可以理解是一个先进先出的队列，通过管道进行通信</li>
<li>Golang的Channel，发送一个数据到Channel和从Channel接收一个数据都是原子性的</li>
<li>Go的设计思想就是，不要通过共享内存来通信，而是通过通信来共享内存，前者就是传统的加锁，后者就是Channel</li>
<li>设计Channel的主要目的就是在多任务间传递数据的，本身就是安全的</li>
</ul>
<h4 id="3-Goroutine和Channel的作用分别是什么"><a href="#3-Goroutine和Channel的作用分别是什么" class="headerlink" title="3. Goroutine和Channel的作用分别是什么"></a><font color=DarkOrange>3. Goroutine和Channel的作用分别是什么</font></h4><p>进程是内存资源管理和cpu调度的执行单元。为了有效利用多核处理器的优势，将进程进一步细分，允许一个进程里存在多个线程，这多个线程还是共享同一片内存空间，但cpu调度的最小单元变成了线程</p>
<p>协程，可以看作是轻量级的线程。但与线程不同的是，线程的切换是由操作系统控制的，而协程的切换则是由用户控制的</p>
<p>Go中的goroutinue就是协程，可以实现并行，多个协程可以在多个处理器同时跑。而协程同一时刻只能在一个处理器上跑（可以把宿主语言想象成单线程的就好了）</p>
<p>多个goroutine之间的通信是通过channel，在Golang中channel则是goroutinues之间进行通信的渠道。可以把channel形象比喻为工厂里的传送带，一头的生产者goroutine往传输带放东西，另一头的消费者goroutinue则从输送带取东西。channel实际上是一个有类型的消息队列，遵循先进先出的特点</p>
<h4 id="4-Channel是同步的还是异步的"><a href="#4-Channel是同步的还是异步的" class="headerlink" title="4. Channel是同步的还是异步的"></a><font color=DarkOrange>4. Channel是同步的还是异步的</font></h4><p>Channel是异步进行的，channel存在3种状态：</p>
<ul>
<li>nil，未初始化的状态，只进行了声明，或者手动赋值为nil</li>
<li>active，正常的channel，可读或者可写</li>
<li>closed，已关闭，千万不要误认为关闭channel后，channel的值是nil</li>
</ul>
<table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">一个零值nil通道</th>
<th align="left">一个非零值但已关闭的通道</th>
<th align="left">一个非零值且尚未关闭的通道</th>
</tr>
</thead>
<tbody><tr>
<td align="left">关闭</td>
<td align="left">产生恐慌</td>
<td align="left">产生恐慌</td>
<td align="left">成功关闭</td>
</tr>
<tr>
<td align="left">发送数据</td>
<td align="left">永久阻塞</td>
<td align="left">产生恐慌</td>
<td align="left">阻塞或者成功发送</td>
</tr>
<tr>
<td align="left">接收数据</td>
<td align="left">永久阻塞</td>
<td align="left">永不阻塞</td>
<td align="left">阻塞或者成功接收</td>
</tr>
</tbody></table>
<h4 id="5-Go中的channel的实现"><a href="#5-Go中的channel的实现" class="headerlink" title="5. Go中的channel的实现"></a><font color=DarkOrange>5. Go中的channel的实现</font></h4><p>在Go中最常见的就是通信顺序进程（Communicating sequential processes，CSP）的并发模型，通过共享通信，来实现共享内存，这里就提到了channel。Goroutine 和 Channel 分别对应 CSP 中的实体和传递信息的媒介，Go 语言中的 Goroutine 会通过 Channel 传递数据</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7no7xmdcgj313c0b0jtt.jpg" alt="image.png" style="zoom:25%;" /></div>

<p>Goroutine通过使用channel传递数据，一个会向 Channel 中发送数据，另一个会从 Channel 中接收数据，它们两者能够独立运行并不存在直接关联，但是能通过 Channel 间接完成通信</p>
<p>Channel 收发操作均遵循了先入先出（FIFO）的设计，具体规则如下：</p>
<ul>
<li>先从 Channel 读取数据的 Goroutine 会先接收到数据</li>
<li>先向 Channel 发送数据的 Goroutine 会得到先发送数据的权利</li>
</ul>
<p>Channel 通常会有以下三种类型：</p>
<ul>
<li>同步 Channel — 不需要缓冲区，发送方会直接将数据交给（Handoff）接收方</li>
<li>异步 Channel：基于环形缓存的传统生产者消费者模型</li>
<li><code>chan struct&#123;&#125;</code> 类型的异步 <code>Channel</code> 的 <code>struct&#123;&#125;</code> 类型不占用内存空间，不需要实现缓冲区和直接发送（Handoff）的语义</li>
</ul>
<p>Channel 在运行时使用 <code>runtime.hchan</code> 结构体表示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hchan <span class="keyword">struct</span> &#123;</span><br><span class="line">    qcount   <span class="type">uint</span>           <span class="comment">// 当前队列里还剩余元素个数</span></span><br><span class="line">    dataqsiz <span class="type">uint</span>           <span class="comment">// 环形队列长度，即缓冲区的大小，即make(chan T,N) 中的N</span></span><br><span class="line">    buf      unsafe.Pointer <span class="comment">// 环形队列指针</span></span><br><span class="line">    elemsize <span class="type">uint16</span>         <span class="comment">// 每个元素的大小</span></span><br><span class="line">    closed   <span class="type">uint32</span>         <span class="comment">// 标识当前通道是否处于关闭状态，创建通道后，该字段设置0，即打开通道；通道调用close将其设置为1，通道关闭</span></span><br><span class="line">    elemtype *_type         <span class="comment">// 元素类型，用于数据传递过程中的赋值</span></span><br><span class="line">    sendx    <span class="type">uint</span>           <span class="comment">// 环形缓冲区的状态字段，它只是缓冲区的当前索引-支持数组，它可以从中发送数据</span></span><br><span class="line">    recvx    <span class="type">uint</span>          <span class="comment">// 环形缓冲区的状态字段，它只是缓冲区当前索引-支持数组，它可以从中接受数据</span></span><br><span class="line">    recvq    waitq         <span class="comment">// 等待读消息的goroutine队列</span></span><br><span class="line">    sendq    waitq         <span class="comment">// 等待写消息的goroutine队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// lock protects all fields in hchan, as well as several</span></span><br><span class="line">    <span class="comment">// fields in sudogs blocked on this channel.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Do not change another G&#x27;s status while holding this lock</span></span><br><span class="line">    <span class="comment">// (in particular, do not ready a G), as this can deadlock</span></span><br><span class="line">    <span class="comment">// with stack shrinking.</span></span><br><span class="line">    lock mutex           <span class="comment">// 互斥锁，为每个读写操作锁定通道，因为发送和接受必须是互斥操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> waitq <span class="keyword">struct</span> &#123;</span><br><span class="line">    first *sudog</span><br><span class="line">    last  *sudog</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中hchan结构体中有五个字段是构建底层的循环队列：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">qcount：Channel中的元素个数</span><br><span class="line">dataqsiz：Channel中的循环队列的长度</span><br><span class="line">buf：Channel的缓冲区数据指针</span><br><span class="line">sendx：Channel的发送操作处理到的位置</span><br><span class="line">recvx：Channel的接收操作处理到的位置</span><br></pre></td></tr></table></figure>

<h4 id="6-Golang并发机制以及它所使用的CSP并发模型"><a href="#6-Golang并发机制以及它所使用的CSP并发模型" class="headerlink" title="6. Golang并发机制以及它所使用的CSP并发模型"></a><font color=DarkOrange>6. Golang并发机制以及它所使用的CSP并发模型</font></h4><p>在计算机科学中，通信顺序过程（communicating sequential processes，CSP）是一种描述并发系统中交互模式的正式语言，它是并发数学理论家族中的一个成员，被称为过程算法（process algebras），或者说过程计算（process calculate），是基于消息的通道传递的数学理论</p>
<p>Golang中的Goroutine的特性：</p>
<p>Golang内部有三个对象： P对象(processor) 代表上下文（或者可以认为是cpu），M(work thread)代表工作线程，G对象（goroutine）</p>
<p>正常情况下一个cpu对象启一个工作线程对象，线程去检查并执行goroutine对象。碰到goroutine对象阻塞的时候，会启动一个新的工作线程，以充分利用cpu资源。所以有时候线程对象会比处理器对象多很多</p>
<ul>
<li>G（Goroutine） ：我们所说的协程，为用户级的轻量级线程，每个Goroutine对象中的sched保存着其上下文信息</li>
<li>M（Machine） ：对Os内核级线程的封装，数量对应真实的CPU数（真正干活的对象）</li>
<li>P（Processor） ：逻辑处理器，即为G和M的调度对象，用来调度G和M之间的关联关系，其数量可通过GOMAXPROCS()来设置，默认为核心数</li>
</ul>
<p>在单核情况下，所有Goroutine运行在同一个线程（M0）中，每一个线程维护一个上下文（P），任何时刻，一个上下文中只有一个Goroutine，其他Goroutine在runqueue中等待。一个Goroutine运行完自己的时间片后，让出上下文，自己回到runqueue中（如下图所示）</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7nojprq3uj30ns0kgdi9.jpg" alt="image.png" style="zoom:38%;" /></div>

<p>当正在运行的G0阻塞的时候（可以需要IO），会再创建一个线程（M1），P转到新的线程中去运行</p>
<p>当M0返回时，它会尝试从其他线程中“偷”一个上下文过来，如果没有偷到，会把Goroutine放到Global runqueue中去，然后把自己放入线程缓存中。上下文会定时检查Global runqueue</p>
<p>Golang的CSP并发模型，是通过Goroutine和Channel来实现的</p>
<p>因此，GPM的简要概括即为：事件循环，线程池，工作队列</p>
<h4 id="7-Go的GPM如何调度"><a href="#7-Go的GPM如何调度" class="headerlink" title="7. Go的GPM如何调度"></a><font color=DarkOrange>7. Go的GPM如何调度</font></h4><p>协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此，协程能保留上一次调用时的状态（即所有局部状态的一个特定组合），每次过程重入时，就相当于进入上一次调用的状态，换种说法：进入上一次离开时所处逻辑流的位置</p>
<p>线程和进程的操作是由程序触发系统接口，最后的执行者是系统；协程的操作执行者则是用户自身程序，goroutine也是协程</p>
<p>groutine能拥有强大的并发实现是通过GPM调度模型实现</p>
<p>Go的调度器内部有四个重要的结构：M，G，P，Sched：</p>
<ul>
<li>M：M代表内核级线程，一个M就是一个线程，goroutine就是跑在M之上的；M是一个很大的结构，里面维护小对象内存cache（mcache）、当前执行的goroutine、随机数发生器等等非常多的信息</li>
<li>G：代表一个goroutine，它有自己的栈，instruction pointer和其他信息（正在等待的channel等等），用于调度</li>
<li>P：P全称是Processor，逻辑处理器，它的主要用途就是用来执行goroutine的，所以它也维护了一个goroutine队列，里面存储了所有需要它来执行的goroutine</li>
<li>Sched：代表调度器，它维护有存储M和G的队列以及调度器的一些状态信息等</li>
</ul>
<hr>
<ol>
<li>新创建的Goroutine会先存放在Global全局队列中，等待Go调度器进行调度，随后Goroutine被分配给其中的一个逻辑处理器P，并放到这个逻辑处理器对应的Local本地运行队列中，最终等待被逻辑处理器P执行即可</li>
<li>在M与P绑定后，M会不断从P的Local队列中无锁地取出G，并切换到G的堆栈执行，当P的Local队列中没有G时，再从Global队列中获取一个G，当Global队列中也没有待运行的G时，则尝试从其它的P窃取部分G来执行相当于P之间的负载均衡</li>
<li>每一个M都拥有一个处理器P，每一个也都有一个正在运行的goroutine。P的数量可以通过GOMAXPROCS()来设置，它其实也就代表了真正的并发度，即有多少个goroutine可以同时运行</li>
<li>对于没有运行的goroutine，而是出于ready的就绪态，正在等待被调度。P维护着这个队列（称之为runqueue），Go语言里，启动一个goroutine很容易：go function 就行，所以每有一个go语句被执行，runqueue队列就在其末尾加入一个goroutine，在下一个调度点，就从runqueue中取出（如何决定取哪个goroutine？）一个goroutine执行</li>
<li>当一个OS线程M0陷入阻塞时，P转而在运行M1，图中的M1可能是正被创建，或者从线程缓存中取出</li>
<li>当MO返回时，它必须尝试取得一个P来运行goroutine，一般情况下，它会从其他的OS线程那里拿一个P过来，如果没有拿到的话，它就把goroutine放在一个<code>global runqueue</code>里，然后自己睡眠（放入线程缓存里）。所有的P也会周期性的检查<code>global runqueue</code>并运行其中的goroutine，否则<code>global runqueue</code>上的goroutine永远无法执行</li>
<li>另一种情况是P所分配的任务G很快就执行完了（分配不均），这就导致了这个处理器P处于空闲的状态，但是此时其他的P还有任务，此时如果global runqueue没有任务G了，那么这个P就会从其他的P里偷取一些G来执行。通常来说，如果P从其他的P那里要拿任务的话，一般就拿<code>run queue</code>的一半，这就确保了每个OS线程都能充分的使用</li>
</ol>
<h4 id="8-Golang中常用的并发模型"><a href="#8-Golang中常用的并发模型" class="headerlink" title="8. Golang中常用的并发模型"></a><font color=DarkOrange>8. Golang中常用的并发模型</font></h4><p>Golang中常用的并发模型有三种:</p>
<ul>
<li>通过channel通知实现并发控制</li>
<li>通过sync包中的WaitGroup实现并发控制</li>
<li>在Go1.7以后引进的强大的Context上下文，实现并发控制</li>
</ul>
<ol>
<li><p>通过channel通知实现并发控制</p>
<p>无缓冲的通道指的是通道的大小为0，也就是说，这种类型的通道在接收前没有能力保存任何值，它要求发送 goroutine 和接收 goroutine 同时准备好，才可以完成发送和接收操作</p>
<p>发送 goroutine 和接收 gouroutine 必须是同步的，同时准备后，如果没有同时准备好的话，先执行的操作就会阻塞等待，直到另一个相对应的操作准备好为止</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;start working&quot;</span>)</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    &lt;-ch</span><br><span class="line">    fmt.Println(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当主 goroutine 运行到 <code>&lt;-ch</code> 接受 channel 的值的时候，如果该 channel 中没有数据，就会一直阻塞等待，直到有值。 这样就可以简单实现并发控制</p>
<hr>
</li>
<li><p>通过sync包中的WaitGroup实现并发控制</p>
<p>Goroutine是异步执行的，有的时候为了防止在结束main函数的时候结束掉Goroutine，所以需要同步等待，这个时候就需要用 WaitGroup了，在sync包中，提供了WaitGroup，它会等待它收集的所有Goroutine任务全部完成。在WaitGroup里主要有三个方法:</p>
<ul>
<li>Add，可以添加或减少Goroutine的数量</li>
<li>Done，相当于Add(-1)</li>
<li>Wait，执行后会堵塞主线程，直到WaitGroup里的值减至0</li>
</ul>
<p>在主 goroutine 中 Add(delta int) 索要等待goroutine 的数量。在每一个 goroutine 完成后 Done() 表示这一个goroutine 已经完成，当所有的 goroutine 都完成后，在主 goroutine 中 WaitGroup 返回</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">var</span> urls = []<span class="type">string</span>&#123;</span><br><span class="line">        <span class="string">&quot;http://www.golang.org/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://www.google.com/&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, url := <span class="keyword">range</span> urls &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(url <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            http.Get(url)</span><br><span class="line">        &#125;(url)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Golang官网中对于WaitGroup介绍是<code>A WaitGroup must not be copied after first use</code>,在 WaitGroup第一次使用后，不能被拷贝</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(wg sync.WaitGroup, i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i:%d&quot;</span>, i)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(wg, i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;exit&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行之后会报错：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">i:1i:3i:2i:0i:4fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [semacquire]:</span><br><span class="line">sync.runtime_Semacquire(0xc000094018)</span><br><span class="line">        /home/keke/soft/go/src/runtime/sema.go:56 +0x39</span><br><span class="line"><span class="built_in">sync</span>.(*WaitGroup).Wait(0xc000094010)</span><br><span class="line">        /home/keke/soft/go/src/sync/waitgroup.go:130 +0x64</span><br><span class="line">main.main()</span><br><span class="line">        /home/keke/go/Test/wait.go:17 +0xab</span><br><span class="line"><span class="built_in">exit</span> status 2</span><br></pre></td></tr></table></figure>

<p>它提示所有的 <code>goroutine</code> 都已经睡眠了，出现了死锁。这是因为wg给拷贝传递到了goroutine中，导致只有Add操作，其实Done操作是在wg的副本执行的，因此 Wait 就会死锁</p>
<ul>
<li><p>这个第一个修改方式：将匿名函数中wg的传入类型改为 <code>*sync.WaitGroup，</code>这样就能引用到正确的<code>WaitGroup</code>了</p>
</li>
<li><p>这个第二个修改方式：将匿名函数中的wg的传入参数去掉，因为Go支持闭包类型，在匿名函数中可以直接使用外面的wg变量</p>
</li>
</ul>
<hr>
</li>
<li><p>Context上下文实现并发控制</p>
<p>通常，在一些简单场景下使用channel和WaitGroup已经足够了，但是当面临一些复杂多变的网络并发场景下channel和WaitGroup显得有些力不从心了，比如一个网络请求Request，每个Request都需要开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine，比如数据库和RPC服务</p>
<p>所以我们需要一种可以跟踪goroutine的方案，才可以达到控制他们的目的，这就是Go语言为我们提供的Context，称之为上下文非常贴切，它就是goroutine的上下文，它是包括一个程序的运行环境、现场和快照等。每个程序要运行时，都需要知道当前程序的运行状态，通常Go将这些封装在一个 Context里，再将它传给要执行的goroutine ，context包主要是用来处理多个goroutine之间共享数据，及多个goroutine的管理</p>
<p>context包的核心是struct Context，接口声明如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A Context carries a deadline, cancelation signal, and request-scoped values</span></span><br><span class="line"><span class="comment">// across API boundaries. Its methods are safe for simultaneous use by multiple</span></span><br><span class="line"><span class="comment">// goroutines.</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Done returns a channel that is closed when this `Context` is canceled</span></span><br><span class="line">    <span class="comment">// or times out.</span></span><br><span class="line">    <span class="comment">// Done() 返回一个只能接受数据的channel类型，当该context关闭或者超时时间到了的时候，该channel就会有一个取消信号</span></span><br><span class="line">    Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Err indicates why this Context was canceled, after the Done channel</span></span><br><span class="line">    <span class="comment">// is closed.</span></span><br><span class="line">    <span class="comment">// Err() 在Done() 之后，返回context 取消的原因。</span></span><br><span class="line">    Err() <span class="type">error</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deadline returns the time when this Context will be canceled, if any.</span></span><br><span class="line">    <span class="comment">// Deadline() 设置该context cancel的时间点</span></span><br><span class="line">    Deadline() (deadline time.Time, ok <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Value returns the value associated with key or nil if none.</span></span><br><span class="line">    <span class="comment">// Value() 方法允许 Context 对象携带request作用域的数据，该数据必须是线程安全的。</span></span><br><span class="line">    Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Context对象是线程安全的，你可以把一个Context对象传递给任意个数的gorotuine，对它执行 取消 操作时，所有goroutine都会接收到取消信号。一个Context不能拥有Cancel方法，同时我们也只能Done channel接收数据。其中的原因是一致的：接收取消信号的函数和发送信号的函数通常不是一个。典型的场景是：父操作为子操作操作启动goroutine，子操作也就不能取消父操作</p>
</li>
</ol>
<h4 id="9-并发编程概念是什么"><a href="#9-并发编程概念是什么" class="headerlink" title="9. 并发编程概念是什么"></a><font color=DarkOrange>9. 并发编程概念是什么</font></h4><ul>
<li>并行是指两个或者多个事件在同一时刻发生；并发是指两个或多个事件在同一时间间隔发生</li>
<li>并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群</li>
<li>并发偏重于多个任务交替执行，而多个任务之间有可能还是串行的。而并行是真正意义上的“同时执行”</li>
<li>并发编程是指在一台处理器上“同时”处理多个任务。并发是在同一实体上的多个事件。多个事件在同一时间间隔发生。并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能</li>
</ul>
<h4 id="10-怎么查看Goroutine的数量"><a href="#10-怎么查看Goroutine的数量" class="headerlink" title="10. 怎么查看Goroutine的数量"></a><font color=DarkOrange>10. 怎么查看Goroutine的数量</font></h4><p>在Golang中，<code>GOMAXPROCS</code>中控制的是未被阻塞的所有Goroutine，可以被 <code>Multiplex</code> 到多少个线程上运行，通过<code>GOMAXPROCS</code>可以查看Goroutine的数量</p>
<h4 id="11-怎么限制Goroutine的数量"><a href="#11-怎么限制Goroutine的数量" class="headerlink" title="11. 怎么限制Goroutine的数量"></a><font color=DarkOrange>11. 怎么限制Goroutine的数量</font></h4><p>在Golang中，Goroutine虽然很好，但是数量太多了，往往会带来很多麻烦，比如耗尽系统资源导致程序崩溃，或者CPU使用率过高导致系统忙不过来。所以我们可以限制下Goroutine的数量，这样就需要在每一次执行go之前判断goroutine的数量，如果数量超了，就要阻塞go的执行</p>
<ul>
<li>使用通道，每次执行的go之前向通道写入值，直到通道满的时候就阻塞了</li>
<li>但是新的问题于是就出现了，因为并不是所有的goroutine都执行完了，在main函数退出之后，还有一些goroutine没有执行完就被强制结束了。这个时候我们就需要用到sync.WaitGroup。使用WaitGroup等待所有的goroutine退出</li>
<li>Go的GOMAXPROCS默认值已经设置为CPU的核数， 这里允许我们的Go程序充分使用机器的每一个CPU，最大程度的提高我们程序的并发性能。<code>runtime.NumGoroutine</code>函数在被调用后，会返回系统中的处于特定状态的Goroutine的数量。这里的特指是指<code>Grunnable\Gruning\Gsyscall\Gwaition</code>。处于这些状态的Groutine即被看做是活跃的或者说正在被调度</li>
<li><strong>注意：</strong> 垃圾回收所在Groutine的状态也处于这个范围内的话，也会被纳入该计数器</li>
</ul>
<h4 id="12-Goroutine和线程的区别"><a href="#12-Goroutine和线程的区别" class="headerlink" title="12. Goroutine和线程的区别"></a><font color=DarkOrange>12. Goroutine和线程的区别</font></h4><p>从调度上看，goroutine的调度开销远远小于线程调度开销</p>
<ul>
<li>线程：OS的线程由OS内核调度，每隔几毫秒，一个硬件时钟中断发到CPU，CPU调用一个调度器内核函数。这个函数暂停当前正在运行的线程，把他的寄存器信息保存到内存中，查看线程列表并决定接下来运行哪一个线程，再从内存中恢复线程的注册表信息，最后继续执行选中的线程。这种线程切换需要一个完整的上下文切换：即保存一个线程的状态到内存，再恢复另外一个线程的状态，最后更新调度器的数据结构。某种意义上，这种操作还是很慢的</li>
<li>goroutine：Go运行的时候包涵一个自己的调度器，这个调度器使用一个称为一个M:N调度技术，m个goroutine到n个os线程（可以用GOMAXPROCS来控制n的数量），Go的调度器不是由硬件时钟来定期触发的，而是由特定的go语言结构来触发的，他不需要切换到内核语境，所以调度一个goroutine比调度一个线程的成本低很多</li>
</ul>
<p>从栈空间上，goroutine的栈空间更加动态灵活</p>
<p>每个OS的线程都有一个固定大小的栈内存，通常是2MB，栈内存用于保存在其他函数调用期间哪些正在执行或者临时暂停的函数的局部变量。这个固定的栈大小，如果对于goroutine来说，可能是一种巨大的浪费。作为对比goroutine在生命周期开始只有一个很小的栈，典型情况是2KB, 在go程序中，一次创建十万左右的goroutine也不罕见（2KB*100,000&#x3D;200MB）。而且goroutine的栈不是固定大小，它可以按需增大和缩小，最大限制可以到1GB</p>
<p>goroutine没有一个特定的标识</p>
<p>在大部分支持多线程的操作系统和编程语言中，线程有一个独特的标识，通常是一个整数或者指针，这个特性可以让我们构建一个线程的局部存储，本质是一个全局的map，以线程的标识作为键，这样每个线程可以独立使用这个map存储和获取值，不受其他线程干扰</p>
<p>goroutine中没有可供程序员访问的标识，原因是一种纯函数的理念，不希望滥用线程局部存储导致一个不健康的超距作用，即函数的行为不仅取决于它的参数，还取决于运行它的线程标识</p>
<h4 id="13-在Go函数中为什么会发生内存泄露，Goroutine发生了泄漏如何检测"><a href="#13-在Go函数中为什么会发生内存泄露，Goroutine发生了泄漏如何检测" class="headerlink" title="13. 在Go函数中为什么会发生内存泄露，Goroutine发生了泄漏如何检测"></a><font color=DarkOrange>13. 在Go函数中为什么会发生内存泄露，Goroutine发生了泄漏如何检测</font></h4><p>内存泄漏，指的是能够预期的能很快被释放的内存由于附着在了长期存活的内存上、或生命期意外地被延长，导致预计能够立即回收的内存而长时间得不到回收</p>
<ul>
<li>预期能被快速释放的内存因被根对象引用而没有得到迅速释放；当有一个全局对象时，可能不经意间将某个变量附着在其上，且忽略的将其进行释放，则该内存永远不会得到释放</li>
<li>Goroutine泄漏；Goroutine作为一种逻辑上理解的轻量级线程，需要维护执行用户代码的上下文信息。在运行过程中也需要消耗一定的内存来保存这类信息，而这些内存在目前版本的 Go 中是不会被释放的。因此，如果一个程序持续不断地产生新的 goroutine、且不结束已经创建的goroutine并复用这部分内存，就会造成内存泄漏的现象</li>
<li>检测方法：通过Go自带的工具pprof或者使用Gops去检测诊断当前在系统上运行的Go进程的占用的资源</li>
</ul>
<hr>
<h5 id="13-1-PProf是什么"><a href="#13-1-PProf是什么" class="headerlink" title="13.1 PProf是什么"></a><font color=DarkOrange>13.1 PProf是什么</font></h5><ol>
<li><code>PProf</code>是一个<code>Go</code>程序性能分析工具，可以分析<code>CPU</code>，内存等性能</li>
<li><code>Go</code>在语言层面上集成了<code>profile</code>采样工具，只需要在代码中简单的引入<code>runtime/ppro</code>或者<code>net/http/pprof</code>包即可获取程序的<code>profile</code>文件，并通过该文件来进行性能分析</li>
<li><code>runtime/pprof</code>还可以为控制台程序或者测试程序产生<code>pprof</code>数据</li>
<li>其实<code>net/http/pprof</code>中只是使用<code>runtime/pprof</code>包来进行封装了一下，并在<code>HTTP</code>端口上暴露出来</li>
</ol>
<h5 id="13-2-PProf使用"><a href="#13-2-PProf使用" class="headerlink" title="13.2 PProf使用"></a><font color=DarkOrange>13.2 PProf使用</font></h5><p>在<code>gin</code>的路由中注册<code>pprof</code>的路由</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pprof router</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-contrib/pprof&quot;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">	Router = gin.New()</span><br><span class="line">	pprof.Register(Router)</span><br></pre></td></tr></table></figure>

<p>通过<code>go tool pprof http://127.0.0.1/debug/pprof/profile</code>可以获取<code>profile</code>采集信息并分析</p>
<p>也可以直接在浏览器访问<code>http://localhost:8080/debug/pprof</code>来查看当前<code>API</code>服务的状态，包括<code>CPU</code>占用情况和内存使用情况等</p>
<p>通过<code>topN</code>的输出可以分析出哪些函数占用<code>CPU</code>时间片最多，这些函数可能存在性能问题。此命名用于显示<code>profile</code>文件中的最靠前的N个样本（默认前10个<code>sample</code>），它的输出格式字段的含义依次是：</p>
<ul>
<li>采样点落在该函数中的总时间</li>
<li>采样点落在该函数中的百分比</li>
<li>上一项的累积百分比</li>
<li>采样点落在该函数，以及被它调用的函数中的总时间</li>
<li>采样点落在该函数，以及被它调用的函数中的总次数百分比</li>
<li>函数名</li>
</ul>
<p>如果觉得不直观，可以直接再生成函数调用图，通过调用图来判断哪些函数耗时最久，在<code>pprof</code>交互界面，执行<code>svg</code>生成<code>svg</code>文件</p>
<p>但是需要确保系统已经安装<code>graphviz</code>命令（<code>Mac OS:brew install graphviz; CentOS: yum -y install graphviz.x86_64</code>）</p>
<h4 id="14-Goroutine和内核线程（KernelThread）之间是什么关系"><a href="#14-Goroutine和内核线程（KernelThread）之间是什么关系" class="headerlink" title="14. Goroutine和内核线程（KernelThread）之间是什么关系"></a><font color=DarkOrange>14. Goroutine和内核线程（KernelThread）之间是什么关系</font></h4><p>进程、线程、协程的关系和区别：</p>
<ul>
<li>进程拥有自己独立的堆和栈，既不共享堆，亦不共享栈，进程由操作系统调度</li>
<li>线程拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度(标准线程是的)</li>
<li>协程和线程一样共享堆，不共享栈，协程由程序开发者在协程的代码里显示调度</li>
</ul>
<p>为什么协程比线程轻量？</p>
<ul>
<li>go协程调用跟切换比线程效率高<ul>
<li>线程并发执行流程: 线程是内核对外提供的服务，应用程序可以通过系统调用让内核启动线程，由内核来负责线程调度和切换。线程在等待IO操作时线程变为unrunnable状态会触发上下文切换。现代操作系统一般都采用抢占式调度，上下文切换一般发生在时钟中断和系统调用返回前，调度器计算当前线程的时间片，如果需要切换就从运行队列中选出一个目标线程，保存当前线程的环境，并且恢复目标线程的运行环境，最典型的就是切换ESP指向目标线程内核堆栈，将EIP指向目标线程上次被调度出时的指令地址</li>
<li>go协程并发执行流程：不依赖操作系统和其提供的线程，golang自己实现的CSP并发模型实现：M, P, G .go协程也叫用户态线程，协程之间的切换发生在用户态。在用户态没有时钟中断，系统调用等机制,因此效率高</li>
</ul>
</li>
<li>go协程占用内存少<ul>
<li>执行go协程只需要极少的栈内存（大概是4～5KB），默认情况下，线程栈的大小为1MB。goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行</li>
<li>因此协程和线程一样共享堆，不共享栈，协程由用户态下面的轻量级线程</li>
</ul>
</li>
</ul>
<h4 id="15-协程和线程和进程的区别"><a href="#15-协程和线程和进程的区别" class="headerlink" title="15. 协程和线程和进程的区别"></a><font color=DarkOrange>15. 协程和线程和进程的区别</font></h4><ul>
<li>进程：是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。<br>每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全</li>
<li>线程：是进程的一个实体，线程是内核态，而且是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。线程自己基本上不拥有系统资源，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据</li>
<li>协程：是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快</li>
</ul>
<h4 id="16-G0的作用"><a href="#16-G0的作用" class="headerlink" title="16. G0的作用"></a><font color=DarkOrange>16. G0的作用</font></h4><ul>
<li>在Go中g0作为一个特殊的goroutine，为scheduler执行调度循环提供了场地（栈）。对于一个线程来说，g0总是它第一个创建的 goroutine。之后，它会不断地寻找其他普通的goroutine来执行，直到进程退出</li>
<li>当需要执行一些任务，且不想扩栈时，就可以用到 g0了，因为g0的栈比较大</li>
<li>g0 其他的一些“职责”有：创建 <code>goroutine</code>、<code>deferproc</code> 函数里新建 <code>_defer</code>、垃圾回收相关的工作（例如stw、扫描goroutine的执行栈、一些标识清扫的工作、栈增长）等等</li>
</ul>
<h4 id="17-Golang的内存模型中为什么小对象多了会造成GC压力"><a href="#17-Golang的内存模型中为什么小对象多了会造成GC压力" class="headerlink" title="17. Golang的内存模型中为什么小对象多了会造成GC压力"></a><font color=DarkOrange>17. Golang的内存模型中为什么小对象多了会造成GC压力</font></h4><p>通常小对象过多会导致GC三色法消耗过多的CPU。优化思路：减少对象分配</p>
<h4 id="18-Go的对象在内存中是怎样分配的"><a href="#18-Go的对象在内存中是怎样分配的" class="headerlink" title="18. Go的对象在内存中是怎样分配的"></a><font color=DarkOrange>18. Go的对象在内存中是怎样分配的</font></h4><p>Go中的内存分类并不像TCMalloc那样分成小、中、大对象，但是它的小对象里又细分了一个Tiny对象，Tiny对象指大小在1Byte到16Byte之间并且不包含指针的对象。小对象和大对象只用大小划定，无其他区分</p>
<p>大对象指大小大于32kb，小对象是在mcache中分配的，而大对象是直接从mheap分配的，从小对象的内存分配看起</p>
<p>Go的内存分配原则：</p>
<ul>
<li>Go在程序启动的时候，会先向操作系统申请一块内存（注意这时还只是一段虚拟的地址空间，并不会真正地分配内存），切成小块后自己进行管理</li>
<li>申请到的内存块被分配了三个区域，在X64上分别是512MB，16GB，512GB大小</li>
<li>arena区域就是我们所谓的堆区，Go动态分配的内存都是在这个区域，它把内存分割成8KB大小的页，一些页组合起来称为mspan</li>
<li>bitmap区域标识arena区域哪些地址保存了对象，并且用4bit标志位表示对象是否包含指针、GC标记信息。bitmap中一个byte大小的内存对应arena区域中4个指针大小（指针大小为 8B ）的内存，所以bitmap区域的大小是<code>512GB/(4*8B)=16GB</code></li>
<li>bitmap的高地址部分指向arena区域的低地址部分，这里bitmap的地址是由高地址向低地址增长的</li>
<li>spans区域存放mspan（是一些arena分割的页组合起来的内存管理基本单元，后文会再讲）的指针，每个指针对应一页，所以spans区域的大小就是<code>512GB/8KB*8B=512MB</code></li>
<li>除以8KB是计算arena区域的页数，而最后乘以8是计算spans区域所有指针的大小。创建mspan的时候，按页填充对应的spans区域，在回收object时，根据地址很容易就能找到它所属的mspan</li>
</ul>
<h4 id="19-栈的内存是怎么分配的"><a href="#19-栈的内存是怎么分配的" class="headerlink" title="19. 栈的内存是怎么分配的"></a><font color=DarkOrange>19. 栈的内存是怎么分配的</font></h4><p>栈和堆只是虚拟内存上2块不同功能的内存区域：</p>
<ul>
<li>栈在高地址，从高地址向低地址增长</li>
<li>堆在低地址，从低地址向高地址增长</li>
</ul>
<p>栈和堆相比优势：</p>
<ul>
<li>栈的内存管理简单，分配比堆上快。</li>
<li>栈的内存不需要回收，而堆需要，无论是主动free，还是被动的垃圾回收，这都需要花费额外的CPU。</li>
<li>栈上的内存有更好的局部性，堆上内存访问就不那么友好了，CPU访问的2块数据可能在不同的页上，CPU访问数据的时间可能就上去了</li>
</ul>
<h4 id="20-堆内存管理怎么分配的"><a href="#20-堆内存管理怎么分配的" class="headerlink" title="20. 堆内存管理怎么分配的"></a><font color=DarkOrange>20. 堆内存管理怎么分配的</font></h4><ul>
<li>通常在Golang中，当我们谈论内存管理的时候，主要是指堆内存的管理，因为栈的内存管理不需要程序去操心</li>
<li>堆内存管理中主要是三部分, 1.分配内存块，2.回收内存块, 3.组织内存块</li>
<li>一个内存块包含了3类信息：元数据、用户数据和对齐字段，内存对齐是为了提高访问效率。申请内存的时候，就需要进行内存对齐</li>
<li>释放内存实质是把使用的内存块从链表中取出来，然后标记为未使用，当分配内存块的时候，可以从未使用内存块中有先查找大小相近的内存块，如果找不到，再从未分配的内存中分配内存</li>
<li>因为随着内存不断的申请和释放，内存上会存在大量的碎片，降低内存的使用率。为了解决内存碎片，可以将2个连续的未使用的内存块合并，减少碎片</li>
</ul>
<h4 id="21-在Go函数中为什么会发生内存泄露"><a href="#21-在Go函数中为什么会发生内存泄露" class="headerlink" title="21. 在Go函数中为什么会发生内存泄露"></a><font color=DarkOrange>21. 在Go函数中为什么会发生内存泄露</font></h4><p>同上13</p>
<h4 id="22-Go语言的栈空间管理是怎么样的"><a href="#22-Go语言的栈空间管理是怎么样的" class="headerlink" title="22. Go语言的栈空间管理是怎么样的"></a><font color=DarkOrange>22. Go语言的栈空间管理是怎么样的</font></h4><p>Go语言的运行环境（runtime）会在goroutine需要的时候动态地分配栈空间，而不是给每个goroutine分配固定大小的内存空间。这样就避免了需要程序员来决定栈的大小</p>
<p>分块式的栈是最初Go语言组织栈的方式。当创建一个goroutine的时候，它会分配一个8KB的内存空间来给goroutine的栈使用。我们可能会考虑当这8KB的栈空间被用完的时候该怎么办？</p>
<p>为了处理这种情况，每个Go函数的开头都有一小段检测代码。这段代码会检查我们是否已经用完了分配的栈空间。如果是的话，它会调用<code>morestack</code>函数。<code>morestack</code>函数分配一块新的内存作为栈空间，并且在这块栈空间的底部填入各种信息（包括之前的那块栈地址）。在分配了这块新的栈空间之后，它会重试刚才造成栈空间不足的函数。这个过程叫做栈分裂（stack split）</p>
<p>在新分配的栈底部，还插入了一个叫做<code>lessstack</code>的函数指针。这个函数还没有被调用。这样设置是为了从刚才造成栈空间不足的那个函数返回时做准备的。当我们从那个函数返回时，它会跳转到<code>lessstack</code>。<code>lessstack</code>函数会查看在栈底部存放的数据结构里的信息，然后调整栈指针（stack pointer）。这样就完成了从新的栈块到老的栈块的跳转。接下来，新分配的这个块栈空间就可以被释放掉了</p>
<h4 id="23-Go中的逃逸分析是什么"><a href="#23-Go中的逃逸分析是什么" class="headerlink" title="23. Go中的逃逸分析是什么"></a><font color=DarkOrange>23. Go中的逃逸分析是什么</font></h4><p>在Go中逃逸分析是一种确定指针动态范围的方法，可以分析在程序的哪些地方可以访问到指针。它涉及到指针分析和形状分析</p>
<p>当一个变量(或对象)在子程序中被分配时，一个指向变量的指针可能逃逸到其它执行线程中，或者去调用子程序。如果使用尾递归优化（通常在函数编程语言中是需要的），对象也可能逃逸到被调用的子程序中。 如果一个子程序分配一个对象并返回一个该对象的指针，该对象可能在程序中的任何一个地方被访问到——这样指针就成功“逃逸”了</p>
<p>如果指针存储在全局变量或者其它数据结构中，它们也可能发生逃逸，这种情况是当前程序中的指针逃逸。 逃逸分析需要确定指针所有可以存储的地方，保证指针的生命周期只在当前进程或线程中</p>
<p>导致内存逃逸的情况比较多，有些可能还是官方未能够实现精确的分析逃逸情况的 bug，通常来讲就是如果变量的作用域不会扩大并且其行为或者大小能够在编译的时候确定，一般情况下都是分配到栈上，否则就可能发生内存逃逸分配到堆上</p>
<p>内存逃逸的五种情况：</p>
<ol>
<li>发送指针的指针或值包含了指针到<code>channel</code> 中，由于在编译阶段无法确定其作用域与传递的路径，所以一般都会逃逸到堆上分配</li>
<li>slices 中的值是指针的指针或包含指针字段。一个例子是类似<code>[]*string</code> 的类型。这总是导致 slice 的逃逸。即使切片的底层存储数组仍可能位于堆栈上，数据的引用也会转移到堆中。</li>
<li>slice 由于 append 操作超出其容量，因此会导致 slice 重新分配。这种情况下，由于在编译时 slice 的初始大小的已知情况下，将会在栈上分配。如果 slice 的底层存储必须基于仅在运行时数据进行扩展，则它将分配在堆上</li>
<li>调用接口类型的方法。接口类型的方法调用是动态调度，实际使用的具体实现只能在运行时确定。考虑一个接口类型为 io.Reader 的变量 r。对 r.Read(b) 的调用将导致 r 的值和字节片b的后续转义并因此分配到堆上</li>
<li>尽管能够符合分配到栈的场景，但是其大小不能够在在编译时候确定的情况，也会分配到堆上</li>
</ol>
<p>有效的避免上述的五种逃逸的情况，就可以避免内存逃逸</p>
<h4 id="24-Go函数返回局部变量的指针是否安全"><a href="#24-Go函数返回局部变量的指针是否安全" class="headerlink" title="24. Go函数返回局部变量的指针是否安全"></a><font color=DarkOrange>24. Go函数返回局部变量的指针是否安全</font></h4><p>在Go中是安全的，Go编译器将会对每个局部变量进行逃逸分析。如果发现局部变量的作用域超出该函数，则不会将内存分配在栈上，而是分配在堆上</p>
<h4 id="25-Golang中除了加Mutex锁以外还有哪些方式安全读写共享变量"><a href="#25-Golang中除了加Mutex锁以外还有哪些方式安全读写共享变量" class="headerlink" title="25. Golang中除了加Mutex锁以外还有哪些方式安全读写共享变量"></a><font color=DarkOrange>25. Golang中除了加Mutex锁以外还有哪些方式安全读写共享变量</font></h4><p>Golang中Goroutine可以通过Channel进行安全读写共享变量，还可以通过原子性操作进行</p>
<h4 id="26-Go中的锁有哪些"><a href="#26-Go中的锁有哪些" class="headerlink" title="26. Go中的锁有哪些"></a><font color=DarkOrange>26. Go中的锁有哪些</font></h4><p>Go中的三种锁包括：</p>
<ul>
<li>互斥锁</li>
<li>读写锁</li>
<li>sync.Map安全锁</li>
</ul>
<ol>
<li><p>互斥锁</p>
<p>Go并发程序对共享资源进行访问控制的主要手段，由标准库代码包中sync中的Mutex结构体表示，sync.Mutex包中的类型只有两个公开的指针方法Lock和Unlock</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Locker表示可以锁定和解锁的对象。</span></span><br><span class="line"> <span class="keyword">type</span> Locker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Lock()</span><br><span class="line">    Unlock()</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 锁定当前的互斥量</span></span><br><span class="line"> <span class="comment">// 如果锁已被使用，则调用goroutine</span></span><br><span class="line"> <span class="comment">// 阻塞直到互斥锁可用。</span></span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="params">(m *Mutex)</span></span> Lock() </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 对当前互斥量进行解锁</span></span><br><span class="line"> <span class="comment">// 如果在进入解锁时未锁定m，则为运行时错误。</span></span><br><span class="line"> <span class="comment">// 锁定的互斥锁与特定的goroutine无关。</span></span><br><span class="line"> <span class="comment">// 允许一个goroutine锁定Mutex然后安排另一个goroutine来解锁它。</span></span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="params">(m *Mutex)</span></span> Unlock()</span><br></pre></td></tr></table></figure>

<p>如果对一个已经上锁的对象再次上锁，那么就会导致该锁定操作被阻塞，直到该互斥锁回到被解锁状态。互斥锁锁定操作的逆操作并不会导致协程阻塞，但是有可能导致引发一个无法恢复的运行时的panic，比如对一个未锁定的互斥锁进行解锁时就会发生panic。避免这种情况的最有效方式就是使用defer</p>
<hr>
</li>
<li><p>读写锁</p>
<p>读写锁是针对读写操作的互斥锁，可以分别针对读操作与写操作进行锁定和解锁操作 。读写锁的访问控制规则如下：</p>
<ul>
<li>多个写操作之间是互斥的</li>
<li>写操作与读操作之间也是互斥的</li>
<li>多个读操作之间不是互斥的</li>
</ul>
<p>在这样的控制规则下，读写锁可以大大降低性能损耗。sync中的RWMutex有以下几种方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对读操作的锁定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span></span> RLock()</span><br><span class="line"></span><br><span class="line"><span class="comment">//对读操作的解锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span></span> RUnlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">//对写操作的锁定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span></span> Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment">//对写操作的解锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span></span> Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个实现了sync.Locker接口类型的值，实际上是回调rw.RLock and rw.RUnlock.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span></span> RLocker() Locker</span><br></pre></td></tr></table></figure>

<ul>
<li>若对一个未被写锁定的读写锁进行写解锁，就会引发一个不可恢复的panic，同理对一个未被读锁定的读写锁进行读写锁也会如此。</li>
<li>由于读写锁控制下的多个读操作之间不是互斥的，因此对于读解锁更容易被忽视。对于同一个读写锁，添加多少个读锁定，就必要有等量的读解锁，这样才能其他协程有机会进行操作</li>
<li>因此Go中读写锁，在多个读线程可以同时访问共享数据,写线程必须等待所有读线程都释放锁以后，才能取得锁</li>
<li>同样的，读线程必须等待写线程释放锁后，才能取得锁，也就是说读写锁要确保的是如下互斥关系，可以同时读，但是读-写，写-写都是互斥的</li>
</ul>
<hr>
</li>
<li><p>sync.Map安全锁</p>
<p>golang中的sync.Map是并发安全的，其实也就是sync包中golang自定义的一个名叫Map的结构体</p>
<ul>
<li>Delete 方法</li>
<li>Store 方法</li>
<li>Load方法</li>
</ul>
<p>sync.Map是通过冗余的两个数据结构(read、dirty)，实现性能的提升。为了提升性能，load、delete、store等操作尽量使用只读的read；为了提高read的key击中概率，采用动态调整，将dirty数据提升为read；对于数据的删除，采用延迟标记删除法，只有在提升dirty的时候才删除</p>
</li>
</ol>
<h4 id="27-Go中的锁如何实现"><a href="#27-Go中的锁如何实现" class="headerlink" title="27. Go中的锁如何实现"></a><font color=DarkOrange>27. Go中的锁如何实现</font></h4><p>锁是一种同步机制，用于在多任务环境中限制资源的访问，以满足互斥需求</p>
<p>go源码sync包中经常用于同步操作的方式：</p>
<ul>
<li>原子操作</li>
<li>互斥锁</li>
<li>读写锁</li>
<li>waitgroup</li>
</ul>
<p>互斥锁的数据结构：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A Mutex is a mutual exclusion lock.</span></span><br><span class="line"><span class="comment">// The zero value for a Mutex is an unlocked mutex.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A Mutex must not be copied after first use.</span></span><br><span class="line"><span class="keyword">type</span> Mutex <span class="keyword">struct</span> &#123;</span><br><span class="line">    state <span class="type">int32</span>   <span class="comment">// 互斥锁上锁状态枚举值如下所示</span></span><br><span class="line">    sema  <span class="type">uint32</span>  <span class="comment">// 信号量，向处于Gwaitting的G发送信号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    mutexLocked = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 值为1，表示在state中由低向高第1位，意义：锁是否可用,0可用，1不可用,锁定中</span></span><br><span class="line">    mutexWoken   <span class="comment">// 值为2，表示在state中由低向高第2位，意义：mutex是否被唤醒</span></span><br><span class="line">    mutexStarving <span class="comment">// 当前的互斥锁进入饥饿状态；</span></span><br><span class="line">    mutexWaiterShift = <span class="literal">iota</span>  <span class="comment">//值为2，表示state中统计阻塞在此mutex上goroutine的数目需要位移的偏移量</span></span><br><span class="line">    starvationThresholdNs = <span class="number">1e6</span> </span><br></pre></td></tr></table></figure>

<p>state和sema两个加起来只占 8 字节空间的结构体表示了 Go 语言中的互斥锁</p>
<p>在默认情况下，互斥锁的所有状态位都是 0，int32 中的不同位分别表示了不同的状态：</p>
<ul>
<li>mutexLocked 表示互斥锁的锁定状态；</li>
<li>mutexWoken 表示从正常模式被从唤醒；</li>
<li>mutexStarving 当前的互斥锁进入饥饿状态</li>
<li>waitersCount 当前互斥锁上等待的 Goroutine 个数</li>
</ul>
<p>sync.Mutex 有两种模式，正常模式和饥饿模式：</p>
<ul>
<li>正常模式：锁的等待者会按照先进先出的顺序获取锁。但是刚被唤起的 <code>Goroutine</code> 与新创建的 <code>Goroutine</code> 竞争时，大概率会获取不到锁，为了减少这种情况的出现，一旦 Goroutine 超过 1ms 没有获取到锁，它就会将当前互斥锁切换饥饿模式，防止部分 Goroutine 被饿死</li>
<li>饥饿模式：饥饿模式是在 Go 语言 1.9 版本引入的优化的，引入的目的是保证互斥锁的公平性（Fairness）。在饥饿模式中，互斥锁会直接交给等待队列最前面的 Goroutine。新的 Goroutine 在该状态下不能获取锁、也不会进入自旋状态，它们只会在队列的末尾等待。如果一个 Goroutine 获得了互斥锁并且它在队列的末尾或者它等待的时间少于 1ms，那么当前的互斥锁就会被切换回正常模式</li>
</ul>
<p>相比于饥饿模式，正常模式下的互斥锁能够提供更好地性能，饥饿模式的能避免 Goroutine 由于陷入等待无法获取锁而造成的高尾延时</p>
<h4 id="28-Go中数据竞争问题怎么解决"><a href="#28-Go中数据竞争问题怎么解决" class="headerlink" title="28. Go中数据竞争问题怎么解决"></a><font color=DarkOrange>28. Go中数据竞争问题怎么解决</font></h4><ul>
<li>数据竞争问题可以使用互斥锁sync.Mutex，或者也可以通过CAS无锁并发解决</li>
<li>其中使用同步访问共享数据或者CAS无锁并发是处理数据竞争的一种有效的方法</li>
<li>golang在1.1之后引入了竞争检测机制，可以使用 <code>go run -race</code> 或者 <code>go build -race</code>来进行静态检测。其在内部的实现是，开启多个协程执行同一个命令， 并且记录下每个变量的状态</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> test -race mypkg    <span class="comment">// 测试包</span></span><br><span class="line"><span class="keyword">go</span> run -race mysrc.<span class="keyword">go</span>  <span class="comment">// 编译和运行程序</span></span><br><span class="line"><span class="keyword">go</span> build -race mycmd   <span class="comment">// 构建程序</span></span><br><span class="line"><span class="keyword">go</span> install -race mypkg <span class="comment">// 安装程序</span></span><br></pre></td></tr></table></figure>

<h4 id="29-Go中CAS是怎么回事"><a href="#29-Go中CAS是怎么回事" class="headerlink" title="29. Go中CAS是怎么回事"></a><font color=DarkOrange>29. Go中CAS是怎么回事</font></h4><p>CAS算法（Compare And Swap），是原子操作的一种，CAS算法是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。可用于在多线程编程中实现不被打断的数据交换操作，从而避免多线程同时改写某一数据时由于执行顺序不确定性以及中断的不可预知性产生的数据不一致问题</p>
<p>该操作通过将内存中的值与指定数据进行比较，当数值一样时将内存中的数据替换为新的值</p>
<p>Go中的CAS操作是借用了CPU提供的原子性指令来实现。CAS操作修改共享变量时候不需要对共享变量加锁，而是通过类似乐观锁的方式进行检查，本质还是不断的占用CPU 资源换取加锁带来的开销（比如上下文切换开销）</p>
<p>Go中CAS操作可以有效的减少使用锁所带来的开销，但是需要注意在高并发下这是使用cpu资源做交换的</p>
<h4 id="30-Go主协程如何等其余协程完再操作"><a href="#30-Go主协程如何等其余协程完再操作" class="headerlink" title="30. Go主协程如何等其余协程完再操作"></a><font color=DarkOrange>30. Go主协程如何等其余协程完再操作</font></h4><ul>
<li>Go提供了更简单的方法——使用<code>sync.WaitGroup</code>。<code>WaitGroup</code>，就是用来等待一组操作完成的。<code>WaitGroup</code>内部实现了一个计数器，用来记录未完成的操作个数</li>
<li>它提供了三个方法，<code>Add()</code>用来添加计数。<code>Done()</code>用来在操作结束时调用，使计数减一。<code>Wait()</code>用来等待所有的操作结束，即计数变为0，该函数会在计数不为0时等待，在计数为0时立即返回</li>
</ul>
<h4 id="31-Context包的用途是什么"><a href="#31-Context包的用途是什么" class="headerlink" title="31. Context包的用途是什么"></a><font color=DarkOrange>31. Context包的用途是什么</font></h4><p>在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务。用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速退出，然后系统才能释放这些 goroutine 占用的资源</p>
<p>在Google 内部，我们开发了 Context 包，专门用来简化 对于处理单个请求的多个 goroutine 之间与请求域的数据、取消信号、截止时间等相关操作，这些操作可能涉及多个 API 调用</p>
<p>Context中的方法：</p>
<ul>
<li>Done会返回一个channel，当该context被取消的时候，该channel会被关闭，同时对应的使用该context的routine也应该结束并返回</li>
<li>Context中的方法是协程安全的，这也就代表了在父routine中创建的context，可以传递给任意数量的routine并让他们同时访问</li>
<li>Deadline会返回一个超时时间，routine获得了超时时间后，可以对某些io操作设定超时时间</li>
<li>Value可以让routine共享一些数据，当然获得数据是协程安全的</li>
</ul>
<p>这里需要注意一点的是在goroutine中使用context包的时候，通常我们需要在goroutine中新创建一个上下文的context，原因是：如果直接传递外部context到协层中，一个请求可能在主函数中已经结束，在goroutine中如果还没有结束的话，会直接导致goroutine中的运行的被取消</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">   _, ctx, _ := log.FromContextOrNew(context.Background(), <span class="literal">nil</span>)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>

<p>context.Background函数的返回值是一个空的context，经常作为树的根结点，它一般由接收请求的第一个routine创建，不能被取消、没有值、也没有过期时间</p>
<p>Context上下文数据的存储就像一个树，每个结点只存储一个<code>key/value</code>对。WithValue()保存一个<code>key/value</code>对，它将父context嵌入到新的子context，并在节点中保存了<code>key/value</code>数据。Value()查询key对应的value数据，会从当前context中查询，如果查不到，会递归查询父context中的数据</p>
<p>值得注意的是，context中的上下文数据并不是全局的，它只查询本节点及父节点们的数据，不能查询兄弟节点的数据</p>
<p>Context 使用原则：</p>
<ul>
<li>不要把Context放在结构体中，要以参数的方式传递</li>
<li>以Context作为参数的函数方法，应该把Context作为第一个参数，放在第一位</li>
<li>给一个函数方法传递Context的时候，不要传递nil，如果不知道传递什么，就使用context.TODO</li>
<li>Context的Value相关方法应该传递必须的数据，不要什么数据都使用这个传递</li>
<li>Context是线程安全的，可以放心的在多个goroutine中传递</li>
</ul>
<h4 id="32-Go中对nil的Slice和空Slice的处理是一致的吗"><a href="#32-Go中对nil的Slice和空Slice的处理是一致的吗" class="headerlink" title="32. Go中对nil的Slice和空Slice的处理是一致的吗"></a><font color=DarkOrange>32. Go中对nil的Slice和空Slice的处理是一致的吗</font></h4><p>首先Go的JSON 标准库对 <code>nil slice</code> 和 空 <code>slice</code> 的处理是不一致</p>
<p>通常错误的用法，会报数组越界的错误，因为只是声明了slice，却没有给实例化的对象。nil的slice定义如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="type">int</span></span><br></pre></td></tr></table></figure>

<p>此时slice的值是nil，这种情况可以用于需要返回slice的函数，当函数出现异常的时候，保证函数依然会有nil的返回值</p>
<hr>
<p>空的slice是指slice不为nil，但是slice没有值，slice的底层的空间是空的，空的slice定义如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">0</span>）</span><br><span class="line">slice := []<span class="type">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>当我们查询或者处理一个空的列表的时候，这非常有用，它会告诉我们返回的是一个列表，但是列表内没有任何值</p>
<p><strong>总结：</strong> nil的slice和空的slice是不同的东西，需要我们加以区分</p>
<h4 id="33-Go的Slice如何扩容"><a href="#33-Go的Slice如何扩容" class="headerlink" title="33. Go的Slice如何扩容"></a><font color=DarkOrange>33. Go的Slice如何扩容</font></h4><h5 id="33-1-数组Array和切片Slice"><a href="#33-1-数组Array和切片Slice" class="headerlink" title="33.1 数组Array和切片Slice"></a><font color=DarkOrange>33.1 数组Array和切片Slice</font></h5><ol>
<li>数组和切片都是用来存储相同数据类型的数据结构</li>
<li>数组在初始化或者是定义的时候就必须指明长度，或者初始化的时候使用…自动推导其数组的长度，数组初始化后其长度就是固定不变的；切片在初始化或定义的时候无需声明其长度，可以往切片里追加元素，追加元素可能导致切片扩容</li>
<li>数组和切片都可以通过内置函数<code>len</code>求元素个数，都可以通过下标索引获取相对应的元素值，都可以通过<code>for range</code>进行遍历</li>
<li>函数参数：<strong>数组</strong>作为函数参数时，必须指定参数数组的大小，且传入的数组大小必须与指定的大小一致，数组为按值传递的，函数内对数组的值的改变不影响初始数组；<strong>切片</strong>作为函数参数传递时为按引用传递的，函数内对切片内元素的修改将导致函数外的值也发生改变，不过由于传入函数的是一个指针的副本，所以对该指针的修改不会导致原来的指针的变化（例如append函数不会改变原来的切片的值）</li>
</ol>
<hr>
<ul>
<li>slice是Go中的一种基本的数据结构，使用这种结构可以用来管理数据集合。但是slice本身并不是动态数据或者数组指针。slice常见的操作有 reslice、append、copy</li>
<li>slice自身并不是动态数组或者数组指针。它内部实现的数据结构通过指针引用底层数组，设定相关属性将数据读写操作限定在指定的区域内。slice本身是一个只读对象，其工作机制类似数组指针的一种封装</li>
<li>slice是对数组一个连续片段的引用，所以切片是一个引用类型。这个片段可以是整个数组，或者是由起始和终止索引标识的一些项的子集</li>
<li>slice的结构体由3部分构成，Pointer 是指向一个数组的指针，len 代表当前切片的长度，cap 是当前切片的容量。cap 总是大于等于 len 的</li>
</ul>
<p>通常我们在对slice进行append等操作时，可能会造成slice的自动扩容</p>
<ul>
<li><strong>1.18版本之前：</strong> 当原slice容量小于1024的时候，新slice容量变成原来的2倍；原slice容量超过1024，新slice容量变成原来的1.25倍</li>
<li><strong>1.18版本之后：</strong> 当原slice容量(oldcap)小于256的时候，新slice(newcap)容量为原来的2倍；原slice容量超过256，新slice容量newcap &#x3D; oldcap+(oldcap+3*256)&#x2F;4</li>
<li><strong>最后：</strong> 扩容后的容量并不一定就是按照以上公式计算的结果，容量可能会存在小的差异，主要原因是扩容后会有内存对齐，导致容量不是百分百按照公式计算的结果。如果扩容之后，还没有触及原数组的容量，那么，切片中的指针指向的位置，就还是原数组，如果扩容之后，超过了原数组的容量，那么，Go就会开辟一块新的内存，把原来的值拷贝过来，这种情况丝毫不会影响到原数组</li>
</ul>
<h4 id="34-Go的Struct能不能比较"><a href="#34-Go的Struct能不能比较" class="headerlink" title="34. Go的Struct能不能比较"></a><font color=DarkOrange>34. Go的Struct能不能比较</font></h4><ul>
<li>相同struct类型的可以比较</li>
<li>不同struct类型的不可以比较，编译都不过，类型不匹配</li>
</ul>
<h4 id="35-Go中的map的实现"><a href="#35-Go中的map的实现" class="headerlink" title="35. Go中的map的实现"></a><font color=DarkOrange>35. Go中的map的实现</font></h4><p>Go中Map是一个KV对集合。底层使用<code>hash table</code>，用链表来解决冲突 ，出现冲突时，不是每一个Key都申请一个结构通过链表串起来，而是以bmap为最小粒度挂载，一个bmap可以放8个kv</p>
<p>在哈希函数的选择上，会在程序启动时，检测 cpu 是否支持 <code>aes</code>，如果支持，则使用<code>aes hash</code>，否则使用<code>memhash</code></p>
<p>每个map的底层结构是hmap，是有若干个结构为bmap的bucket组成的数组。每个bucket底层都采用链表结构</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    count     <span class="type">int</span>    <span class="comment">// 元素个数</span></span><br><span class="line">    flags     <span class="type">uint8</span>  <span class="comment">// 用来标记状态</span></span><br><span class="line">    B         <span class="type">uint8</span>  <span class="comment">// 扩容常量相关字段B是buckets数组的长度的对数 2^B</span></span><br><span class="line">    noverflow <span class="type">uint16</span> <span class="comment">// noverflow是溢出桶的数量，当B&lt;16时，为精确值,当B&gt;=16时，为估计值                       </span></span><br><span class="line">    hash0     <span class="type">uint32</span> <span class="comment">// 是哈希的种子，它能为哈希函数的结果引入随机性，这个值在创建哈希表时确定，并在调用哈希函数时作为参数传入</span></span><br><span class="line"></span><br><span class="line">    buckets    unsafe.Pointer <span class="comment">// 桶的地址 </span></span><br><span class="line">    oldbuckets unsafe.Pointer <span class="comment">// 旧桶的地址，用于扩容 </span></span><br><span class="line">    nevacuate  <span class="type">uintptr</span>        <span class="comment">// 搬迁进度，扩容需要将旧数据搬迁至新数据，这里是利用指针来比较判断有没有迁移 </span></span><br><span class="line"></span><br><span class="line">    extra *mapextra <span class="comment">// 用于扩容的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mapextra <span class="keyword">struct</span> &#123;</span><br><span class="line">    overflow    *[]*bmap</span><br><span class="line">    oldoverflow *[]*bmap</span><br><span class="line">    <span class="comment">// nextOverflow holds a pointer to a free overflow bucket.</span></span><br><span class="line">    nextOverflow *bmap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A bucket for a Go map.</span></span><br><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    tophash [bucketCnt]<span class="type">uint8</span>  <span class="comment">// tophash用于记录8个key哈希值的高8位，这样在寻找对应key的时候可以更快，不必每次都对key做全等判断</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际上编辑期间会动态生成一个新的结构体</span></span><br><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    topbits  [<span class="number">8</span>]<span class="type">uint8</span></span><br><span class="line">    keys     [<span class="number">8</span>]keytype</span><br><span class="line">    values   [<span class="number">8</span>]valuetype</span><br><span class="line">    pad      <span class="type">uintptr</span></span><br><span class="line">    overflow <span class="type">uintptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bmap 就是我们常说的“桶”，桶里面会最多装 8 个 key，这些 key之所以会落入同一个桶，是因为它们经过哈希计算后，哈希结果是“一类”的，关于key的定位我们在map的查询和赋值中详细说明</p>
<p>在桶内，又会根据key计算出来的hash值的高8位来决定 key到底落入桶内的哪个位置（一个桶内最多有8个位置)</p>
<p>当map的key和value都不是指针，并且 size都小于128字节的情况下，会把bmap标记为不含指针，这样可以避免gc时扫描整个hmap</p>
<p>bmap其实有一个overflow的字段，是指针类型的，破坏了 bmap 不含指针的设想，这时会把overflow移动到 hmap的extra 字段来</p>
<p>这样随着哈希表存储的数据逐渐增多，我们会扩容哈希表或者使用额外的桶存储溢出的数据，不会让单个桶中的数据超过 8 个，不过溢出桶只是临时的解决方案，创建过多的溢出桶最终也会导致哈希的扩容</p>
<h4 id="36-Go中的map如何实现顺序读取"><a href="#36-Go中的map如何实现顺序读取" class="headerlink" title="36. Go中的map如何实现顺序读取"></a><font color=DarkOrange>36. Go中的map如何实现顺序读取</font></h4><p>Go中map如果要实现顺序读取的话，先把map中的key添加到数组（array）或切片（slice）中，然后通过sort包对数组或切片进行排序，最后在遍历数组或切片的时候将map中key以及对应的value取出来</p>
<h4 id="37-Go中new和make的区别"><a href="#37-Go中new和make的区别" class="headerlink" title="37. Go中new和make的区别"></a><font color=DarkOrange>37. Go中new和make的区别</font></h4><ul>
<li>值类型：int，float，bool，string，struct和array。变量直接存储值，分配栈区的内存空间，这些变量所占据的空间在函数被调用完后会自动释放</li>
<li>引用类型：slice，map，chan和值类型对应的指针。变量存储的是一个地址（或者理解为指针），指针指向内存中真正存储数据的首地址。内存通常在堆上分配，通过GC回收</li>
<li><strong>注意：</strong> 对于引用类型的变量，我们不仅要声明变量，更重要的是，我们得手动为它分配空间</li>
</ul>
<ol>
<li>new该方法的参数要求传入一个类型，而不是一个值，它会申请一个该类型大小的内存空间，并会初始化为对应的零值，返回指向该内存空间的一个指针。new只用于分配内存，返回一个指向地址的<strong>指针</strong>。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&amp;T{}</li>
<li>make也是用于内存分配，但是和new不同，只用来引用对象slice、map和channel的内存创建，它返回的类型就是类型本身，而不是它们的指针类型。make只可用于<strong>slice</strong>，<strong>map</strong>，<strong>channel</strong>的初始化，返回的是<strong>引用</strong></li>
</ol>
<h4 id="38-Go的defer原理是什么"><a href="#38-Go的defer原理是什么" class="headerlink" title="38. Go的defer原理是什么"></a><font color=DarkOrange>38. Go的defer原理是什么</font></h4><p>defer意为延迟，在 golang 中用于延迟执行一个函数。它可以帮助我们处理容易忽略的问题，如资源释放、连接关闭等。但在实际使用过程中，有一些需要注意的地方：</p>
<ul>
<li>若函数中有多个 defer，其执行顺序为 先进后出，可以理解为栈</li>
<li>return 会做什么？Go 的函数返回值是通过堆栈返回的，return 语句不是原子操作，而是被拆成了两步<ul>
<li>给返回值赋值 (rval)</li>
<li>调用 defer 表达式</li>
<li>返回给调用函数(ret)</li>
</ul>
</li>
<li>若 defer 表达式有返回值，将会被丢弃。在实际开发中，defer 的使用经常伴随着闭包与匿名函数的使用</li>
</ul>
<h4 id="39-Go的select可以用于什么"><a href="#39-Go的select可以用于什么" class="headerlink" title="39. Go的select可以用于什么"></a><font color=DarkOrange>39. Go的select可以用于什么</font></h4><p>Golang 的 select 机制可以理解为是在语言层面实现了和 select, poll, epoll 相似的功能：监听多个描述符的读&#x2F;写等事件，一旦某个描述符就绪（一般是读或者写事件发生了），就能够将发生的事件通知给关心的应用程序去处理该事件。 golang 的 select 机制是，监听多个channel，每一个 case 是一个事件，可以是读事件也可以是写事件，随机选择一个执行，可以设置default，它的作用是：当监听的多个事件都阻塞住会执行default的逻辑</p>
<p>使用select case ,ok实现goroutine的优雅退出</p>
<ul>
<li>使用for-range退出</li>
<li>使用select case ,ok退出</li>
<li>使用退出通道退出</li>
</ul>
<h4 id="40-Go值接收者和指针接收者的区别"><a href="#40-Go值接收者和指针接收者的区别" class="headerlink" title="40. Go值接收者和指针接收者的区别"></a><font color=DarkOrange>40. Go值接收者和指针接收者的区别</font></h4><p>Go中的方法能给用户自定义的类型添加新的行为。它和函数的区别在于方法有一个接收者，给一个函数添加一个接收者，那么它就变成了方法。接收者可以是值接收者，也可以是指针接收者</p>
<p>在调用方法的时候，值类型既可以调用值接收者的方法，也可以调用指针接收者的方法；指针类型既可以调用指针接收者的方法，也可以调用值接收者的方法。也就是说，不管方法的接收者是什么类型，该类型的值和指针都可以调用，不必严格符合接收者的类型</p>
<table>
<thead>
<tr>
<th align="left">函数和方法</th>
<th align="left">值接收者</th>
<th align="left">指针接收者</th>
</tr>
</thead>
<tbody><tr>
<td align="left">值类型调用者</td>
<td align="left">方法会使用调用者的一个副本，类似于“传值”</td>
<td align="left">使用值的引用来调用方法，上例中，p1.GetAge() 实际上是 (&amp;p1).GetAge()</td>
</tr>
<tr>
<td align="left">指针类型调用者</td>
<td align="left">指针被解引用为值，上例中，p2.GetAge()实际上是 (*p1).GetAge()</td>
<td align="left">实际上也是“传值”，方法里的操作会影响到调用者，类似于指针传参，拷贝了一份指针</td>
</tr>
</tbody></table>
<p>如果实现了接收者是值类型的方法，会隐含地也实现了接收者是指针类型的方法</p>
<p>如果方法的接收者是值类型，无论调用者是对象还是对象指针，修改的都是对象的副本，不影响调用者；如果方法的接收者是指针类型，则调用者修改的是指针指向的对象本身</p>
<p>通常我们使用指针作为方法的接收者的理由：</p>
<ul>
<li>使用指针方法能够修改接收者指向的值。</li>
<li>可以避免在每次调用方法时复制该值，在值的类型为大型结构体时，这样做会更加高效</li>
</ul>
<p>因而，我们是使用值接收者还是指针接收者，不是由该方法是否修改了调用者（也就是接收者）来决定，而是应该基于该类型的本质</p>
<h4 id="41-Go中两个Nil可能不相等吗"><a href="#41-Go中两个Nil可能不相等吗" class="headerlink" title="41. Go中两个Nil可能不相等吗"></a><font color=DarkOrange>41. Go中两个Nil可能不相等吗</font></h4><p>Go中两个Nil可能不相等</p>
<p>接口(interface) 是对非接口值(例如指针，struct等)的封装，内部实现包含 2 个字段，类型 T 和 值 V。一个接口等于 nil，当且仅当 T 和 V 处于 unset 状态（T&#x3D;nil，V is unset）。两个接口值比较时，会先比较 T，再比较 V。接口值与非接口值比较时，会先将非接口值尝试转换为接口值，再比较</p>
<h4 id="42-Golang垃圾回收算法"><a href="#42-Golang垃圾回收算法" class="headerlink" title="42. Golang垃圾回收算法"></a><font color=DarkOrange>42. Golang垃圾回收算法</font></h4><p>Golang1.5版本后，采取的是“非分代的、非移动的、并发的、三色的”标记清除垃圾回收算法</p>
<p>垃圾回收算法分类：</p>
<ul>
<li>引用计数</li>
<li>标记-清除</li>
<li>分代回收</li>
</ul>
<p>golang的垃圾回收是基于标记清扫算法，这种算法需要进行 STW（stop the world)，这个过程就会导致程序是卡顿的，频繁的 GC 会严重影响程序性能，golang在此基础上进行了改进，通过三色标记清扫法与写屏障来减少STW的时间</p>
<p>gc的过程一共分为四个阶段：</p>
<ol>
<li>栈扫描（开始时STW） 所有对象最开始都是白色</li>
<li>从 root 开始找到所有可达对象，标记为灰色，放入待处理队列</li>
<li>遍历灰色对象队列，将其引用对象标记为灰色放入待处理队列，自身标记为黑色</li>
<li>清除（并发） 循环步骤3直到灰色队列为空为止，此时所有引用对象都被标记为黑色，所有不可达的对象依然为白色，白色的就是需要进行回收的对象</li>
</ol>
<p>三色标记法相对于普通标记清扫，减少了STW时间. 这主要得益于标记过程是 “on-the-fly” 的，在标记过程中是不需要STW的，它与程序是并发执行的，这就大大缩短了STW的时间</p>
<p>写屏障：</p>
<ul>
<li>当标记和程序是并发执行的，这就会造成一个问题. 在标记过程中，有新的引用产生，可能会导致误清扫</li>
<li>清扫开始前，标记为黑色的对象引用了一个新申请的对象，它肯定是白色的，而黑色对象不会被再次扫描，那么这个白色对象无法被扫描变成灰色、黑色，它就会最终被清扫，而实际它不应该被清扫</li>
<li>golang采用了写屏障，其作用就是为了避免这类误清扫问题. 写屏障即在内存写操作前，维护一个约束，从而确保清扫开始前，黑色的对象不能引用白色对象</li>
</ul>
<h4 id="43-GC的触发条件"><a href="#43-GC的触发条件" class="headerlink" title="43. GC的触发条件"></a><font color=DarkOrange>43. GC的触发条件</font></h4><ul>
<li>主动触发(手动触发)，通过调用<code>runtime.GC</code> 来触发<code>GC</code>，此调用阻塞式地等待当前<code>GC</code>运行完毕</li>
<li>被动触发，分为两种方式：<ul>
<li>使用系统监控，当超过两分钟没有产生任何<code>GC</code>时，强制触发 <code>GC</code></li>
<li>使用步调（Pacing）算法，其核心思想是控制内存增长的比例，当前内存分配达到一定比例则触发</li>
</ul>
</li>
</ul>
<h4 id="44-Go中的http包的实现原理"><a href="#44-Go中的http包的实现原理" class="headerlink" title="44. Go中的http包的实现原理"></a><font color=DarkOrange>44. Go中的http包的实现原理</font></h4><p>Golang中http包中处理 HTTP 请求主要跟两个东西相关：ServeMux 和 Handler</p>
<p>ServeMux 本质上是一个 HTTP 请求路由器（或者叫多路复用器，Multiplexor）。它把收到的请求与一组预先定义的 URL 路径列表做对比，然后在匹配到路径的时候调用关联的处理器（Handler）</p>
<p>处理器（Handler）负责输出HTTP响应的头和正文。任何满足了http.Handler接口的对象都可作为一个处理器。通俗的说，对象只要有个如下签名的ServeHTTP方法即可</p>
<p>Go 语言的 HTTP 包自带了几个函数用作常用处理器，比如<code>FileServer</code>，<code>NotFoundHandler</code> 和 <code>RedirectHandler</code></p>
<h4 id="45-Go中的defer函数使用下面的两种情况下结果是什么"><a href="#45-Go中的defer函数使用下面的两种情况下结果是什么" class="headerlink" title="45. Go中的defer函数使用下面的两种情况下结果是什么"></a><font color=DarkOrange>45. Go中的defer函数使用下面的两种情况下结果是什么</font></h4><p>无</p>
<hr>
<h4 id="1-Go项目性能测试、压测"><a href="#1-Go项目性能测试、压测" class="headerlink" title="1. Go项目性能测试、压测"></a><font color=DarkOrange>1. Go项目性能测试、压测</font></h4><ol>
<li>单元测试，以<code>Test</code>开头，在需要测试的包路径内执行<code>go test</code>对该包进行测试</li>
<li>性能测试，以<code>Benchmark</code>开头，<code>go test</code>默认不会执行压力测试函数，需要通过指定参数<code>-test.bench</code>来运行压力测试函数，<code>-test.bench</code>后跟正则表达式，如：<code>go -test.bench=&quot;.*&quot;</code>表示执行所有的压力测试函数</li>
<li>测试覆盖率，<code>cover</code>工具，<code>go test -coverprofile=cover.out</code>，在测试文件目录下运行并统计测试覆盖率</li>
<li>性能分析，<code>pprof</code>进行性能分析</li>
<li>使用<code>Jmeter</code>做<code>Web</code>性能测试</li>
</ol>
<p>API性能测试指标，主要有3个：</p>
<ol>
<li>并发数（<code>Concurrent</code>），是指某个时间范围内，同时正在使用系统的用户数</li>
<li>每秒查询数（<code>QPS</code>），是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，<code>QPS</code>&#x3D;并发数&#x2F;平均请求响应时间，在说<code>QPS</code>时需要指明多少并发数下的<code>QPS</code>，因为不同并发数下<code>QPS</code>是不同的</li>
<li>请求响应时间（<code>TTLB</code>），是从客户端发出请求到得到响应的整个时间</li>
</ol>
<hr>
<h4 id="2-下面2个函数分别输出什么结果"><a href="#2-下面2个函数分别输出什么结果" class="headerlink" title="2. 下面2个函数分别输出什么结果"></a><font color=DarkOrange>2. 下面2个函数分别输出什么结果</font></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A</span><span class="params">()</span></span> (a <span class="type">int</span>) &#123;</span><br><span class="line">	a = <span class="number">1</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		a += <span class="number">1</span></span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="comment">// 函数的返回值是(a int)</span></span><br><span class="line">	<span class="comment">// return语句不是原子操作，1.给返回值赋值，2.调用defer表达式，3.返回给调用函数</span></span><br><span class="line">	<span class="comment">// defer遵循先进后出，return时，先把100赋值给a，然后a执行了defer func()+1操作</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">B</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	a := <span class="number">1</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		a += <span class="number">1</span></span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="comment">// 函数返回的是int类型的数，没指定返回的一定是a，所以直接返回return后面的数字</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="built_in">println</span>(A()) <span class="comment">// 101</span></span><br><span class="line">	<span class="built_in">println</span>(B()) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h82o60shgaj312i0x2wn7.jpg" alt="image.png" style="zoom:55%;" /></div>

<h4 id="3-Go面向对象"><a href="#3-Go面向对象" class="headerlink" title="3. Go面向对象"></a><font color=DarkOrange>3. Go面向对象</font></h4><p>面向对象的三大基本特性：<strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong></p>
<ul>
<li>封装<ul>
<li>面向对象中的 “封装” 指的是可以隐藏对象的内部属性和实现细节，仅对外提供公开接口调用，这样子用户就不需要关注你内部是怎么实现的</li>
<li>在 Go 语言中的属性访问权限，通过首字母大小写来控制：<ul>
<li>首字母大写，代表是公共的，可被外部访问的</li>
<li>首字母小写，代表是私有的，不可以被外部访问</li>
</ul>
</li>
</ul>
</li>
<li>继承<ul>
<li>面向对象中的 “继承” 指的是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为</li>
<li>继承是编译时特征，在<code>struct</code>内加入所需要继承的类即可</li>
</ul>
</li>
<li>多态<ul>
<li>面向对象中的 “多态” 指的同一个行为具有多种不同表现形式或形态的能力，具体是指一个类实例（对象）的相同方法在不同情形有不同表现形式</li>
<li>多态也使得不同内部结构的对象可以共享相同的外部接口，也就是都是一套外部模板，内部实际是什么，只要符合规格就可以</li>
<li>多态是运行时特征，在 Go 语言中，多态是通过接口<code>interface</code>来实现的，类型和接口是松耦合的，某个类型的实例可以赋给它所实现的任意接口类型的变量</li>
</ul>
</li>
</ul>
<h4 id="4-Go编写HTTP服务器"><a href="#4-Go编写HTTP服务器" class="headerlink" title="4. Go编写HTTP服务器"></a><font color=DarkOrange>4. Go编写HTTP服务器</font></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/&quot;</span>, HelloHandler)</span><br><span class="line">	http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行代码之后，在浏览器中打开<code>localhost:8000</code>就可以看到<code>Hello World</code>。这段代码先利用<code>http.HandleFunc</code>在根路由<code>/</code>上注册了一个<code>HelloHandler</code>，然后利用<code>http.ListenAndServe</code>启动服务器并监听本地的 8000 端口。当有请求过来时，则根据路由执行对应的<code>handler</code>函数</p>
<p>参考链接：<a href="https://cloud.tencent.com/developer/article/1584872">点击跳转</a></p>
<h4 id="5-Gin示例"><a href="#5-Gin示例" class="headerlink" title="5. Gin示例"></a><font color=DarkOrange>5. Gin示例</font></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建一个默认的路由引擎</span></span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">// GET：请求方式；/hello：请求的路径</span></span><br><span class="line">	<span class="comment">// 当客户端以GET方法请求/hello路径时，会执行后面的匿名函数</span></span><br><span class="line">	r.GET(<span class="string">&quot;api/v1/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">// c.JSON：返回JSON格式的数据</span></span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 启动HTTP服务，默认在0.0.0.0:8080启动服务</span></span><br><span class="line">	r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<p>知乎Golang面试题总结链接：<a href="https://zhuanlan.zhihu.com/p/471490292">点击跳转</a></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font color=DarkOrange>总结</font></h4><p>Go面试复习应该有所侧重，关注切片，通道，异常处理，Goroutine，GMP模型，字符串高效拼接，指针，反射，接口，sync。对于比较难懂的部分，GMP模型和GC和内存管理，应该主动去看<strong>源码</strong>，然后慢慢理解。业务代码写多了，自然就有理解了</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生00-什么是云原生</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F00-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%91%E5%8E%9F%E7%94%9F/</url>
    <content><![CDATA[<h4 id="1-什么是云原生"><a href="#1-什么是云原生" class="headerlink" title="1. 什么是云原生"></a><font color=DarkOrange>1. 什么是云原生</font></h4><ul>
<li><p>在包括公有云、私有云、混合云等动态环境中构建和运行规模化应用的能力</p>
</li>
<li><p>云原生是一种思想，是技术、企业管理方法的集合</p>
<ul>
<li>技术层面<ul>
<li>应用程序从设计之初就为在云上运行而做好准备</li>
<li>云平台基于自动化体系</li>
</ul>
</li>
<li>流程层面<ul>
<li>基于 DevOps，CI&#x2F;CD</li>
</ul>
</li>
</ul>
</li>
<li><p>基于多种手段</p>
<ul>
<li>应用容器化封装</li>
<li>服务网格</li>
<li>不可变基础架构</li>
<li>声明式 API</li>
</ul>
</li>
<li><p>云原生的意义</p>
<ul>
<li>提升系统的适应性、可管理性、可观察性</li>
<li>使工程师能以最小成本进行频繁和可预测的系统变更</li>
<li>提升速度和效率，助力业务成长，缩短 I2M（Idea to Market）</li>
</ul>
</li>
</ul>
<h4 id="2-云原生核心项目概览"><a href="#2-云原生核心项目概览" class="headerlink" title="2. 云原生核心项目概览"></a><font color=DarkOrange>2. 云原生核心项目概览</font></h4><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8akra0wvmj30yk0qgdvy.jpg" alt="image.png" style="zoom:50%;" /></div>

<h4 id="3-kube-proxy-是干啥用的"><a href="#3-kube-proxy-是干啥用的" class="headerlink" title="3. kube-proxy 是干啥用的"></a><font color=DarkOrange>3. kube-proxy 是干啥用的</font></h4><h5 id="3-1-官方文档"><a href="#3-1-官方文档" class="headerlink" title="3.1 官方文档"></a><font color=DarkOrange>3.1 官方文档</font></h5><p>官方文档：<a href="https://kubernetes.io/docs/concepts/overview/components/">点击跳转</a></p>
<p>kube-proxy uses the operating system packet filtering layer if there is one and it’s available. Otherwise, kube-proxy forwards the traffic itself.</p>
<h5 id="3-2-看看前人是怎么解读的"><a href="#3-2-看看前人是怎么解读的" class="headerlink" title="3.2 看看前人是怎么解读的"></a><font color=DarkOrange>3.2 看看前人是怎么解读的</font></h5><p>搜中文文档，知乎，CSDN，简书都有比较高质量的文章，可以多看一些文档，并理解不同人 的理解差异</p>
<p>知乎：<a href="https://zhuanlan.zhihu.com/p/337806843">点击跳转</a></p>
<p>中文世界Kubernetes非常活跃，不少文档质量超过英文。但中文搬运转载问题比较严重，需要自己甄别</p>
<h5 id="3-3-找关键知识点"><a href="#3-3-找关键知识点" class="headerlink" title="3.3 找关键知识点"></a><font color=DarkOrange>3.3 找关键知识点</font></h5><ul>
<li>先对大概的框架有认识</li>
<li>kube-proxy 监听 API server 中 资源对象的变化情况，包括以下三种：<ul>
<li>service</li>
<li>endpoint&#x2F;endpointslices</li>
<li>node</li>
</ul>
</li>
<li>目前 Kube-proxy 支持4中代理模式：<ul>
<li>userspace</li>
<li>iptables</li>
<li>ipvs</li>
<li>kernelspace（windows）</li>
</ul>
</li>
</ul>
<h5 id="3-4-由点到面稍稍展开一下"><a href="#3-4-由点到面稍稍展开一下" class="headerlink" title="3.4 由点到面稍稍展开一下"></a><font color=DarkOrange>3.4 由点到面稍稍展开一下</font></h5><p>由浅入深的理解，成为专家</p>
<ul>
<li>入门：可以使用，知道怎么用，大概做了什么</li>
<li>初级：粗略理解配置方法</li>
<li>高级：理解不同模式的差异，理解为什么要有多种模式，理解配置细节</li>
<li>专家级：理解完整的内核协议栈处理数据包的流程，能够举一反三</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8akygl1nyj31qi0fe46c.jpg" alt="image.png" style="zoom:67%;" /></div>

<h4 id="4-如何学习云原生技术"><a href="#4-如何学习云原生技术" class="headerlink" title="4. 如何学习云原生技术"></a><font color=DarkOrange>4. 如何学习云原生技术</font></h4><ul>
<li><p>代码驱动</p>
<ul>
<li>掌握 Go 语言编程能力</li>
</ul>
</li>
<li><p>从点到面</p>
<ul>
<li>cgroup、namespace</li>
<li>网络协议栈</li>
<li>文件系统</li>
</ul>
</li>
<li><p>抓住核心掌控全局</p>
<ul>
<li>深入理解 Kubernetes<ul>
<li>API 定义</li>
<li>控制器模式</li>
<li>核心组件</li>
</ul>
</li>
</ul>
</li>
<li><p>大规模生产化</p>
<ul>
<li>多集群</li>
<li>服务网格和多网格</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生01-Go语言特性</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F01-Go%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>Go语言基础知识整理</p>
<h4 id="1-为什么需要另Go语言"><a href="#1-为什么需要另Go语言" class="headerlink" title="1. 为什么需要另Go语言"></a><font color=DarkOrange>1. 为什么需要另Go语言</font></h4><ul>
<li>其他编程语言的弊端<ul>
<li>硬件发展速度远远超过软件</li>
<li>C 语言等原生语言缺乏好的依赖管理 (依赖头文件）</li>
<li>Java 和 C++ 等语言过于笨重</li>
<li>系统语言对垃圾回收和并行计算等基础功能缺乏支持</li>
<li>对多核计算机缺乏支持</li>
</ul>
</li>
<li>Go 语言是一个可以编译高效，支持高并发的，面向垃圾回收的全新语言<ul>
<li>秒级完成大型程序的单节点编译</li>
<li>依赖管理清晰</li>
<li>不支持继承，程序员无需花费精力定义不同类型之间的关系</li>
<li>支持垃圾回收，支持并发执行，支持多线程通讯</li>
<li>对多核计算机支持友好</li>
</ul>
</li>
</ul>
<h5 id="1-1-Go-语言不支持的特性"><a href="#1-1-Go-语言不支持的特性" class="headerlink" title="1.1 Go 语言不支持的特性"></a><font color=DarkOrange>1.1 Go 语言不支持的特性</font></h5><ul>
<li>不支持函数重载和操作符重载</li>
<li>为了避免在 C&#x2F;C++ 开发中的一些 Bug 和混乱，不支持隐式转换</li>
<li>支持接口抽象，不支持继承</li>
<li>不支持动态加载代码</li>
<li>不支持动态链接库</li>
<li>通过 recover 和 panic 来替代异常机制</li>
<li>不支持断言</li>
<li>不支持静态变量</li>
</ul>
<h5 id="1-2-Go-语言特性衍生来源"><a href="#1-2-Go-语言特性衍生来源" class="headerlink" title="1.2 Go 语言特性衍生来源"></a><font color=DarkOrange>1.2 Go 语言特性衍生来源</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8aliy8674j31ey0pc11z.jpg" alt="image.png" style="zoom:45%;" /></div>

<h4 id="2-Go-语言编译环境设置"><a href="#2-Go-语言编译环境设置" class="headerlink" title="2. Go 语言编译环境设置"></a><font color=DarkOrange>2. Go 语言编译环境设置</font></h4><h5 id="2-1-下载-Go"><a href="#2-1-下载-Go" class="headerlink" title="2.1 下载 Go"></a><font color=DarkOrange>2.1 下载 Go</font></h5><ul>
<li>Go 安装文件以及源代码<ul>
<li>链接：<a href="https://golang.google.cn/dl/">点击跳转</a></li>
</ul>
</li>
<li>下载对应平台的二进制文件并安装</li>
<li>环境变量<ul>
<li>GOROOT<ul>
<li>go的安装目录</li>
</ul>
</li>
<li>GOPATH<ul>
<li>src：存放源代码</li>
<li>pkg：存放依赖包</li>
<li>bin：存放可执行文件</li>
</ul>
</li>
<li>其他常用变量<ul>
<li>GOOS，GOARCH，GOPROXY</li>
<li>国内用户建议设置 goproxy：<code>export GOPROXY=https://goproxy.cn</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="2-2-IDE-设置（VS-Code）"><a href="#2-2-IDE-设置（VS-Code）" class="headerlink" title="2.2 IDE 设置（VS Code）"></a><font color=DarkOrange>2.2 IDE 设置（VS Code）</font></h5><ul>
<li>下载并安装 Visual Studio Code<ul>
<li>VSCode：<a href="https://code.visualstudio.com/download">点击跳转</a></li>
</ul>
</li>
<li>安装 Go 语言插件<ul>
<li>插件：<a href="https://marketplace.visualstudio.com/items?itemName=golang.go">点击跳转</a></li>
</ul>
</li>
<li>其他可选项<ul>
<li>Intellj goland，收费软件，<a href="https://www.jetbrains.com/go/download/#section=mac">点击跳转</a></li>
<li>vim，sublime等</li>
</ul>
</li>
</ul>
<h5 id="2-3-一些基本命令"><a href="#2-3-一些基本命令" class="headerlink" title="2.3 一些基本命令"></a><font color=DarkOrange>2.3 一些基本命令</font></h5><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>bug</td>
<td>start a bug report</td>
</tr>
<tr>
<td>build</td>
<td>compile packages and dependencies</td>
</tr>
<tr>
<td>clean</td>
<td>remove object files and cached files</td>
</tr>
<tr>
<td>doc</td>
<td>show documentation for package or symbol</td>
</tr>
<tr>
<td>env</td>
<td>print Go environment information</td>
</tr>
<tr>
<td>fix</td>
<td>update packages to use new APIs</td>
</tr>
<tr>
<td>fmt</td>
<td>gofmt (reformat) package sources</td>
</tr>
<tr>
<td>generate</td>
<td>generate Go files by processing source</td>
</tr>
<tr>
<td>get</td>
<td>add dependencies to current module and install them</td>
</tr>
<tr>
<td>install</td>
<td>compile and install packages and dependencies</td>
</tr>
<tr>
<td>list</td>
<td>list packages or modules</td>
</tr>
<tr>
<td>mod</td>
<td>module maintenance</td>
</tr>
<tr>
<td>run</td>
<td>compile and run Go program</td>
</tr>
<tr>
<td>test</td>
<td>test packages</td>
</tr>
<tr>
<td>tool</td>
<td>run specified go tool</td>
</tr>
<tr>
<td>version</td>
<td>print Go version</td>
</tr>
<tr>
<td>vet</td>
<td>report likely mistakes in packages</td>
</tr>
</tbody></table>
<h5 id="2-4-Go-build"><a href="#2-4-Go-build" class="headerlink" title="2.4 Go build"></a><font color=DarkOrange>2.4 Go build</font></h5><ul>
<li>Go 语言不支持动态链接，因此编译时会将所有依赖编译进同一个二进制文件</li>
<li>指定输出目录<ul>
<li>go build –o bin&#x2F;mybinary</li>
</ul>
</li>
<li>常用环境变量设置编译操作系统和 CPU 架构<ul>
<li>GOOS&#x3D;linux GOARCH&#x3D;amd64 go build</li>
</ul>
</li>
<li>全支持列表<ul>
<li>$GOROOT&#x2F;src&#x2F;go&#x2F;build&#x2F;syslist.go</li>
</ul>
</li>
</ul>
<h5 id="2-6-Go-test"><a href="#2-6-Go-test" class="headerlink" title="2.6 Go test"></a><font color=DarkOrange>2.6 Go test</font></h5><p>Go 语言原生自带测试</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIncrease</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	t.Log(<span class="string">&quot;Start testing&quot;</span>)</span><br><span class="line">	increase(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>go test .&#x2F;… -v 运行测试</p>
<p>go test 命令扫描所有*_test.go为结尾的文件，惯例是将测试代码与正式代码放在同目录， 如 foo.go 的测试代码一般写在 foo_test.go</p>
<h5 id="2-7-Go-vet"><a href="#2-7-Go-vet" class="headerlink" title="2.7 Go vet"></a><font color=DarkOrange>2.7 Go vet</font></h5><p>代码静态检查，发现可能的 bug 或者可疑的构造</p>
<ul>
<li><p>Print-format 错误，检查类型不匹配的print</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := “hello world!”</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, str)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Boolean 错误，检查一直为 true、false 或者冗余的表达式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(i != <span class="number">0</span> || i != <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Range 循环，比如如下代码主协程会先退出，go routine无法被执行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">words := []<span class="type">string</span>&#123;<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, word := <span class="keyword">range</span> words &#123;</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(word)</span><br><span class="line">  &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Unreachable的代码，如 return 之后的代码</p>
</li>
<li><p>其他错误，比如变量自赋值，error 检查滞后等</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">res, err := http.Get(<span class="string">&quot;https://www.spreadsheetdb.io/&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="2-8-代码版本控制"><a href="#2-8-代码版本控制" class="headerlink" title="2.8 代码版本控制"></a><font color=DarkOrange>2.8 代码版本控制</font></h5><ul>
<li>下载并安装 Git Command Line<ul>
<li>Git，<a href="https://git-scm.com/downloads">点击跳转</a></li>
</ul>
</li>
<li>Github<ul>
<li>代码仓库</li>
</ul>
</li>
<li>创建代码目录<ul>
<li>mkdir –p $GOPATH&#x2F;src&#x2F;github.com&#x2F;cncamp</li>
<li>cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;cncamp</li>
</ul>
</li>
<li>代码下载</li>
<li>修改代码</li>
<li>上传代码<ul>
<li>git add filename</li>
<li>git commit –m ‘change logs’</li>
<li>git push</li>
</ul>
</li>
</ul>
<h5 id="2-9-Golang-playground"><a href="#2-9-Golang-playground" class="headerlink" title="2.9 Golang playground"></a><font color=DarkOrange>2.9 Golang playground</font></h5><ul>
<li>官方 playground，<a href="https://play.golang.org/">点击跳转</a></li>
<li><strong>推荐：</strong> 国内可直接访问的 playground，<a href="https://goplay.tools/">点击跳转</a></li>
</ul>
<p>可直接编写和运行 Go 语言程序</p>
<h4 id="3-控制结构"><a href="#3-控制结构" class="headerlink" title="3. 控制结构"></a><font color=DarkOrange>3. 控制结构</font></h4><h5 id="3-1-if"><a href="#3-1-if" class="headerlink" title="3.1 if"></a><font color=DarkOrange>3.1 if</font></h5><ul>
<li><p>基本形式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1 &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition2 &#123;</span><br><span class="line">  <span class="comment">// do something else</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">// catch-all or default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>if 的简短语句</p>
<ul>
<li>for 一样， if 语句可以在条件表达式前执行一个简单的语句</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> v := x - <span class="number">100</span>; v &lt; <span class="number">0</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-2-switch"><a href="#3-2-switch" class="headerlink" title="3.2 switch"></a><font color=DarkOrange>3.2 switch</font></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">  <span class="keyword">case</span> val1: <span class="comment">//空分支</span></span><br><span class="line">  <span class="keyword">case</span> val2:</span><br><span class="line">  	<span class="keyword">fallthrough</span> <span class="comment">//执行case3中的f()</span></span><br><span class="line">  <span class="keyword">case</span> val3:</span><br><span class="line">  	f()</span><br><span class="line">  <span class="keyword">default</span>: <span class="comment">//默认分支</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-for"><a href="#3-3-for" class="headerlink" title="3.3 for"></a><font color=DarkOrange>3.3 for</font></h5><p>Go 只有一种循环结构：for 循环</p>
<ul>
<li><p>计入计数器的循环</p>
<ul>
<li>for 初始化语句; 条件语句; 修饰语句 {}</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">	sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化语句和后置语句是可选的，此场景与 while 等价（Go 语言不支持 while）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ; sum &lt; <span class="number">1000</span>; &#123;</span><br><span class="line">	sum += sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>无限循环</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> condition1 &#123;</span><br><span class="line">  	<span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-4-for-range"><a href="#3-4-for-range" class="headerlink" title="3.4 for-range"></a><font color=DarkOrange>3.4 for-range</font></h5><p>遍历数组，切片，字符串，Map 等</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index, char := <span class="keyword">range</span> myString &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> MyMap &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> MyArray &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>需要注意：如果 for range 遍历指针数组，则 value 取出的指 针地址为原指针地址的拷贝</strong></p>
<h4 id="4-Go-语言常用数据结构"><a href="#4-Go-语言常用数据结构" class="headerlink" title="4. Go 语言常用数据结构"></a><font color=DarkOrange>4. Go 语言常用数据结构</font></h4><h5 id="4-1-变量与常量"><a href="#4-1-变量与常量" class="headerlink" title="4.1 变量与常量"></a><font color=DarkOrange>4.1 变量与常量</font></h5><ul>
<li>常量<ul>
<li>const identifier type</li>
</ul>
</li>
<li>变量<ul>
<li>var identifier type</li>
</ul>
</li>
</ul>
<h5 id="4-2-变量定义"><a href="#4-2-变量定义" class="headerlink" title="4.2 变量定义"></a><font color=DarkOrange>4.2 变量定义</font></h5><ul>
<li>变量<ul>
<li>var 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后</li>
<li>var c, python, java bool</li>
</ul>
</li>
<li>变量的初始化<ul>
<li>变量声明可以包含初始值，每个变量对应一个</li>
<li>如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型</li>
<li>var i, j int &#x3D; 1, 2</li>
</ul>
</li>
<li>短变量声明<ul>
<li>在函数中，简洁赋值语句 :&#x3D; 可在类型明确的地方代替 var 声明</li>
<li>函数外的每个语句都必须以关键字开始（var, func 等等），<strong>因此 :&#x3D; 结构不能在函数外使用</strong></li>
<li>c, python, java :&#x3D; true, false, “no!”</li>
</ul>
</li>
</ul>
<h5 id="4-3-类型转换与推导"><a href="#4-3-类型转换与推导" class="headerlink" title="4.3 类型转换与推导"></a><font color=DarkOrange>4.3 类型转换与推导</font></h5><ul>
<li>类型转换<ul>
<li>表达式 T(v) 将值 v 转换为类型 T<ul>
<li>一些关于数值的转换：<ul>
<li>var i int &#x3D; 42</li>
<li>var f float64 &#x3D; float64(i) </li>
<li>var u uint &#x3D; uint(f)</li>
</ul>
</li>
<li>或者，更加简单的形式：<ul>
<li>i :&#x3D; 42 </li>
<li>f :&#x3D; float64(i)</li>
<li>u :&#x3D; uint(f)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>类型推导<ul>
<li>在声明一个变量而不指定其类型时（即使用不带类型的 :&#x3D; 语法或 var &#x3D; 表达式语法），变量的类型由右值推导得出<ul>
<li>var i int </li>
<li>j :&#x3D; i &#x2F;&#x2F; j 也是一个 int</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="4-4-数组"><a href="#4-4-数组" class="headerlink" title="4.4 数组"></a><font color=DarkOrange>4.4 数组</font></h5><ul>
<li>相同类型且长度固定连续内存片段</li>
<li>以编号访问每个元素</li>
<li>定义方法<ul>
<li>var identifier [len]type</li>
</ul>
</li>
<li>示例<ul>
<li>myArray :&#x3D; [3]int{1,2,3}</li>
</ul>
</li>
</ul>
<h5 id="4-5-切片-slice"><a href="#4-5-切片-slice" class="headerlink" title="4.5 切片(slice)"></a><font color=DarkOrange>4.5 切片(slice)</font></h5><ul>
<li><p>切片是对数组一个连续片段的引用</p>
</li>
<li><p>数组定义中不指定长度即为切片</p>
<ul>
<li>var identifier []type</li>
</ul>
</li>
<li><p>切片在未初始化之前默认为nil， 长度为0</p>
</li>
<li><p>常用方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  myArray := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">  mySlice := myArray[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">  fmt.Printf(<span class="string">&quot;mySlice %+v\n&quot;</span>, mySlice)</span><br><span class="line">  fullSlice := myArray[:]</span><br><span class="line">  remove3rdItem := deleteItem(fullSlice, <span class="number">2</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;remove3rdItem %+v\n&quot;</span>, remove3rdItem)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteItem</span><span class="params">(slice []<span class="type">int</span>, index <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">append</span>(slice[:index], slice[index+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-6-make和new"><a href="#4-6-make和new" class="headerlink" title="4.6 make和new"></a><font color=DarkOrange>4.6 make和new</font></h5><ul>
<li><p>new 返回指针地址</p>
</li>
<li><p>make 返回第一个元素，可预设内存空间，避免未来的内存拷贝</p>
</li>
<li><p>示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mySlice1 := <span class="built_in">new</span>([]<span class="type">int</span>)</span><br><span class="line">mySlice2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">mySlice3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">mySlice4 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8au3yhk17j30rc08c0wm.jpg" alt="image.png" style="zoom: 50%;" /></li>
</ul>
<h5 id="4-7-关于切片的常见问题"><a href="#4-7-关于切片的常见问题" class="headerlink" title="4.7 关于切片的常见问题"></a><font color=DarkOrange>4.7 关于切片的常见问题</font></h5><ul>
<li><p>切片是连续内存并且可以动态扩展，由此引发的问题？</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := []<span class="type">int</span></span><br><span class="line">b := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">c := a</span><br><span class="line">a = <span class="built_in">append</span>(b, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改切片的值？</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mySlice := []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> mySlice &#123;</span><br><span class="line">	value *= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;mySlice %+v\n&quot;</span>, mySlice)</span><br><span class="line"><span class="keyword">for</span> index, _ := <span class="keyword">range</span> mySlice &#123;</span><br><span class="line">	mySlice[index] *= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;mySlice %+v\n&quot;</span>, mySlice)</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-8-Map"><a href="#4-8-Map" class="headerlink" title="4.8 Map"></a><font color=DarkOrange>4.8 Map</font></h5><ul>
<li><p>声明方法</p>
<ul>
<li>var map1 map[keytype]valuetype</li>
</ul>
</li>
<li><p>示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">myMap[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">myFuncMap := <span class="keyword">map</span>[<span class="type">string</span>]<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span>&#123;</span><br><span class="line">	<span class="string">&quot;funcA&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(myFuncMap)</span><br><span class="line">f := myFuncMap[<span class="string">&quot;funcA&quot;</span>]</span><br><span class="line">fmt.Println(f())</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-9-访问-Map-元素"><a href="#4-9-访问-Map-元素" class="headerlink" title="4.9 访问 Map 元素"></a><font color=DarkOrange>4.9 访问 Map 元素</font></h5><ul>
<li><p>按 Key 取值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">value, exists := myMap[<span class="string">&quot;a&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line">	<span class="built_in">println</span>(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历 Map</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> myMap &#123;</span><br><span class="line">	<span class="built_in">println</span>(k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-10-结构体和指针"><a href="#4-10-结构体和指针" class="headerlink" title="4.10 结构体和指针"></a><font color=DarkOrange>4.10 结构体和指针</font></h5><ul>
<li>通过 type … struct 关键字自定义结构体</li>
<li>Go 语言支持指针，但不支持指针运算<ul>
<li>指针变量的值为内存地址</li>
<li>未赋值的指针为 nil</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMyType</span><span class="params">(t *MyType)</span></span>&#123;</span><br><span class="line">	<span class="built_in">println</span>(t.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  t := MyType&#123;Name: <span class="string">&quot;test&quot;</span>&#125;</span><br><span class="line">  printMyType(&amp;t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-11-结构体标签"><a href="#4-11-结构体标签" class="headerlink" title="4.11 结构体标签"></a><font color=DarkOrange>4.11 结构体标签</font></h5><ul>
<li>结构体中的字段除了有名字和类型外，还可以有一个可选的标签（tag）</li>
<li>使用场景：Kubernetes APIServer 对所有资源的定义都用 Json tag 和 protoBuff tag<ul>
<li>NodeName string <code>json:&quot;nodeName,omitempty&quot; protobuf:&quot;bytes,10,opt,name=nodeName&quot;</code></li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  mt := MyType&#123;Name: <span class="string">&quot;test&quot;</span>&#125;</span><br><span class="line">  myType := reflect.TypeOf(mt)</span><br><span class="line">  name := myType.Field(<span class="number">0</span>)</span><br><span class="line">  tag := name.Tag.Get(<span class="string">&quot;json&quot;</span>)</span><br><span class="line">  <span class="built_in">println</span>(tag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-12-类型别名"><a href="#4-12-类型别名" class="headerlink" title="4.12 类型别名"></a><font color=DarkOrange>4.12 类型别名</font></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service Type string describes ingress methods for a service</span></span><br><span class="line"><span class="keyword">type</span> ServiceType <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  <span class="comment">// ServiceTypeClusterIP means a service will only be accessible inside the</span></span><br><span class="line">  <span class="comment">// cluster, via the ClusterIP.</span></span><br><span class="line">  ServiceTypeClusterIP ServiceType = <span class="string">&quot;ClusterIP&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ServiceTypeNodePort means a service will be exposed on one port of</span></span><br><span class="line">  <span class="comment">// every node, in addition to &#x27;ClusterIP&#x27; type.</span></span><br><span class="line">  ServiceTypeNodePort ServiceType = <span class="string">&quot;NodePort&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ServiceTypeLoadBalancer means a service will be exposed via an</span></span><br><span class="line">  <span class="comment">// external load balancer (if the cloud provider supports it), in addition</span></span><br><span class="line">  <span class="comment">// to &#x27;NodePort&#x27; type.</span></span><br><span class="line">  ServiceTypeLoadBalancer ServiceType = <span class="string">&quot;LoadBalancer&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ServiceTypeExternalName means a service consists of only a reference to</span></span><br><span class="line">  <span class="comment">// an external name that kubedns or equivalent will return as a CNAME</span></span><br><span class="line">  <span class="comment">// record, with no exposing or proxying of any pods involved.</span></span><br><span class="line">  ServiceTypeExternalName ServiceType = <span class="string">&quot;ExternalName&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="5-Go-语言函数调用"><a href="#5-Go-语言函数调用" class="headerlink" title="5. Go 语言函数调用"></a><font color=DarkOrange>5. Go 语言函数调用</font></h4><h5 id="5-1-main函数"><a href="#5-1-main函数" class="headerlink" title="5.1 main函数"></a><font color=DarkOrange>5.1 main函数</font></h5><ul>
<li>每个 Go 语言程序都应该有个 main package</li>
<li>Main package 里的 main 函数是 Go 语言程序入口</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  args := os.Args</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;Do not accept any argument&quot;</span>)</span><br><span class="line">    os.Exit(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">println</span>(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-参数解析"><a href="#5-2-参数解析" class="headerlink" title="5.2 参数解析"></a><font color=DarkOrange>5.2 参数解析</font></h5><ul>
<li>请注意 main 函数与其他语言不同，没有类似 java 的 []string args 参数</li>
<li>Go 语言如何传入参数呢？<ul>
<li>方法1：<ul>
<li>fmt.Println(“os args is:”, os.Args)</li>
</ul>
</li>
<li>方法2：<ul>
<li>name :&#x3D; flag.String(“name”, “world”, “specify the name you want to say hi”)</li>
<li>flag.Parse()</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="5-3-init函数"><a href="#5-3-init函数" class="headerlink" title="5.3 init函数"></a><font color=DarkOrange>5.3 init函数</font></h5><ul>
<li>init 函数：会在包初始化时运行</li>
<li>谨慎使用 init 函数<ul>
<li>当多个依赖项目引用统一项目，且被引用项目的初始化在 init 中完成，并且不可重复运行时，会导 致启动错误</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVariable = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	myVariable = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-4-返回值"><a href="#5-4-返回值" class="headerlink" title="5.4 返回值"></a><font color=DarkOrange>5.4 返回值</font></h5><ul>
<li>多值返回<ul>
<li>函数可以返回任意数量的返回值</li>
</ul>
</li>
<li>命名返回值<ul>
<li>Go 的返回值可被命名，它们会被视作定义在函数顶部的变量</li>
<li>返回值的名称应当具有一定的意义，它可以作为文档使用</li>
<li>没有参数的 return 语句返回已命名的返回值。也就是直接返回</li>
</ul>
</li>
<li>调用者忽略部分返回值<ul>
<li>result, _ &#x3D; strconv.Atoi(origStr)</li>
</ul>
</li>
</ul>
<h5 id="5-5-传递变长参数"><a href="#5-5-传递变长参数" class="headerlink" title="5.5 传递变长参数"></a><font color=DarkOrange>5.5 传递变长参数</font></h5><p>Go 语言中的可变长参数允许调用方传递任意多个相同类型的参数</p>
<ul>
<li><p>函数定义</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(slice []Type, elems ...Type)</span></span> []Type</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myArray := []<span class="type">string</span>&#123;&#125;</span><br><span class="line">myArray = <span class="built_in">append</span>(myArray, <span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-6-内置函数"><a href="#5-6-内置函数" class="headerlink" title="5.6 内置函数"></a><font color=DarkOrange>5.6 内置函数</font></h5><table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>close</td>
<td>管道关闭</td>
</tr>
<tr>
<td>len, cap</td>
<td>返回数组、切片，Map 的长度或容量</td>
</tr>
<tr>
<td>new, make</td>
<td>内存分配</td>
</tr>
<tr>
<td>copy, append</td>
<td>操作切片</td>
</tr>
<tr>
<td>panic, recover</td>
<td>错误处理</td>
</tr>
<tr>
<td>print, println</td>
<td>打印</td>
</tr>
<tr>
<td>complex, real, imag</td>
<td>操作复数</td>
</tr>
</tbody></table>
<h5 id="5-7-回调函数-Callback"><a href="#5-7-回调函数-Callback" class="headerlink" title="5.7 回调函数(Callback)"></a><font color=DarkOrange>5.7 回调函数(Callback)</font></h5><p>函数作为参数传入其它函数，并在其他函数内部调用执行</p>
<ul>
<li>strings.IndexFunc(line, unicode.IsSpace)</li>
<li>Kubernetes controller的leaderelection</li>
</ul>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  DoOperation(<span class="number">1</span>, increase)</span><br><span class="line">  DoOperation(<span class="number">1</span>, decrease)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increase</span><span class="params">(a, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="built_in">println</span>(“increase result is:”, a+b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoOperation</span><span class="params">(y <span class="type">int</span>, f <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span>) &#123;</span><br><span class="line">	f(y, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decrease</span><span class="params">(a, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="built_in">println</span>(<span class="string">&quot;decrease result is:&quot;</span>, a-b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-8-闭包"><a href="#5-8-闭包" class="headerlink" title="5.8 闭包"></a><font color=DarkOrange>5.8 闭包</font></h5><p>匿名函数</p>
<ul>
<li><p>不能独立存在</p>
</li>
<li><p>可以赋值给其他变量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x:= <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以直接调用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(x,y <span class="type">int</span>)</span></span>&#123;<span class="built_in">println</span>(x+y)&#125;(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可作为函数返回值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">()</span></span> (<span class="function"><span class="keyword">func</span><span class="params">(b <span class="type">int</span>)</span></span> <span class="type">int</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用场景</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">  	<span class="built_in">println</span>(“recovered in FuncX”)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-9-方法"><a href="#5-9-方法" class="headerlink" title="5.9 方法"></a><font color=DarkOrange>5.9 方法</font></h5><ul>
<li><p>方法：作用在接收者上的函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">• <span class="function"><span class="keyword">func</span> <span class="params">(recv receiver_type)</span></span> methodName(parameter_list) (return_value_list)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用场景</p>
<ul>
<li>很多场景下，函数需要的上下文可以保存在receiver属性中，通过定义 receiver 的方法，该方法可以直接 访问 receiver 属性，减少参数传递需求</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StartTLS starts TLS on a server from NewUnstartedServer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> StartTLS() &#123;</span><br><span class="line">  <span class="keyword">if</span> s.URL != “” &#123;</span><br><span class="line">  	<span class="built_in">panic</span>(“Server already started”)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> s.client == <span class="literal">nil</span> &#123;</span><br><span class="line">  	s.client = &amp;http.Client&#123;Transport: &amp;http.Transport&#123;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-10-传值还是传指针"><a href="#5-10-传值还是传指针" class="headerlink" title="5.10 传值还是传指针"></a><font color=DarkOrange>5.10 传值还是传指针</font></h5><ul>
<li>Go 语言只有一种规则-传值</li>
<li>函数内修改参数的值不会影响函数外原始变量的值</li>
<li>可以传递指针参数将变量地址传递给调用函数，Go 语言会复制该指针作为函数内的地址，但指向同一地址</li>
</ul>
<p><strong>思考：当我们写代码的时候，函数的参数传递应该用struct 还是pointer？</strong></p>
<h5 id="5-11-接口"><a href="#5-11-接口" class="headerlink" title="5.11 接口"></a><font color=DarkOrange>5.11 接口</font></h5><ul>
<li><p>接口定义一组方法集合</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IF <span class="keyword">interface</span> &#123;</span><br><span class="line">	Method1(param_list) return_type</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>适用场景：Kubernetes 中有大量的接口抽象和多种实现</p>
</li>
<li><p>Struct 无需显示声明实现 interface，只需直接实现方法</p>
</li>
<li><p>Struct 除实现 interface 定义的接口外，还可以有额外的方法</p>
</li>
<li><p>一个类型可实现多个接口（Go 语言的多重继承）</p>
</li>
<li><p>Go 语言中接口不接受属性定义</p>
</li>
<li><p>接口可以嵌套其他接口</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IF <span class="keyword">interface</span> &#123;</span><br><span class="line">	getName() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">	firstName, lastName <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span> getName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> h.firstName + <span class="string">&quot;,&quot;</span> + h.lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">	factory, model <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Car)</span></span> getName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.factory + <span class="string">&quot;-&quot;</span> + c.model</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  interfaces := []IF&#123;&#125;</span><br><span class="line">  h := <span class="built_in">new</span>(Human)</span><br><span class="line">  h.firstName = <span class="string">&quot;first&quot;</span></span><br><span class="line">  h.lastName = <span class="string">&quot;last&quot;</span></span><br><span class="line">  interfaces = <span class="built_in">append</span>(interfaces, h)</span><br><span class="line">  c := <span class="built_in">new</span>(Car)</span><br><span class="line">  c.factory = <span class="string">&quot;benz&quot;</span></span><br><span class="line">  c.model = <span class="string">&quot;s&quot;</span></span><br><span class="line">  interfaces = <span class="built_in">append</span>(interfaces, c)</span><br><span class="line">  <span class="keyword">for</span> _, f := <span class="keyword">range</span> interfaces &#123;</span><br><span class="line">  	fmt.Println(f.getName())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>Interface 是可能为 nil 的，所以针对 interface 的使用一定要预 先判空，否则会引起程序 crash(nil panic)</li>
<li>Struct 初始化意味着空间分配，对 struct 的引用不会出现空指针</li>
</ul>
<h5 id="5-12-反射机制"><a href="#5-12-反射机制" class="headerlink" title="5.12 反射机制"></a><font color=DarkOrange>5.12 反射机制</font></h5><ul>
<li>reflect.TypeOf ()返回被检查对象的类型</li>
<li>reflect.ValueOf()返回被检查对象的值</li>
</ul>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">myMap[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">t := reflect.TypeOf(myMap)</span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, t)</span><br><span class="line">v := reflect.ValueOf(myMap)</span><br><span class="line">fmt.Println(<span class="string">&quot;value:&quot;</span>, v)</span><br></pre></td></tr></table></figure>

<h5 id="5-13-基于struct的反射"><a href="#5-13-基于struct的反射" class="headerlink" title="5.13 基于struct的反射"></a><font color=DarkOrange>5.13 基于struct的反射</font></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// struct</span></span><br><span class="line">myStruct := T&#123;A: <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line">v1 := reflect.ValueOf(myStruct)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; v1.NumField(); i++ &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Field %d: %v\n&quot;</span>, i, v1.Field(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; v1.NumMethod(); i++ &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Method %d: %v\n&quot;</span>, i, v1.Method(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意 receive 是 struct 还是指针</span></span><br><span class="line">result := v1.Method(<span class="number">0</span>).Call(<span class="literal">nil</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;result:&quot;</span>, result)</span><br></pre></td></tr></table></figure>

<h5 id="5-14-Go语言中的面向对象编程"><a href="#5-14-Go语言中的面向对象编程" class="headerlink" title="5.14 Go语言中的面向对象编程"></a><font color=DarkOrange>5.14 Go语言中的面向对象编程</font></h5><ul>
<li>可见性控制<ul>
<li>public - 常量、变量、类型、接口、结构、函数等的名称大写</li>
<li>private - 非大写就只能在包内使用</li>
</ul>
</li>
<li>继承<ul>
<li>通过组合实现，内嵌一个或多个 struct</li>
</ul>
</li>
<li>多态<ul>
<li>通过接口实现，通过接口定义方法集，编写多套实现</li>
</ul>
</li>
</ul>
<h5 id="5-15-json编解码"><a href="#5-15-json编解码" class="headerlink" title="5.15 json编解码"></a><font color=DarkOrange>5.15 json编解码</font></h5><ul>
<li><p>Unmarshal: 从 string 转换至 struct</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshal2Struct</span><span class="params">(humanStr <span class="type">string</span>)</span></span>Human &#123;</span><br><span class="line">  h := Human&#123;&#125;</span><br><span class="line">  err := json.Unmarshal([]<span class="type">byte</span>(humanStr), &amp;h)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  	<span class="built_in">println</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Marshal: 从 struct 转换至 string</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">marshal2JsonString</span><span class="params">(h Human)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">  h.Age = <span class="number">30</span></span><br><span class="line">  updatedBytes, err := json.Marshal(&amp;h)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  	<span class="built_in">println</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">string</span>(updatedBytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>json 包使用 map[string]interface{} 和 []interface{} 类型保存任意对象</p>
</li>
<li><p>可通过如下逻辑解析任意 json</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(humanStr), &amp;obj)</span><br><span class="line">objMap, ok := obj.(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> objMap &#123;</span><br><span class="line">  <span class="keyword">switch</span> value := v.(<span class="keyword">type</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">  	fmt.Printf(<span class="string">&quot;type of %s is string, value is %v\n&quot;</span>, k, value)</span><br><span class="line">  <span class="keyword">case</span> <span class="keyword">interface</span>&#123;&#125;:</span><br><span class="line">  	fmt.Printf(<span class="string">&quot;type of %s is interface&#123;&#125;, value is %v\n&quot;</span>, k, value)</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  	fmt.Printf(<span class="string">&quot;type of %s is wrong, value is %v\n&quot;</span>, k, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-常用语法"><a href="#6-常用语法" class="headerlink" title="6. 常用语法"></a><font color=DarkOrange>6. 常用语法</font></h4><h5 id="6-1-错误处理"><a href="#6-1-错误处理" class="headerlink" title="6.1 错误处理"></a><font color=DarkOrange>6.1 错误处理</font></h5><ul>
<li><p>Go 语言无内置 exceptio 机制，只提供 error 接口供定义错误</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">	Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可通过 errors.New 或 fmt.Errorf 创建新的 error</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> errNotFound <span class="type">error</span> = errors.New(<span class="string">&quot;NotFound&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>通常应用程序对 error 的处理大部分是判断 error 是否为 nil</p>
</li>
</ul>
<p>如需将 error 归类，通常交给应用程序自定义，比如 kubernetes 自定义了与 apiserver 交互的不同类型错误</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StatusError <span class="keyword">struct</span> &#123;</span><br><span class="line">	ErrStatus metav1.Status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ <span class="type">error</span> = &amp;StatusError&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error implements the Error interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *StatusError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> e.ErrStatus.Message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-2-defer"><a href="#6-2-defer" class="headerlink" title="6.2 defer"></a><font color=DarkOrange>6.2 defer</font></h5><ul>
<li>函数返回之前执行某个语句或函数</li>
<li>常见的 defer 使用场景：记得关闭你打开的资源<ul>
<li>defer file.Close()</li>
<li>defer mu.Unlock()</li>
<li>defer println(“”)</li>
</ul>
</li>
</ul>
<h5 id="6-3-panic和recover"><a href="#6-3-panic和recover" class="headerlink" title="6.3 panic和recover"></a><font color=DarkOrange>6.3 panic和recover</font></h5><ul>
<li>panic: 可在系统出现不可恢复错误时主动调用 panic, panic 会使当前线程直接 crash</li>
<li>defer: 保证执行并把控制权交还给接收到 panic 的函数调用者</li>
<li>recover: 函数从 panic 或 错误场景中恢复</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;defer func is called&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  	fmt.Println(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;a panic is triggered&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="7-多线程"><a href="#7-多线程" class="headerlink" title="7. 多线程"></a><font color=DarkOrange>7. 多线程</font></h4><h5 id="7-1-并发和并行"><a href="#7-1-并发和并行" class="headerlink" title="7.1 并发和并行"></a><font color=DarkOrange>7.1 并发和并行</font></h5><ul>
<li><p>并发（concurrency）</p>
<ul>
<li>两个或多个事件在同一时间间隔发生</li>
</ul>
<img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8bzcerzeej30zw02yjsm.jpg" alt="image.png" style="zoom: 50%;" />
</li>
<li><p>并行（parallellism）</p>
<ul>
<li>两个或者多个事件在同一时刻发生</li>
</ul>
<img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8bzd7setzj30zu0aadh9.jpg" alt="image.png" style="zoom: 50%;" /></li>
</ul>
<h5 id="7-2-协程"><a href="#7-2-协程" class="headerlink" title="7.2 协程"></a><font color=DarkOrange>7.2 协程</font></h5><ul>
<li>进程<ul>
<li>分配系统资源（CPU 时间、内存等）基本单位</li>
<li>有独立的内存空间，切换开销大</li>
</ul>
</li>
<li>线程<ul>
<li>进程的一个执行流，是 CPU 调度并能独立运行的的基本单位</li>
<li>同一进程中的多线程共享内存空间，线程切换代价小</li>
<li>多线程通信方便</li>
<li>从内核层面来看线程其实也是一种特殊的进程，它跟父进程共享了打开的文件和文件系统信息，共<br>享了地址空间和信号处理函数</li>
</ul>
</li>
<li>协程<ul>
<li>Go 语言中的轻量级线程实现</li>
<li>Golang 在 runtime、系统调用等多方面对 goroutine 调度进行了封装和处理，当遇到长时间执行<br>或者进行系统调用时，会主动把当前 goroutine 的 CPU (P) 转让出去，让其他 goroutine 能被调度<br>并执行，也就是 Golang 从语言层面支持了协程</li>
</ul>
</li>
</ul>
<h5 id="7-3-CSP"><a href="#7-3-CSP" class="headerlink" title="7.3 CSP"></a><font color=DarkOrange>7.3 CSP</font></h5><ul>
<li><p>CSP</p>
<ul>
<li>描述两个独立的并发实体通过共享的通讯 channel 进行通信的并发模型</li>
</ul>
</li>
<li><p>Go 协程 goroutine</p>
<ul>
<li>是一种轻量线程，它不是操作系统的线程，而是将一个操作系统线程分段使用，通过调度器实现协<br>作式调度</li>
<li>是一种绿色线程，微线程，它与 Coroutine 协程也有区别，能够在发现堵塞后启动新的微线程</li>
</ul>
</li>
<li><p>通道 channel</p>
<ul>
<li>类似 Unix 的 Pipe，用于协程之间通讯和同步</li>
<li>协程之间虽然解耦，但是它们和 Channel 有着耦合</li>
</ul>
</li>
</ul>
<h5 id="7-4-线程和协程的差异"><a href="#7-4-线程和协程的差异" class="headerlink" title="7.4 线程和协程的差异"></a><font color=DarkOrange>7.4 线程和协程的差异</font></h5><ul>
<li><p>每个 goroutine (协程) 默认占用内存远比 Java 、C 的线程少</p>
<ul>
<li>goroutine：2KB</li>
<li>线程：8MB</li>
</ul>
</li>
<li><p>线程&#x2F;goroutine 切换开销方面，goroutine 远比线程小</p>
<ul>
<li>线程：涉及模式切换(从用户态切换到内核态)、16个寄存器、PC、SP…等寄存器的刷新</li>
<li>goroutine：只有三个寄存器的值修改 - PC &#x2F; SP &#x2F; DX</li>
</ul>
</li>
<li><p>GOMAXPROCS</p>
<ul>
<li>控制并行线程数量</li>
</ul>
</li>
<li><p>启动新协程：go functionName()</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">  <span class="keyword">go</span> fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second)</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="7-5-channel-多线程通信"><a href="#7-5-channel-多线程通信" class="headerlink" title="7.5 channel-多线程通信"></a><font color=DarkOrange>7.5 channel-多线程通信</font></h5><ul>
<li>Channel 是多个协程之间通讯的管道<ul>
<li>一端发送数据，一端接收数据</li>
<li>同一时间只有一个协程可以访问数据，无共享内存模式可能出现的内存竞争</li>
<li>协调协程的执行顺序</li>
</ul>
</li>
<li>声明方式<ul>
<li><code>var identifier chan datatype</code></li>
<li>操作符&lt;-</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;hello from goroutine&quot;</span>)</span><br><span class="line">  ch &lt;- <span class="number">0</span> <span class="comment">//数据写入Channel</span></span><br><span class="line">&#125;()</span><br><span class="line">i := &lt;-ch<span class="comment">//从Channel中取数据并赋值</span></span><br></pre></td></tr></table></figure>

<h5 id="7-6-通道缓冲"><a href="#7-6-通道缓冲" class="headerlink" title="7.6 通道缓冲"></a><font color=DarkOrange>7.6 通道缓冲</font></h5><ul>
<li>基于 Channel 的通信是同步的</li>
<li>当缓冲区满时，数据的发送是阻塞的</li>
<li>通过 make 关键字创建通道时可定义缓冲区容量，默认缓冲区容量为 0</li>
</ul>
<h5 id="7-7-遍历通道缓冲区"><a href="#7-7-遍历通道缓冲区" class="headerlink" title="7.7 遍历通道缓冲区"></a><font color=DarkOrange>7.7 遍历通道缓冲区</font></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    n := rand.Intn(<span class="number">10</span>) <span class="comment">// n will be between 0 and 10</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;putting: &quot;</span>, n)</span><br><span class="line">    ch &lt;- n</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;hello from main&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;receiving: &quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-8-单向通道"><a href="#7-8-单向通道" class="headerlink" title="7.8 单向通道"></a><font color=DarkOrange>7.8 单向通道</font></h5><ul>
<li><p>只发送通道</p>
<ul>
<li><code>var sendOnly chan&lt;- int</code></li>
</ul>
</li>
<li><p>只接收通道</p>
<ul>
<li><code>var readOnly &lt;-chan int</code></li>
</ul>
</li>
<li><p>Istio webhook controller</p>
<ul>
<li><code>func (w *WebhookCertPatcher) runWebhookController(stopChan &lt;-chan struct&#123;&#125;) &#123;&#125;</code></li>
</ul>
</li>
<li><p>如何用: 双向通道转换</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> prod(c)</span><br><span class="line"><span class="keyword">go</span> consume(c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prod</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> &#123; ch &lt;- <span class="number">1</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consume</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123; &lt;-ch &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="7-9-关闭通道"><a href="#7-9-关闭通道" class="headerlink" title="7.9 关闭通道"></a><font color=DarkOrange>7.9 关闭通道</font></h5><ul>
<li>通道无需每次关闭</li>
<li>关闭的作用是告诉接收者该通道再无新数据发送</li>
<li>只有发送方需要关闭通道</li>
</ul>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">if</span> v, notClosed := &lt;-ch; notClosed &#123;</span><br><span class="line">	fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-10-select"><a href="#7-10-select" class="headerlink" title="7.10 select"></a><font color=DarkOrange>7.10 select</font></h5><ul>
<li>当多个协程同时运行时，可通过 select 轮询多个通道<ul>
<li>如果所有通道都阻塞则等待，如定义了 default 则执行 default</li>
<li>如多个通道就绪则随机选择</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v:= &lt;- ch1:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">case</span> v:= &lt;- ch2:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-11-定时器timer"><a href="#7-11-定时器timer" class="headerlink" title="7.11 定时器timer"></a><font color=DarkOrange>7.11 定时器timer</font></h5><ul>
<li>time.Ticker 以指定的时间间隔重复的向通道 C 发送时间值</li>
<li>使用场景<ul>
<li>为协程设定超时时间</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">timer := time.NewTimer(time.Second)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="comment">// check normal channel</span></span><br><span class="line">  <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">  	fmt.Println(<span class="string">&quot;received from ch&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> &lt;-timer.C:</span><br><span class="line">  	fmt.Println(<span class="string">&quot;timeout waiting from channel ch&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-12-上下文context"><a href="#7-12-上下文context" class="headerlink" title="7.12 上下文context"></a><font color=DarkOrange>7.12 上下文context</font></h5><ul>
<li><p>超时、取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续操作</p>
</li>
<li><p>Context 是设置截止日期、同步信号，传递请求相关值的结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">Deadline() (deadline time.Time, ok <span class="type">bool</span>)</span><br><span class="line">Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">Err() <span class="type">error</span></span><br><span class="line">Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用法</p>
<ul>
<li>context.Background</li>
<li>context.TODO</li>
<li>context.WithDeadline</li>
<li>context.WithValue</li>
<li>context.WithCancel</li>
</ul>
</li>
</ul>
<h5 id="7-13-如何停止一个子协程"><a href="#7-13-如何停止一个子协程" class="headerlink" title="7.13 如何停止一个子协程"></a><font color=DarkOrange>7.13 如何停止一个子协程</font></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">    	fmt.Println(<span class="string">&quot;done channel is triggerred, exit child go routine&quot;</span>)</span><br><span class="line">    	<span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="built_in">close</span>(done)</span><br></pre></td></tr></table></figure>

<h5 id="7-14-基于context停止子协程"><a href="#7-14-基于context停止子协程" class="headerlink" title="7.14 基于context停止子协程"></a><font color=DarkOrange>7.14 基于context停止子协程</font></h5><p>Context 是 Go 语言对 go routine 和 timer 的封装</p>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"><span class="keyword">go</span> process(ctx, <span class="number">100</span>*time.Millisecond)</span><br><span class="line">&lt;-ctx.Done()</span><br><span class="line">fmt.Println(<span class="string">&quot;main:&quot;</span>, ctx.Err())</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL面试题</title>
    <url>/2022/10/28/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>MySQL常见面试题、八股文</p>
<h4 id="1-Mysql索引用的是什么算法"><a href="#1-Mysql索引用的是什么算法" class="headerlink" title="1. Mysql索引用的是什么算法"></a><font color=DarkOrange>1. Mysql索引用的是什么算法</font></h4><ul>
<li>Mysql索引选用的是B+树，平衡二叉树的高度太高，查找可能需要较多的磁盘IO。B树索引占用内存较高(非叶子节点存储数据)</li>
<li>B+树，主要是查询效率高，O(logN)，可以充分利用磁盘预读的特性，多叉树，深度小，叶子结点有序且存储数据</li>
</ul>
<h4 id="2-Mysql事务的基本要素"><a href="#2-Mysql事务的基本要素" class="headerlink" title="2. Mysql事务的基本要素"></a><font color=DarkOrange>2. Mysql事务的基本要素</font></h4><ul>
<li>原子性：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行</li>
<li>一致性：事务开始前和结束后，数据库的完整性约束没有被破坏</li>
<li>隔离性：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰</li>
<li>持久性：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚</li>
</ul>
<h4 id="3-Mysql的存储引擎"><a href="#3-Mysql的存储引擎" class="headerlink" title="3. Mysql的存储引擎"></a><font color=DarkOrange>3. Mysql的存储引擎</font></h4><ul>
<li>InnoDB存储引擎<ul>
<li>InnoDB存储引擎支持事务，其设计目标主要面向在线事务处理（OLTP）的应用</li>
<li>其特点是行锁设计，支持外键，并支持非锁定锁，即默认读取操作不会产生锁。从Mysql5.5.8版本开始，InnoDB存储引擎是默认的存储引擎</li>
</ul>
</li>
<li>MyISAM存储引擎<ul>
<li>MyISAM存储引擎不支持事务、表锁设计，支持全文索引，主要面向一些OLAP数据库应用</li>
<li>InnoDB的数据文件本身就是主索引文件，而MyISAM的主索引和数据是分开的</li>
</ul>
</li>
<li>NDB存储引擎<ul>
<li>NDB存储引擎是一个集群存储引擎，其结构是share nothing的集群架构，能提供更高的可用性</li>
<li>NDB的特点是数据全部放在内存中（从MySQL 5.1版本开始，可以将非索引数据放在磁盘上），因此主键查找的速度极快，并且通过添加NDB数据存储节点可以线性地提高数据库性能，是高可用、高性能的集群系统</li>
<li>NDB存储引擎的连接操作是在MySQL数据库层完成的，而不是在存储引擎层完成的。这意味着，复杂的连接操作需要巨大的网络开销，因此查询速度很慢。如果解决了这个问题，NDB存储引擎的市场应该是非常巨大的</li>
</ul>
</li>
<li>Memory存储引擎<ul>
<li>Memory存储引擎（之前称HEAP存储引擎）将表中的数据存放在内存中，如果数据库重启或发生崩溃，表中的数据都将消失</li>
<li>它非常适合用于存储临时数据的临时表，以及数据仓库中的纬度表。Memory存储引擎默认使用哈希索引，而不是我们熟悉的B+树索引</li>
<li>虽然Memory存储引擎速度非常快，但在使用上还是有一定的限制。比如，只支持表锁，并发性能较差，并且不支持TEXT和BLOB列类型。最重要的是，存储变长字段时是按照定常字段的方式进行的，因此会浪费内存</li>
</ul>
</li>
<li>Archive存储引擎<ul>
<li>Archive存储引擎只支持INSERT和SELECT操作，从MySQL 5.1开始支持索引</li>
<li>Archive存储引擎使用zlib算法将数据行（row）进行压缩后存储，压缩比一般可达1∶10。正如其名字所示，Archive存储引擎非常适合存储归档数据，如日志信息</li>
<li>Archive存储引擎使用行锁来实现高并发的插入操作，但是其本身并不是事务安全的存储引擎，其设计目标主要是提供高速的插入和压缩功能</li>
</ul>
</li>
<li>Maria存储引擎<ul>
<li>Maria存储引擎是新开发的引擎，设计目标主要是用来取代原有的MyISAM存储引擎，从而成为MySQL的默认存储引擎。它可以看做是MyISAM的后续版本</li>
<li>Maria存储引擎的特点是：支持缓存数据和索引文件，应用了行锁设计，提供了MVCC功能，支持事务和非事务安全的选项，以及更好的BLOB字符类型的处理性能</li>
</ul>
</li>
</ul>
<h4 id="4-Mysql事务隔离级别"><a href="#4-Mysql事务隔离级别" class="headerlink" title="4. Mysql事务隔离级别"></a><font color=DarkOrange>4. Mysql事务隔离级别</font></h4><p>Mysql有四种事务隔离级别，默认的是可重复读</p>
<table>
<thead>
<tr>
<th align="left">事务隔离级别</th>
<th align="left">脏读</th>
<th align="left">不可重复读</th>
<th align="left">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="left">读未提交</td>
<td align="left">是</td>
<td align="left">是</td>
<td align="left">是</td>
</tr>
<tr>
<td align="left">读已提交</td>
<td align="left">否</td>
<td align="left">是</td>
<td align="left">是</td>
</tr>
<tr>
<td align="left">可重复读</td>
<td align="left">否</td>
<td align="left">否</td>
<td align="left">是</td>
</tr>
<tr>
<td align="left">串行</td>
<td align="left">否</td>
<td align="left">否</td>
<td align="left">否</td>
</tr>
</tbody></table>
<ul>
<li><p>读未提交(Read uncommitted)</p>
<p>一个事务可以读取另一个未提交事务的数据，最低级别，任何情况都无法保证</p>
<ul>
<li>所有事务都可以看到其他未提交事务的执行结果</li>
<li>本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少</li>
<li>该级别引发的问题是——脏读(Dirty Read)：读取到了未提交的数据</li>
</ul>
</li>
<li><p>读已提交(Read committed)</p>
<p>一个事务要等另一个事务提交后才能读取数据，可避免脏读的发生</p>
<ul>
<li>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）</li>
<li>它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变</li>
<li>这种隔离级别出现的问题是——不可重复读(Nonrepeatable Read)，不可重复读意味着我们在同一个事务中执行完全相同的select语句时可能看到不一样的结果</li>
</ul>
<p>导致这种情况的原因可能有：</p>
<ul>
<li>有一个交叉的事务有新的commit，导致了数据的改变</li>
<li>一个数据库被多个实例操作时，同一事务的其他实例在该实例处理其间可能会有新的commit</li>
</ul>
</li>
<li><p>可重复读(Repeatable read)</p>
<p>就是在开始读取数据（事务开启）时，不再允许修改操作，可避免脏读、不可重复读的发生</p>
<ul>
<li>这是MySQL的默认事务隔离级别</li>
<li>它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行</li>
<li>此级别可能出现的问题——幻读(Phantom Read)：当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行</li>
<li>InnoDB和Falcon存储引擎通过多版本并发控制(MVCC，Multiversion Concurrency Control)机制解决了该问题.InnoDB采用MVCC来支持高并发，实现了四个标准隔离级别。默认基本是可重复读，并且提供间隙锁（next-key locks）策略防止幻读出现</li>
</ul>
</li>
<li><p>串行(Serializable)</p>
<p>串行(Serializable)，是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。Mysql的默认隔离级别是Repeatable read</p>
<ul>
<li>这是最高的隔离级别</li>
<li>它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁</li>
<li>在这个级别，可能导致大量的超时现象和锁竞争</li>
</ul>
</li>
</ul>
<h4 id="5-Mysql高可用方案有哪些"><a href="#5-Mysql高可用方案有哪些" class="headerlink" title="5. Mysql高可用方案有哪些"></a><font color=DarkOrange>5. Mysql高可用方案有哪些</font></h4><ul>
<li>主从复制方案<ul>
<li>这是MySQL自身提供的一种高可用解决方案，数据同步方法采用的是<code>MySQL replication</code>技术。<code>MySQL replication</code>就是从服务器到主服务器拉取二进制日志文件，然后再将日志文件解析成相应的SQL在从服务器上重新执行一遍主服务器的操作，通过这种方式保证数据的一致性</li>
<li>为了达到更高的可用性，在实际的应用环境中，一般都是采用<code>MySQL replication</code>技术配合高可用集群软件<code>keepalived</code>来实现自动<code>failover</code>，这种方式可以实现95.000%的SLA</li>
</ul>
</li>
<li>MMM&#x2F;MHA高可用方案<ul>
<li>MMM提供了MySQL主主复制配置的监控、故障转移和管理的一套可伸缩的脚本套件。在MMM高可用方案中，典型的应用是双主多从架构，通过MySQL replication技术可以实现两个服务器互为主从，且在任何时候只有一个节点可以被写入，避免了多点写入的数据冲突</li>
<li>同时，当可写的主节点故障时，MMM套件可以立刻监控到，然后将服务自动切换到另一个主节点，继续提供服务，从而实现MySQL的高可用</li>
</ul>
</li>
<li>Heartbeat&#x2F;SAN高可用方案<ul>
<li>在这个方案中，处理failover的方式是高可用集群软件Heartbeat，它监控和管理各个节点间连接的网络，并监控集群服务，当节点出现故障或者服务不可用时，自动在其他节点启动集群服务</li>
<li>在数据共享方面，通过SAN（Storage Area Network）存储来共享数据，这种方案可以实现99.990%的SLA</li>
</ul>
</li>
<li>Heartbeat&#x2F;DRBD高可用方案<ul>
<li>这个方案处理failover的方式上依旧采用Heartbeat，不同的是，在数据共享方面，采用了基于块级别的数据同步软件DRBD来实现</li>
<li>DRBD是一个用软件实现的、无共享的、服务器之间镜像块设备内容的存储复制解决方案。和SAN网络不同，它并不共享存储，而是通过服务器之间的网络复制数据</li>
</ul>
</li>
<li>NDB CLUSTER高可用方案<ul>
<li>国内用NDB集群的公司非常少，貌似有些银行有用。NDB集群不需要依赖第三方组件，全部都使用官方组件，能保证数据的一致性，某个数据节点挂掉，其他数据节点依然可以提供服务，管理节点需要做冗余以防挂掉</li>
<li>缺点是：管理和配置都很复杂，而且某些SQL语句例如join语句需要避免</li>
</ul>
</li>
</ul>
<h4 id="6-Mysql中utf8和utf8mb4区别"><a href="#6-Mysql中utf8和utf8mb4区别" class="headerlink" title="6. Mysql中utf8和utf8mb4区别"></a><font color=DarkOrange>6. Mysql中utf8和utf8mb4区别</font></h4><ul>
<li>MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。当然，为了节省空间，一般情况下使用utf8也就可以了</li>
<li>Mysql支持的utf8编码最大字符长度为3字节，如果遇到4字节的宽字符就会插入异常了。三个字节的UTF-8最大能编码的Unicode字符是0xffff，也就是Unicode中的基本多文种平面(BMP)。任何不在基本多文本平面的Unicode字符，都无法使用Mysql的utf8字符集存储</li>
<li>包括 Emoji 表情(Emoji是一种特殊的Unicode编码，常见于ios和android手机上)，和很多不常用的汉字，以及任何新增的Unicode字符等等</li>
<li>Mysql中保存4字节长度的UTF-8字符，需要使用utf8mb4字符集，但只有5.5.3版本以后的才支持(查看版本： select version();)。因此呢，为了获取更好的兼容性，应该总是使用utf8mb4而非utf8</li>
<li>对于CHAR类型数据，utf8mb4会多消耗一些空间，根据Mysql官方建议，使用VARCHAR替代CHAR</li>
</ul>
<h4 id="7-Mysql中乐观锁和悲观锁区别"><a href="#7-Mysql中乐观锁和悲观锁区别" class="headerlink" title="7. Mysql中乐观锁和悲观锁区别"></a><font color=DarkOrange>7. Mysql中乐观锁和悲观锁区别</font></h4><ul>
<li><p>悲观锁(Pessimistic Lock)</p>
<ul>
<li>悲观锁顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁</li>
<li>传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁</li>
</ul>
</li>
<li><p>乐观锁(Optimistic Lock)</p>
<ul>
<li>乐观锁顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制</li>
<li>乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于<code>write_condition</code>机制的其实都是提供的乐观锁</li>
<li>乐观锁的特点先进行业务操作，不到万不得已不去拿锁。即“乐观”的认为拿锁多半是会成功的，因此在进行完业务操作需要实际更新数据的最后一步再去拿一下锁就好</li>
</ul>
</li>
<li><p>两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适</p>
</li>
</ul>
<h4 id="8-Mysql索引主要是哪些"><a href="#8-Mysql索引主要是哪些" class="headerlink" title="8. Mysql索引主要是哪些"></a><font color=DarkOrange>8. Mysql索引主要是哪些</font></h4><p>索引的目的在于提高查询效率</p>
<ul>
<li>UNIQUE(唯一索引)：不可以出现相同的值，可以有NULL值</li>
<li>INDEX(普通索引)：允许出现相同的索引内容</li>
<li>PROMARY KEY(主键索引)：不允许出现相同的值</li>
<li>fulltext index(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维</li>
<li>组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一</li>
</ul>
<hr>
<h5 id="8-1-索引的缺点"><a href="#8-1-索引的缺点" class="headerlink" title="8.1 索引的缺点"></a><font color=DarkOrange>8.1 索引的缺点</font></h5><ul>
<li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT，UPDATE和DELETE。因为更新表时，mysql不仅要保存数据，还要保存一下索引文件</li>
<li>建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在要给大表上建了多种组合索引，索引文件会膨胀很宽， 索引只是提高效率的一个方式，如果mysql有大数据量的表，就要花时间研究建立最优的索引，或优化查询语句</li>
</ul>
<hr>
<h5 id="8-2-索引使用技巧"><a href="#8-2-索引使用技巧" class="headerlink" title="8.2 索引使用技巧"></a><font color=DarkOrange>8.2 索引使用技巧</font></h5><ul>
<li><strong>索引不会包含有NULL的列：</strong> 只要列中包含有NULL值，都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此符合索引就是无效的</li>
<li><strong>使用短索引：</strong> 对串列进行索引，如果可以就应该指定一个前缀长度。例如，如果有一个char（255）的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I&#x2F;O操作</li>
<li><strong>索引列排序：</strong>mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作，尽量不要包含多个列的排序，如果需要最好给这些列建复合索引</li>
<li><strong>like语句操作：</strong>一般情况下不鼓励使用like操作，如果非使用不可，注意正确的使用方式。<code>like ‘%aaa%’</code>不会使用索引，而<code>like ‘aaa%’</code>可以使用索引</li>
<li>不要在列上进行运算</li>
<li>不使用<code>NOT IN</code> 、<code>&lt;&gt;</code>、<code>！=</code>操作，但<code>&lt;</code>，<code>&lt;=</code>，<code>=</code>，<code>&gt;</code>，<code>&gt;=</code>，BETWEEN，IN是可以用到索引的</li>
<li>索引要建立在经常进行select操作的字段上。这是因为，如果这些列很少用到，那么有无索引并不能明显改变查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求</li>
<li>索引要建立在值比较唯一的字段上。</li>
<li>对于那些定义为text、image和bit数据类型的列不应该增加索引。因为这些列的数据量要么相当大，要么取值很少</li>
<li>在where和join中出现的列需要建立索引。</li>
<li>where的查询条件里有不等号(where column !&#x3D; …)，mysql将无法使用索引。</li>
<li>如果where字句的查询条件里使用了函数(如：where DAY(column)&#x3D;…)，mysql将无法使用索引</li>
<li>在join操作中(需要从多个数据表提取数据时)，mysql只有在主键和外键的数据类型相同时才能使用索引，否则及时建立了索引也不会使用</li>
</ul>
<hr>
<h5 id="8-3-组合索引的作用"><a href="#8-3-组合索引的作用" class="headerlink" title="8.3 组合索引的作用"></a><font color=DarkOrange>8.3 组合索引的作用</font></h5><ul>
<li>减少开销<ul>
<li>建一个组合索引(col1，col2，col3)，实际相当于建了(col1)，(col1，col2)，(col1，col2，col3)三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用组合索引会大大的减少开销</li>
</ul>
</li>
<li>覆盖索引<ul>
<li>通常指一个查询语句的执行只用从索引中就能够取得，不必从数据表中读取。也可以称之为实现了索引覆盖</li>
<li>对组合索引(col1，col2，col3)，如果有如下的<code>sql: select col1，col2，col3 from test where col1=1 and col2=2</code></li>
<li>那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机io操作。减少io操作，特别的随机io其实是dba主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一</li>
</ul>
</li>
<li>效率高<ul>
<li>索引列越多，通过索引筛选出的数据越快</li>
</ul>
</li>
</ul>
<h4 id="9-Mysql联合索引最左匹配原则"><a href="#9-Mysql联合索引最左匹配原则" class="headerlink" title="9. Mysql联合索引最左匹配原则"></a><font color=DarkOrange>9. Mysql联合索引最左匹配原则</font></h4><ul>
<li>在MySQL建立联合索引时会遵守最左前缀匹配原则，即最左优先<ul>
<li>在检索数据时从联合索引的最左边开始匹配，Mysql会一直向右匹配直到遇到范围查询（<code>&gt;、&lt;、between、like</code>）就停止匹配了</li>
<li>就比如 <code>a=3 and b=4 and c&gt;5 and d=6</code>如果建立(abcd)顺序的索引，d就用不到索引了，如果建立(abdc)的索引则都可以用到索引，其中abd的顺序可以任意调整，因为查询优化器会重新编排（即使是c&gt;5 and b&#x3D;4 and d&#x3D;6 and a&#x3D;3也会全部用到 abdc索引 ）</li>
</ul>
</li>
<li><code>=</code>和<code>in</code>可以乱序，比如<code>a=1 and b=2 and c=3</code> 建立(abc)索引可以任意顺序，mysql查询优化器会优化顺序<ul>
<li>这里需要注意下，比如abc索引 那么只要查询条件有a即可用到abc索引（如abc ab ac a），没有a就用不到</li>
<li>最左前缀匹配成因：Mysql是创建复合索引的规则是根据索引最左边的字段进行排序，在第一个字段排序的基础上再进行第二个字段排序，类似于order by col1，col2… 所以第一个字段是绝对有序的 第二个字段就是无序的了，所以Mysql强调最左前缀匹配</li>
</ul>
</li>
</ul>
<h4 id="10-聚簇索引和非聚簇索引区别"><a href="#10-聚簇索引和非聚簇索引区别" class="headerlink" title="10. 聚簇索引和非聚簇索引区别"></a><font color=DarkOrange>10. 聚簇索引和非聚簇索引区别</font></h4><ul>
<li>聚簇索引与非聚簇索引的区别是：叶子节点是否存放一整行记录</li>
<li>InnoDB 主键使用的是聚簇索引，MyISAM 不管是主键索引，还是二级索引使用的都是非聚簇索引</li>
<li>对于聚簇索引表来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)</li>
<li>对于非聚簇索引表来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据</li>
<li>因此，聚簇索引的叶子节点就是数据节点，而非聚簇索引的叶子节点仍然是索引节点，只不过有指向对应数据块的指针</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7lczbhkshj318611ik0y.jpg" alt="image.png" style="zoom: 20%;" /></div>

<h4 id="11-如何查询一个字段是否命中了索引"><a href="#11-如何查询一个字段是否命中了索引" class="headerlink" title="11. 如何查询一个字段是否命中了索引"></a><font color=DarkOrange>11. 如何查询一个字段是否命中了索引</font></h4><ul>
<li>通过explain sql可看下SQL是否走了索引，很快对比出来 </li>
<li>当一个sql中索引字段为int类型时，例如搜索条件<code>where num=&quot;111&quot;</code>与<code>where num=111</code>都可以使用该字段的索引。当一个中索引字段为varchar类型时，例如搜索条件<code>where num=&quot;111&quot;</code>可以使用索引，<code>where num=111</code>不可以使用索引</li>
</ul>
<h4 id="12-Mysql中查询数据什么情况下不会命中索引"><a href="#12-Mysql中查询数据什么情况下不会命中索引" class="headerlink" title="12. Mysql中查询数据什么情况下不会命中索引"></a><font color=DarkOrange>12. Mysql中查询数据什么情况下不会命中索引</font></h4><ul>
<li>索引规范不合理，sql解析器不命中索引</li>
<li>表中索引是以表中数据量字段最多的建立的索引，sql解析器不命中索引(实际就是索引没用，最后全局查找了)</li>
<li>bool的字段做索引，sql选择器不命中索引</li>
<li>模糊查询 %like</li>
<li>索引列参与计算，使用了函数</li>
<li>非最左前缀顺序</li>
<li>where对null判断</li>
<li>where不等于</li>
<li>or操作有至少一个字段没有索引</li>
<li>需要回表的查询结果集过大（超过配置的范围）</li>
</ul>
<h4 id="13-Mysql中的MVCC是什么"><a href="#13-Mysql中的MVCC是什么" class="headerlink" title="13. Mysql中的MVCC是什么"></a><font color=DarkOrange>13. Mysql中的MVCC是什么</font></h4><p>数据库并发控制——锁:Multiversion (version) concurrency control (MCC or MVCC) 多版本并发控制 ，它是数据库管理系统一种常见的并发控制</p>
<p>并发控制常用的是锁，当线程要对一个共享资源进行操作的时候，加锁是一种非常简单粗暴的方法(事务开始时给 DQL 加读锁，给 DML 加写锁)，这种锁是一种 悲观 的实现方式，也就是说这会给其他事务造成堵塞，从而影响数据库性能</p>
<p>其中在数据库中最常见的就是悲观锁和乐观锁：</p>
<ul>
<li>悲观锁：当一个线程需要对共享资源进行操作的时候，首先对共享资源进行加锁，当该线程持有该资源的锁的时候，其他线程对该资源进行操作的时候会被阻塞.</li>
<li>乐观锁：当一个线程需要对一个共享资源进行操作的时候，不对它进行加锁，而是在操作完成之后进行判断。比如乐观锁会通过一个版本号控制，如果操作完成后通过版本号进行判断在该线程操作过程中是否有其他线程已经对该共享资源进行操作了，如果有则通知操作失败，如果没有则操作成功，当然除了版本号还有CAS，如果不了解的可以去学习一下，这里不做过多涉及</li>
</ul>
<p>MVCC的两种读形式：</p>
<ul>
<li>快照读：读取的只是当前事务的可见版本，不用加锁。而你只要记住 简单的 <code>select</code>操作就是快照读(select * from table where id &#x3D; xxx)</li>
<li>当前读：读取的是当前版本，比如 特殊的读操作，更新&#x2F;插入&#x2F;删除操作</li>
</ul>
<p>MVCC的实现原理：</p>
<p>MVCC 使用了“三个隐藏字段”来实现版本并发控制，MySQL在创建建表的时候 innoDB 创建的真正的三个隐藏列吧</p>
<table>
<thead>
<tr>
<th align="left">RowID</th>
<th align="left">DB_TRX_ID</th>
<th align="left">DB_ROLL_PTR</th>
<th align="left">id</th>
<th align="left">name</th>
<th align="left">password</th>
</tr>
</thead>
<tbody><tr>
<td align="left">自动创建的id</td>
<td align="left">事务id</td>
<td align="left">回滚指针</td>
<td align="left">id</td>
<td align="left">name</td>
<td align="left">password</td>
</tr>
</tbody></table>
<ul>
<li>RowID：隐藏的自增ID，当建表没有指定主键，InnoDB会使用该RowID创建一个聚簇索引</li>
<li>DB_TRX_ID：最近修改（更新&#x2F;删除&#x2F;插入）该记录的事务ID</li>
<li>DB_ROLL_PTR：回滚指针，指向这条记录的上一个版本</li>
</ul>
<p>其实还有一个删除的flag字段，用来判断该行记录是否已经被删除。而 MVCC 使用的是其中的 事务字段，回滚指针字段，是否删除字段</p>
<h4 id="14-Mvcc和Redolog和Undolog以及Binlog有什么不同"><a href="#14-Mvcc和Redolog和Undolog以及Binlog有什么不同" class="headerlink" title="14. Mvcc和Redolog和Undolog以及Binlog有什么不同"></a><font color=DarkOrange>14. Mvcc和Redolog和Undolog以及Binlog有什么不同</font></h4><ul>
<li>Mvcc<ul>
<li>MVCC多版本并发控制是MySQL中基于乐观锁理论实现隔离级别的方式，用于读已提交和可重复读取隔离级别的实现</li>
<li>在MySQL中，会在表中每一条数据后面添加两个字段，最近修改该行数据的事务ID，指向该行（undolog表中）回滚段的指针</li>
<li>Read View判断行的可见性，创建一个新事务时，copy一份当前系统中的活跃事务列表。意思是，当前不应该被本事务看到的其他事务id列表</li>
</ul>
</li>
<li>UndoLog<ul>
<li>UndoLog也就是我们常说的回滚日志文件 主要用于事务中执行失败，进行回滚，以及MVCC中对于数据历史版本的查看</li>
<li>由引擎层的InnoDB引擎实现，是逻辑日志，记录数据修改被修改前的值，比如”把id&#x3D;’B’ 修改为id &#x3D; ‘B2’ ，那么undo日志就会用来存放id &#x3D;’B’的记录”</li>
<li>当一条数据需要更新前，会先把修改前的记录存储在undolog中，如果这个修改出现异常，则会使用undo日志来实现回滚操作，保证事务的一致性</li>
<li>当事务提交之后，undo log并不能立马被删除，而是会被放到待清理链表中，待判断没有事物用到该版本的信息时才可以清理相应undolog。它保存了事务发生之前的数据的一个版本，用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读</li>
</ul>
</li>
<li>Redolog<ul>
<li>Redolog是重做日志文件是记录数据修改之后的值，用于持久化到磁盘中</li>
<li>Redolog包括两部分：一：是内存中的日志缓冲(redo log buffer)，该部分日志是易失性的；二：是磁盘上的重做日志文件(redo log file)，该部分日志是持久的</li>
<li>由引擎层的InnoDB引擎实现，是物理日志，记录的是物理数据页修改的信息，比如“某个数据页上内容发生了哪些改动”。当一条数据需要更新时，InnoDB会先将数据更新，然后记录redoLog 在内存中，然后找个时间将redoLog的操作执行到磁盘上的文件上</li>
<li>不管是否提交成功我都记录，你要是回滚了，那我连回滚的修改也记录。它确保了事务的持久性</li>
</ul>
</li>
<li>Binlog<ul>
<li>Binlog由Mysql的Server层实现，是逻辑日志，记录的是sql语句的原始逻辑，比如”把id&#x3D;’B’ 修改为id &#x3D; ‘B2’</li>
<li>Binlog会写入指定大小的物理文件中，是追加写入的，当前文件写满则会创建新的文件写入</li>
<li>产生:事务提交的时候，一次性将事务中的sql语句，按照一定的格式记录到binlog中</li>
<li>用于复制和恢复在主从复制中，从库利用主库上的binlog进行重播(执行日志中记录的修改逻辑)，实现主从同步。业务数据不一致或者错了，用binlog恢复</li>
</ul>
</li>
</ul>
<h4 id="15-Mysql读写分离以及主从同步"><a href="#15-Mysql读写分离以及主从同步" class="headerlink" title="15. Mysql读写分离以及主从同步"></a><font color=DarkOrange>15. Mysql读写分离以及主从同步</font></h4><ul>
<li>原理：主库将变更写binlog日志，然后从库连接到主库后，从库有一个IO线程，将主库的binlog日志拷贝到自己本地，写入一个中继日志中，接着从库中有一个sql线程会从中继日志读取binlog，然后执行binlog日志中的内容，也就是在自己本地再执行一遍sql，这样就可以保证自己跟主库的数据一致</li>
<li>问题：这里有很重要一点，就是从库同步主库数据的过程是串行化的，也就是说主库上并行操作，在从库上会串行化执行，由于从库从主库拷贝日志以及串行化执行sql特点，在高并发情况下，从库数据一定比主库慢一点，是有延时的，所以经常出现，刚写入主库的数据可能读不到了，要过几十毫秒，甚至几百毫秒才能读取到。还有一个问题，如果突然主库宕机了，然后恰巧数据还没有同步到从库，那么有些数据可能在从库上是没有的，有些数据可能就丢失了。所以mysql实际上有两个机制，一个是半同步复制，用来解决主库数据丢失问题，一个是并行复制，用来解决主从同步延时问题</li>
<li>半同步复制：semi-sync复制，指的就是主库写入binlog日志后，就会将强制此时立即将数据同步到从库，从库将日志写入自己本地的relay log之后，接着会返回一个ack给主库，主库接收到至少一个从库ack之后才会认为写完成</li>
<li>并发复制：指的是从库开启多个线程，并行读取relay log中不同库的日志，然后并行重放不同库的日志，这样库级别的并行。（将主库分库也可缓解延迟问题）</li>
</ul>
<h4 id="16-InnoDB的关键特性"><a href="#16-InnoDB的关键特性" class="headerlink" title="16. InnoDB的关键特性"></a><font color=DarkOrange>16. InnoDB的关键特性</font></h4><ul>
<li>插入缓冲：对于非聚集索引的插入或更新操作，不是每一次直接插入到索引页中，而是先判断插入的非聚集索引页是否在缓冲池中，若在，则直接插入；若不在，则先放入到一个Insert Buffer对象中。然后再以一定的频率和情况进行Insert Buffer和辅助索引页子节点的merge（合并）操作，这时通常能将多个插入合并到一个操作中（因为在一个索引页中），这就大大提高了对于非聚集索引插入的性能</li>
<li>两次写：两次写带给InnoDB存储引擎的是数据页的可靠性，有经验的DBA也许会想，如果发生写失效，可以通过重做日志进行恢复。这是一个办法。但是必须清楚地认识到，如果这个页本身已经发生了损坏（物理到page页的物理日志成功页内逻辑日志失败），再对其进行重做是没有意义的。这就是说，在应用（apply）重做日志前，用户需要一个页的副本，当写入失效发生时，先通过页的副本来还原该页，再进行重做。在对缓冲池的脏页进行刷新时，并不直接写磁盘，而是会通过memcpy函数将脏页先复制到内存中的doublewrite buffer，之后通过doublewrite buffer再分两次，每次1MB顺序地写入共享表空间的物理磁盘上，这就是doublewrite</li>
<li>自适应哈希索引：InnoDB存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引</li>
<li>异步IO：为了提高磁盘操作性能，当前的数据库系统都采用异步IO（AIO）的方式来处理磁盘操作。AIO的另一个优势是可以进行IO Merge操作，也就是将多个IO合并为1个IO，这样可以提高IOPS的性能</li>
<li>刷新邻接页：当刷新一个脏页时，InnoDB存储引擎会检测该页所在区（extent）的所有页，如果是脏页，那么一起进行刷新。这样做的好处显而易见，通过AIO可以将多个IO写入操作合并为一个IO操作，故该工作机制在传统机械磁盘下有着显著的优势</li>
</ul>
<h4 id="17-Mysql如何保证一致性和持久性"><a href="#17-Mysql如何保证一致性和持久性" class="headerlink" title="17. Mysql如何保证一致性和持久性"></a><font color=DarkOrange>17. Mysql如何保证一致性和持久性</font></h4><ul>
<li>Mysql为了保证<code>ACID</code>中的一致性和持久性，使用了WAL(<code>Write-Ahead Logging</code>，先写日志再写磁盘)。<code>Redo log</code>就是一种WAL的应用</li>
<li>当数据库忽然掉电，再重新启动时，Mysql可以通过<code>Redo log</code>还原数据。也就是说，每次事务提交时，不用同步刷新磁盘数据文件，只需要同步刷新<code>Redo log</code>就足够了</li>
</ul>
<h4 id="18-为什么选择B-树作为索引结构"><a href="#18-为什么选择B-树作为索引结构" class="headerlink" title="18. 为什么选择B+树作为索引结构"></a><font color=DarkOrange>18. 为什么选择B+树作为索引结构</font></h4><ul>
<li>Hash索引：Hash索引底层是哈希表，哈希表是一种以key-value存储数据的结构，所以多个数据在存储关系上是完全没有任何顺序关系的，所以，对于区间查询是无法直接通过索引查询的，就需要全表扫描。所以，哈希索引只适用于等值查询的场景。而B+ 树是一种多路平衡查询树，所以他的节点是天然有序的（左子节点小于父节点、父节点小于右子节点），所以对于范围查询的时候不需要做全表扫描</li>
<li>二叉查找树：解决了排序的基本问题，但是由于无法保证平衡，可能退化为链表</li>
<li>平衡二叉树：通过旋转解决了平衡的问题，但是旋转操作效率太低</li>
<li>红黑树：通过舍弃严格的平衡和引入红黑节点，解决了AVL旋转效率过低的问题，但是在磁盘等场景下，树仍然太高，IO次数太多</li>
<li>B+树：在B树的基础上，将非叶节点改造为不存储数据纯索引节点，进一步降低了树的高度；此外将叶节点使用指针连接成链表，范围查询更加高效。此外，B+树，主要是查询效率高，O(logN)，可以充分利用磁盘预读的特性，多叉树，深度小，叶子结点有序且存储数据</li>
</ul>
<h4 id="19-InnoDB的行锁模式"><a href="#19-InnoDB的行锁模式" class="headerlink" title="19. InnoDB的行锁模式"></a><font color=DarkOrange>19. InnoDB的行锁模式</font></h4><ul>
<li>共享锁(S)：用法lock in share mode，又称读锁，允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁<ul>
<li>若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改</li>
</ul>
</li>
<li>排他锁(X)：用法for update，又称写锁，允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集共享读锁和排他写锁<ul>
<li>若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。在没有索引的情况下，InnoDB只能使用表锁</li>
</ul>
</li>
</ul>
<h4 id="20-哈希-hash-比树-tree-更快，索引结构为什么要设计成树型"><a href="#20-哈希-hash-比树-tree-更快，索引结构为什么要设计成树型" class="headerlink" title="20. 哈希(hash)比树(tree)更快，索引结构为什么要设计成树型"></a><font color=DarkOrange>20. 哈希(hash)比树(tree)更快，索引结构为什么要设计成树型</font></h4><p>加速查找速度的数据结构，常见的有两类：</p>
<ul>
<li>哈希，例如HashMap，查询&#x2F;插入&#x2F;修改&#x2F;删除的平均时间复杂度都是O(1)</li>
<li>树，例如平衡二叉搜索树，查询&#x2F;插入&#x2F;修改&#x2F;删除的平均时间复杂度都是O(lg(n))</li>
</ul>
<p>哈希只能满足等值查询，不满足范围和大小查询，其次哈希不可以排序。Mysql是用等值查询，用树的话，等值查询只需要顺序遍历即可。但是对于排序查询的sql需求：分组：<code>group by</code> ，排序：<code>order by</code> ，比较：<code>&lt;、&gt;</code>等，哈希型的索引，时间复杂度会退化为O(n)，而树型的“有序”特性，依然能够保持O(log(n)) 的高效率</p>
<h4 id="21-为什么索引的key长度不能太长"><a href="#21-为什么索引的key长度不能太长" class="headerlink" title="21. 为什么索引的key长度不能太长"></a><font color=DarkOrange>21. 为什么索引的key长度不能太长</font></h4><p>key 太长会导致一个页当中能够存放的 key 的数目变少，间接导致索引树的页数目变多，索引层次增加，从而影响整体查询变更的效率</p>
<h4 id="22-Mysql的数据如何恢复到任意时间点"><a href="#22-Mysql的数据如何恢复到任意时间点" class="headerlink" title="22. Mysql的数据如何恢复到任意时间点"></a><font color=DarkOrange>22. Mysql的数据如何恢复到任意时间点</font></h4><p>恢复到任意时间点以定时的做全量备份，以及备份增量的 binlog 日志为前提。恢复到任意时间点首先将全量备份恢复之后，再此基础上回放增加的 binlog 直至指定的时间点</p>
<h4 id="23-Mysql为什么加了索引可以加快查询"><a href="#23-Mysql为什么加了索引可以加快查询" class="headerlink" title="23. Mysql为什么加了索引可以加快查询"></a><font color=DarkOrange>23. Mysql为什么加了索引可以加快查询</font></h4><p>在数据十分庞大的时候，索引可以大大加快查询的速度，这是因为使用索引后可以不用扫描全表来定位某行的数据，而是先通过索引表找到该行数据对应的物理地址然后访问相应的数据</p>
<ul>
<li>优势：可以快速检索，减少I&#x2F;O次数，加快检索速度；根据索引分组和排序，可以加快分组和排序</li>
<li>劣势：索引本身也是表，因此会占用存储空间，一般来说，索引表占用的空间的数据表的1.5倍；索引表的维护和创建需要时间成本，这个成本随着数据量增大而增大；构建索引会降低数据表的修改操作（删除，添加，修改）的效率，因为在修改数据表的同时还需要修改索引表</li>
</ul>
<h4 id="24-Explain命令有什么用"><a href="#24-Explain命令有什么用" class="headerlink" title="24. Explain命令有什么用"></a><font color=DarkOrange>24. Explain命令有什么用</font></h4><p>在开发的过程中，我们有时会用<strong>慢查询</strong>去记录一些执行时间比较久的Sql语句，找出这些Sql语句并不意味着完事了，这个时候我们就需要用到explain这个命令来查看一个这些Sql语句的执行计划，查看该Sql语句有没有使用上了索引，有没有做全表扫描，这些都可以通过explain命令来查看</p>
<p>expain出来的信息有10列，分别是<code>id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">- <span class="built_in">id</span>：select选择标识符</span><br><span class="line">- select_type：表示查询的类型</span><br><span class="line">- table：输出结果集的表</span><br><span class="line">- partitions：匹配的分区</span><br><span class="line">- <span class="built_in">type</span>：表示表的连接类型</span><br><span class="line">- possible_keys：表示查询时，可能使用的索引</span><br><span class="line">- key：表示实际使用的索引</span><br><span class="line">- key_len：索引字段的长度</span><br><span class="line">- ref：列与索引的比较</span><br><span class="line">- rows：扫描出的行数(估算的行数)</span><br><span class="line">- filtered：按表条件过滤的行百分比</span><br><span class="line">- Extra：执行情况的描述和说明</span><br></pre></td></tr></table></figure>

<ul>
<li><p>id：select选择标识符</p>
<p>id是Sql执行的顺序的标识，Sql从大到小的执行</p>
<ul>
<li>id相同时，执行顺序由上至下</li>
<li>如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li>
<li>id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</li>
</ul>
</li>
<li><p>select_type：表示查询的类型</p>
<p>查询中每个select子句的类型</p>
<ul>
<li>SIMPLE(简单SELECT，不使用UNION或子查询等)</li>
<li>PRIMARY(查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</li>
<li>UNION(UNION中的第二个或后面的SELECT语句)</li>
<li>DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</li>
<li>UNION RESULT(UNION的结果)</li>
<li>SUBQUERY(子查询中的第一个SELECT)</li>
<li>DEPENDENT SUBQUERY(子查询中的第一个SELECT，取决于外面的查询)</li>
<li>DERIVED(派生表的SELECT，FROM子句的子查询)</li>
<li>UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</li>
</ul>
</li>
<li><p>table：输出结果集的表</p>
<ul>
<li>table显示这一行的数据是关于哪张表的，有时不是真实的表名字，看到的是derivedx</li>
</ul>
</li>
<li><p>partitions：匹配的分区</p>
</li>
<li><p>type：表示表的连接类型</p>
<p>type表示Mysql在表中找到所需行的方式，又称“访问类型”。常用的类型有： ALL， index， range， ref， eq_ref， const， system， NULL（从左到右，性能从差到好）</p>
<ul>
<li>ALL：Full Table Scan， Mysql将遍历全表以找到匹配的行</li>
<li>index：Full Index Scan，index与ALL区别为index类型只遍历索引树</li>
<li>range：只检索给定范围的行，使用一个索引来选择行</li>
<li>ref：表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li>
<li>eq_ref：类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</li>
<li>const、system：当Mysql对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，Mysql就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system</li>
<li>NULL：Mysql在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成</li>
</ul>
</li>
<li><p>possible_keys：表示查询时，可能使用的索引</p>
<ul>
<li>possible_keys指出Mysql能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用</li>
<li>该列完全独立于<code>EXPLAIN</code>输出所示的表的次序。这意味着在<code>possible_keys</code>中的某些键实际上不能按生成的表次序使用</li>
<li>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</li>
</ul>
</li>
<li><p>key：表示实际使用的索引</p>
<ul>
<li>key列显示MySql实际决定使用的键（索引）</li>
<li>如果没有选择索引，键是NULL。要想强制Mysql使用或忽视<code>possible_keys</code>列中的索引，在查询中使用<code>FORCE INDEX、USE INDEX</code>或者<code>IGNORE INDEX</code></li>
</ul>
</li>
<li><p>key_len：索引字段的长度</p>
<ul>
<li>key_len表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）不损失精确性的情况下，长度越短越好</li>
</ul>
</li>
<li><p>ref：列与索引的比较</p>
<ul>
<li>ref表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li>
</ul>
</li>
<li><p>rows：扫描出的行数(估算的行数)</p>
<ul>
<li>rows表示Mysql根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</li>
</ul>
</li>
<li><p>filtered：按表条件过滤的行百分比</p>
</li>
<li><p>Extra：执行情况的描述和说明</p>
<p>该列包含Mysql解决查询的详细信息，有以下几种情况：</p>
<ul>
<li>Using where：列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</li>
<li>Using temporary：表示Mysql需要使用临时表来存储结果集，常见于排序和分组查询</li>
<li>Using filesort：Mysql中无法利用索引完成的排序操作称为“文件排序”</li>
<li>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能</li>
<li>Impossible where：这个值强调了where语句会导致没有符合条件的行</li>
<li>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</li>
</ul>
</li>
</ul>
<h4 id="25-MySQL优化"><a href="#25-MySQL优化" class="headerlink" title="25. MySQL优化"></a><font color=DarkOrange>25. MySQL优化</font></h4><ul>
<li>避免不走索引的场景</li>
<li>select语句其他优化</li>
<li>增删改DML语句优化</li>
<li>查询条件优化</li>
<li>建表优化</li>
</ul>
<h5 id="25-1-避免不走索引的场景"><a href="#25-1-避免不走索引的场景" class="headerlink" title="25.1 避免不走索引的场景"></a><font color=DarkOrange>25.1 避免不走索引的场景</font></h5><ol>
<li>尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描</li>
<li>尽量避免使用<code>in</code>和<code>not in </code>，会导致引擎走全表扫描</li>
<li>尽量避免使用<code>or</code>，会导致数据库引擎放弃索引进行全表扫描</li>
<li>尽量避免进行<code>null</code>值的判断，会导致数据库引擎放弃索引进行全表扫描</li>
<li>尽量避免在<code>where</code>条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描</li>
<li>当数据量大时，避免使用<code>where 1=1</code>的条件，通常为了方便拼装查询条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描</li>
<li>条件查询不能用<code>&lt;&gt;</code>或者<code>!=</code></li>
<li><code>where</code>条件仅包含复合索引非前置列</li>
<li>隐式类型转换造成不使用索引</li>
<li><code>order by</code>条件要与<code>where</code>中条件一致，否则<code>order by</code>不会利用索引进行排序</li>
<li>正确使用<code>hint</code>优化语句</li>
</ol>
<h5 id="25-2-select语句其他优化"><a href="#25-2-select语句其他优化" class="headerlink" title="25.2 select语句其他优化"></a><font color=DarkOrange>25.2 select语句其他优化</font></h5><ol>
<li>避免出现<code>select *</code></li>
<li>避免出现不确定结果的函数</li>
<li>多表关联查询时，小表在前，大表在后</li>
<li>使用表的别名</li>
<li>用<code>where</code>语句替换<code>HAVING</code>字句</li>
<li>调整<code>where</code>字句中的连接顺序</li>
</ol>
<h5 id="25-3-增删改DML语句优化"><a href="#25-3-增删改DML语句优化" class="headerlink" title="25.3 增删改DML语句优化"></a><font color=DarkOrange>25.3 增删改DML语句优化</font></h5><ol>
<li>大批量插入数据</li>
<li>适当使用<code>commit</code></li>
<li>避免重复查询更新的数据</li>
<li>查询优先还是更新<code>(insert、update、delete)</code>优先</li>
</ol>
<h5 id="25-4-查询条件优化"><a href="#25-4-查询条件优化" class="headerlink" title="25.4 查询条件优化"></a><font color=DarkOrange>25.4 查询条件优化</font></h5><ol>
<li>对于复杂的查询，可以使用中间临时表暂存数据</li>
<li>优化<code>group by</code>语句</li>
<li>优化<code>join</code>语句</li>
<li>优化<code>union</code>语句</li>
<li>拆分复杂<code>SQL</code>为多个小<code>SQL</code>，避免大事务</li>
<li>使用<code>truncate</code>代替<code>delete</code></li>
<li>使用合理的分页方式以提高分页效率</li>
</ol>
<h5 id="25-5-建表优化"><a href="#25-5-建表优化" class="headerlink" title="25.5 建表优化"></a><font color=DarkOrange>25.5 建表优化</font></h5><ol>
<li>在表中建立索引，优先考虑<code>where、order by</code>使用到的字段</li>
<li>尽量使用数字类型（性别：男：1，女：2），若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储的开销</li>
<li>查询数据量大的表，会造成查询缓慢。主要的原因是扫描行数过多，这个时候可以通过程序，分段分页进行查询，循环遍历，将结果合并处理进行展示</li>
<li>用<code>varchar/nvarchar</code>代替<code>char/nchar</code></li>
</ol>
<h4 id="26-SQL注入"><a href="#26-SQL注入" class="headerlink" title="26. SQL注入"></a><font color=DarkOrange>26. SQL注入</font></h4><p>Sql注入攻击是通过将恶意的Sql查询或添加语句插入到应用的输入参数中，再在后台Sql服务器上解析执行进行的攻击，它目前黑客对数据库进行攻击的最常用手段之一。</p>
<p><strong>避免SQL注入：</strong></p>
<ul>
<li>参数校验，校验数据的类型，长度，特殊字符，数据库关键词等</li>
<li>代码层面防止SQL注入攻击的最佳方案是SQL预编译，尽量不写SQL原生语句，使用ORM</li>
<li>严格限制数据库权限</li>
<li>避免直接响应一些SQL异常信息，SQL发生异常后，自定义异常进行响应</li>
</ul>
<h4 id="27-MySQL、MongoDB、Redis区别，适用场景"><a href="#27-MySQL、MongoDB、Redis区别，适用场景" class="headerlink" title="27. MySQL、MongoDB、Redis区别，适用场景"></a><font color=DarkOrange>27. MySQL、MongoDB、Redis区别，适用场景</font></h4><h5 id="27-1-MySQL"><a href="#27-1-MySQL" class="headerlink" title="27.1 MySQL"></a><font color=DarkOrange>27.1 MySQL</font></h5><ol>
<li>高度事务性系统。例如银行或会计系统，传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序</li>
<li>传统的商业智能应用，针对特定问题的<code>BI</code>数据库会产生高度优化的查询方式，对于此类应用，数据仓库可能是更合适的选择</li>
</ol>
<h5 id="27-2-MongoDB"><a href="#27-2-MongoDB" class="headerlink" title="27.2 MongoDB"></a><font color=DarkOrange>27.2 MongoDB</font></h5><ol>
<li>网站数据：适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性</li>
<li>缓存：由于性能很高，也适合作为信息基础设施的缓存层，在系统重启之后，搭建的持久化缓存可以避免下层的数据源过载</li>
<li>大尺寸、低价值的数据也是<code>MongoDB</code>的最佳选择，使用传统的关系型数据库存储一些数据时可能会比较贵，在此之前很多程序员往往会选择传统的文件进行存储</li>
<li>高伸缩的场景，非常适合由数十台或数百台服务器组成的数据库</li>
<li>用于对象及<code>json</code>数据的存储，<code>MongoDB</code>的<code>bson</code>数据格式非常适合文档格式化的存储及查询</li>
</ol>
<h5 id="27-3-Redis"><a href="#27-3-Redis" class="headerlink" title="27.3 Redis"></a><font color=DarkOrange>27.3 Redis</font></h5><ol>
<li>用来做缓存：<code>Redis</code>的所有数据是存放在内存中的</li>
<li>可以在某些特定应用场景下替代传统数据库：比如社交类的应用</li>
<li>在一些大型系统中，巧妙的实现一些特定的功能：<code>session</code>共享、购物车</li>
<li><code>MongoDB</code>不支持<code>SQL</code>语句</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生02-编写Go程序</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F02-%E7%BC%96%E5%86%99Go%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>Go语言进阶知识整理</p>
<h4 id="1-线程加锁"><a href="#1-线程加锁" class="headerlink" title="1. 线程加锁"></a><font color=DarkOrange>1. 线程加锁</font></h4><h5 id="1-1-锁"><a href="#1-1-锁" class="headerlink" title="1.1 锁"></a><font color=DarkOrange>1.1 锁</font></h5><ul>
<li>Go 语言不仅仅提供基于 CSP 的通讯模型，也支持基于共享内存的多线程数据访问</li>
<li>Sync 包提供了锁的基本原语</li>
<li>sync.Mutex 互斥锁<ul>
<li>Lock()加锁，Unlock 解锁</li>
</ul>
</li>
<li>sync.RWMutex 读写分离锁<ul>
<li>不限制并发读，只限制并发写和并发读写</li>
</ul>
</li>
<li>sync.WaitGroup<ul>
<li>等待一组 goroutine 返回</li>
</ul>
</li>
<li>sync.Once<ul>
<li>保证某段代码只执行一次</li>
</ul>
</li>
<li>sync.Cond<ul>
<li>让一组 goroutine 在满足特定条件时被唤醒</li>
</ul>
</li>
</ul>
<h5 id="1-2-Mutex示例"><a href="#1-2-Mutex示例" class="headerlink" title="1.2 Mutex示例"></a><font color=DarkOrange>1.2 Mutex示例</font></h5><p>Kubernetes 中的 informer factory</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Start initializes all requested informers.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *sharedInformerFactory)</span></span> Start(stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;) &#123;</span><br><span class="line">  f.lock.Lock()</span><br><span class="line">  <span class="keyword">defer</span> f.lock.Unlock()</span><br><span class="line">  <span class="keyword">for</span> informerType, informer := <span class="keyword">range</span> f.informers &#123;</span><br><span class="line">    <span class="keyword">if</span> !f.startedInformers[informerType] &#123;</span><br><span class="line">      <span class="keyword">go</span> informer.Run(stopCh)</span><br><span class="line">      f.startedInformers[informerType] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-WaitGroup示例"><a href="#1-3-WaitGroup示例" class="headerlink" title="1.3 WaitGroup示例"></a><font color=DarkOrange>1.3 WaitGroup示例</font></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CreateBatch create a batch of pods. All pods are created before waiting.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *PodClient)</span></span> CreateBatch(pods []*v1.Pod) []*v1.Pod &#123;</span><br><span class="line">  ps := <span class="built_in">make</span>([]*v1.Pod, <span class="built_in">len</span>(pods))</span><br><span class="line">  <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">  <span class="keyword">for</span> i, pod := <span class="keyword">range</span> pods &#123;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>, pod *v1.Pod)</span></span> &#123;</span><br><span class="line">      <span class="keyword">defer</span> wg.Done()</span><br><span class="line">      <span class="keyword">defer</span> GinkgoRecover()</span><br><span class="line">      ps[i] = c.CreateSync(pod)</span><br><span class="line">    &#125;(i, pod)</span><br><span class="line">  &#125;</span><br><span class="line">  wg.Wait()</span><br><span class="line">  <span class="keyword">return</span> ps</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-4-Cond示例"><a href="#1-4-Cond示例" class="headerlink" title="1.4 Cond示例"></a><font color=DarkOrange>1.4 Cond示例</font></h5><p>Kubernetes 中的队列，标准的生产者消费者模式</p>
<p>cond: sync.NewCond(&amp;sync.Mutex{})</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add marks item as needing processing.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Type)</span></span> Add(item <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">  q.cond.L.Lock()</span><br><span class="line">  <span class="keyword">defer</span> q.cond.L.Unlock()</span><br><span class="line">  <span class="keyword">if</span> q.shuttingDown &#123;</span><br><span class="line">  	<span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> q.dirty.has(item) &#123;</span><br><span class="line">  	<span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  q.metrics.add(item)</span><br><span class="line">  q.dirty.insert(item)</span><br><span class="line">  <span class="keyword">if</span> q.processing.has(item) &#123;</span><br><span class="line">  	<span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  q.queue = <span class="built_in">append</span>(q.queue, item)</span><br><span class="line">  q.cond.Signal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Get blocks until it can return an item to be processed. If shutdown = true,</span></span><br><span class="line"><span class="comment">// the caller should end their goroutine. You must call Done with item when you</span></span><br><span class="line"><span class="comment">// have finished processing it.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Type)</span></span> Get() (item <span class="keyword">interface</span>&#123;&#125;, shutdown <span class="type">bool</span>) &#123;</span><br><span class="line">  q.cond.L.Lock()</span><br><span class="line">  <span class="keyword">defer</span> q.cond.L.Unlock()</span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">len</span>(q.queue) == <span class="number">0</span> &amp;&amp; !q.shuttingDown &#123;</span><br><span class="line">  	q.cond.Wait()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(q.queue) == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="comment">// We must be shutting down.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  item, q.queue = q.queue[<span class="number">0</span>], q.queue[<span class="number">1</span>:]</span><br><span class="line">  q.metrics.get(item)</span><br><span class="line">  q.processing.insert(item)</span><br><span class="line">  q.dirty.<span class="built_in">delete</span>(item)</span><br><span class="line">  <span class="keyword">return</span> item, <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-线程调度"><a href="#2-线程调度" class="headerlink" title="2. 线程调度"></a><font color=DarkOrange>2. 线程调度</font></h4><h5 id="2-1-深入理解Go语言线程调度"><a href="#2-1-深入理解Go语言线程调度" class="headerlink" title="2.1 深入理解Go语言线程调度"></a><font color=DarkOrange>2.1 深入理解Go语言线程调度</font></h5><ul>
<li>进程：资源分配的基本单位</li>
<li>线程：调度的基本单位</li>
<li>无论是线程还是进程，在 linux 中都以 task_struct 描述，从内核角度看，与进程无本质区别</li>
<li>Glibc 中的 pthread 库提供 NPTL（Native POSIX Threading Library）支持</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d2s6imj8j31b60gutem.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="2-2-Linux进程的内存使用"><a href="#2-2-Linux进程的内存使用" class="headerlink" title="2.2 Linux进程的内存使用"></a><font color=DarkOrange>2.2 Linux进程的内存使用</font></h5><p><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d2tl546nj31n40o27fy.jpg" alt="image.png"></p>
<h5 id="2-3-CPU对内存的访问"><a href="#2-3-CPU对内存的访问" class="headerlink" title="2.3 CPU对内存的访问"></a><font color=DarkOrange>2.3 CPU对内存的访问</font></h5><ul>
<li>CPU 上有个 Memory Management Unit（MMU） 单元</li>
<li>CPU 把虚拟地址给 MMU，MMU 去物理内存中查询页表，得到实际的物理地址</li>
<li>CPU 维护一份缓存 Translation Lookaside Buffer（TLB），缓存虚拟地址和物理地址的映射关系</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d2uw9hhqj31cy0jm40u.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="2-4-进程切换开销"><a href="#2-4-进程切换开销" class="headerlink" title="2.4 进程切换开销"></a><font color=DarkOrange>2.4 进程切换开销</font></h5><ul>
<li>直接开销<ul>
<li>切换页表全局目录（PGD）</li>
<li>切换内核态堆栈</li>
<li>切换硬件上下文（进程恢复前，必须装入寄存器的数据统称为硬件上下文）</li>
<li>刷新 TLB</li>
<li>系统调度器的代码执行</li>
</ul>
</li>
<li>间接开销<ul>
<li>CPU 缓存失效导致的进程需要到内存直接访问的 IO 操作变多</li>
</ul>
</li>
</ul>
<h5 id="2-5-线程切换开销"><a href="#2-5-线程切换开销" class="headerlink" title="2.5 线程切换开销"></a><font color=DarkOrange>2.5 线程切换开销</font></h5><ul>
<li>线程本质上只是一批共享资源的进程，线程切换本质上依然需要内核进行进程切换</li>
<li>一组线程因为共享内存资源，因此一个进程的所有线程共享虚拟地址空间，线程切换相比进程 切换，主要节省了虚拟地址空间的切换</li>
</ul>
<h5 id="2-6-用户线程"><a href="#2-6-用户线程" class="headerlink" title="2.6 用户线程"></a><font color=DarkOrange>2.6 用户线程</font></h5><p>无需内核帮助，应用程序在用户空间创建的可执行单元，创建销毁完全在用户态完成</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d2zvpsctj31e80lon5k.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="2-7-Goroutine"><a href="#2-7-Goroutine" class="headerlink" title="2.7 Goroutine"></a><font color=DarkOrange>2.7 Goroutine</font></h5><p>Go 语言基于 GMP 模型实现用户态线程</p>
<ul>
<li>G：表示 goroutine，每个 goroutine 都有自己的栈空间，定时器， 初始化的栈空间在 2k 左右，空间会随着需求增长</li>
<li>M：抽象化代表内核线程，记录内核线程栈信息，当 goroutine 调度 到线程时，使用该 goroutine 自己的栈信息</li>
<li>P：代表调度器，负责调度 goroutine，维护一个本地 goroutine 队 列，M 从 P 上获得 goroutine 并执行，同时还负责部分内存的管理</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d31hrzzjj30g608mwfr.jpg" alt="image.png" style="zoom:40%;" /></div>

<h5 id="2-8-GMP模型细节"><a href="#2-8-GMP模型细节" class="headerlink" title="2.8 GMP模型细节"></a><font color=DarkOrange>2.8 GMP模型细节</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d32u86bpj31ke0r8naq.jpg" alt="image.png" style="zoom:67%;" /></div>

<h5 id="2-9-G所处的位置"><a href="#2-9-G所处的位置" class="headerlink" title="2.9 G所处的位置"></a><font color=DarkOrange>2.9 G所处的位置</font></h5><ul>
<li>进程都有一个全局的 G 队列</li>
<li>每个 P 拥有自己的本地执行队列</li>
<li>有不在运行队列中的 G<ul>
<li>处于 channel 阻塞态的 G 被放在 sudog</li>
<li>脱离 P 绑定在 M 上的 G，如系统调用</li>
<li>为了复用，执行结束进入 P 的 gFree 列表中的 G</li>
</ul>
</li>
</ul>
<h5 id="2-10-Goroutine创建过程"><a href="#2-10-Goroutine创建过程" class="headerlink" title="2.10 Goroutine创建过程"></a><font color=DarkOrange>2.10 Goroutine创建过程</font></h5><ul>
<li>获取或者创建新的 Goroutine 结构体<ul>
<li>从处理器的 gFree 列表中查找空闲的 Goroutine</li>
<li>如果不存在空闲的 Goroutine，会通过 runtime.malg 创建一个栈大小足够的新结构体</li>
</ul>
</li>
<li>将函数传入的参数移到 Goroutine 的栈上</li>
<li>更新 Goroutine 调度相关的属性，更新状态为_Grunnable</li>
<li>返回的 Goroutine 会存储到全局变量 allgs 中</li>
</ul>
<h5 id="2-11-将Goroutine放到运行队列上"><a href="#2-11-将Goroutine放到运行队列上" class="headerlink" title="2.11 将Goroutine放到运行队列上"></a><font color=DarkOrange>2.11 将Goroutine放到运行队列上</font></h5><ul>
<li>Goroutine 设置到处理器的 runnext 作为下一个处理器执行的任务</li>
<li>当处理器的本地运行队列已经没有剩余空间时，就会把本地队列中的一部分 Goroutine 和待加入的 Goroutine通过 runtime.runqputslow 添加到调度器持有的全局运行队列上</li>
</ul>
<h5 id="2-12-调度器行为"><a href="#2-12-调度器行为" class="headerlink" title="2.12 调度器行为"></a><font color=DarkOrange>2.12 调度器行为</font></h5><ul>
<li>为了保证公平，当全局运行队列中有待执行的 Goroutine 时，通过 schedtick 保证有一定 几率会从全局的运行队列中查找对应的 Goroutine</li>
<li>从处理器本地的运行队列中查找待执行的 Goroutine</li>
<li>如果前两种方法都没有找到 Goroutine，会通过 runtime.findrunnable 进行阻塞地查找 Goroutine<ul>
<li>从本地运行队列、全局运行队列中查找</li>
<li>从网络轮询器中查找是否有 Goroutine 等待运行</li>
<li>通过 runtime.runqsteal 尝试从其他随机的处理器中窃取待运行的 Goroutine</li>
</ul>
</li>
</ul>
<h4 id="3-内存管理"><a href="#3-内存管理" class="headerlink" title="3. 内存管理"></a><font color=DarkOrange>3. 内存管理</font></h4><h5 id="3-1-堆内存管理"><a href="#3-1-堆内存管理" class="headerlink" title="3.1 堆内存管理"></a><font color=DarkOrange>3.1 堆内存管理</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d372j1f5j31jw0isdn7.jpg" alt="image.png" style="zoom:50%;" /></div>

<ul>
<li>初始化连续内存块作为堆</li>
<li>有内存申请的时候，Allocator 从堆内存的未分配区域分割小内存块</li>
<li>用链表将已分配内存连接起来</li>
<li>需要信息描述每个内存块的元数据：大小，是否使用，下一个内存块的地址等</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d38gftrpj316007uabs.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="3-2-TCMalloc"><a href="#3-2-TCMalloc" class="headerlink" title="3.2 TCMalloc"></a><font color=DarkOrange>3.2 TCMalloc</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d39qtrfpj31k00nu7fm.jpg" alt="image.png" style="zoom:67%;" /></div>

<ul>
<li><p>page:内存页，一块 8K 大小的内存空间。Go 与操作系统之间的内存申请和释放，都是以 page 为单位的</p>
</li>
<li><p>span: 内存块，一个或多个连续的 page 组成一个 span </p>
</li>
<li><p>sizeclass : 空间规格，每个 span 都带有一个 sizeclass ，标记着该 span 中的 page 应该如何 使用</p>
</li>
<li><p>object : 对象，用来存储一个变量数据内存空间，一个 span 在初始化时，会被切割成一堆等大 的 object ；假设 object 的大小是 16B ，span 大小是 8K ，那么就会把 span 中的 page 就会 被初始化 8K &#x2F; 16B &#x3D; 512 个 object 。所谓内存分配，就是分配一个 object 出去</p>
</li>
<li><p>对象大小定义</p>
<ul>
<li>小对象大小：0~256KB</li>
<li>中对象大小：256KB~1MB</li>
<li>大对象大小：&gt;1MB</li>
</ul>
</li>
<li><p>小对象的分配流程</p>
<ul>
<li>ThreadCache -&gt; CentralCache -&gt; HeapPage，大部分时候，ThreadCache 缓存都是足够的，不需要去访问 CentralCache 和 HeapPage，无系统调用配合无锁分配，分配效率是非常高的</li>
</ul>
</li>
<li><p>中对象分配流程</p>
<ul>
<li>直接在 PageHeap 中选择适当的大小即可，128 Page 的 Span 所保存的最大内存就是 1MB</li>
</ul>
</li>
<li><p>大对象分配流程</p>
<ul>
<li>从 large span set 选择合适数量的页面组成 span，用来存储数据</li>
</ul>
</li>
</ul>
<h5 id="3-3-Go语言内存分配"><a href="#3-3-Go语言内存分配" class="headerlink" title="3.3 Go语言内存分配"></a><font color=DarkOrange>3.3 Go语言内存分配</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d3d17knjj31kq0ni499.jpg" alt="image.png" style="zoom:67%;" /></div>

<ul>
<li><p>mcache：小对象的内存分配直接走</p>
<ul>
<li>size class 从 1 到 66，每个 class 两个 span</li>
<li>Span 大小是 8KB，按 span class 大小切分</li>
</ul>
</li>
<li><p>mcentral</p>
<ul>
<li>Span 内的所有内存块都被占用时，没有剩余空间继续分配对象，mcache 会向 mcentral 申请1个span，mcache 拿到 span 后继续分配对象</li>
<li>当 mcentral 向 mcache 提供 span 时，如果没有符合条件的 span，mcentral 会向 mheap 申请span</li>
</ul>
</li>
<li><p>mheap</p>
<ul>
<li>当 mheap 没有足够的内存时，mheap 会向 OS 申请内存</li>
<li>Mheap 把 Span 组织成了树结构，而不是链表</li>
<li>然后把 Span 分配到 heapArena 进行管理，它包含地址映射和 span 是否包含指针等位图<ul>
<li>为了更高效的分配、回收和再利用内存</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="3-4-内存回收"><a href="#3-4-内存回收" class="headerlink" title="3.4 内存回收"></a><font color=DarkOrange>3.4 内存回收</font></h5><ul>
<li>引用计数（Python，PHP，Swift）<ul>
<li>对每一个对象维护一个引用计数，当引用该对象的对象被销毁的时候，引用计数减 1，当引用计数为 0 的时候，回 收该对象</li>
<li>优点：对象可以很快的被回收，不会出现内存耗尽或达到某个阀值时才回收</li>
<li>缺点：不能很好的处理循环引用，而且实时维护引用计数，有也一定的代价</li>
</ul>
</li>
<li>标记-清除（Golang）<ul>
<li>从根变量开始遍历所有引用的对象，引用的对象标记为”被引用”，没有被标记的进行回收</li>
<li>优点：解决引用计数的缺点</li>
<li>缺点：需要 STW（stop the word），即要暂停程序运行</li>
</ul>
</li>
<li>分代收集（Java）<ul>
<li>按照生命周期进行划分不同的代空间，生命周期长的放入老年代，短的放入新生代，新生代的回收频率高于老年 代的频率</li>
</ul>
</li>
</ul>
<h5 id="3-5-mspan"><a href="#3-5-mspan" class="headerlink" title="3.5 mspan"></a><font color=DarkOrange>3.5 mspan</font></h5><ul>
<li>allocBits<ul>
<li>记录了每块内存分配的情况</li>
</ul>
</li>
<li>gcmarkBits<ul>
<li>记录了每块内存的引用情况，标记阶段对每块内存进行标记，有对象引用的内存标记为1，没有的标 记为 0</li>
</ul>
</li>
<li>这两个位图的数据结构是完全一致的，标记结束则进行内存回收，回收的时候，将 allocBits 指 向 gcmarkBits，标记过的则存在，未进行标记的则进行回收</li>
</ul>
<h5 id="3-6-GC工作流程"><a href="#3-6-GC工作流程" class="headerlink" title="3.6 GC工作流程"></a><font color=DarkOrange>3.6 GC工作流程</font></h5><p>Golang GC 的大部分处理是和用户代码并行的</p>
<ul>
<li>Mark：<ul>
<li>Mark Prepare: 初始化 GC 任务，包括开启写屏障 (write barrier) 和辅助 GC(mutator assist)，统计root对象的任 务数量等。这个过程需要STW</li>
<li>GC Drains: 扫描所有 root 对象，包括全局指针和 goroutine(G) 栈上的指针（扫描对应 G 栈时需停止该 G)，将其 加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。该过程后台并行执行</li>
</ul>
</li>
<li>Mark Termination：完成标记工作，重新扫描(re-scan)全局指针和栈。因为 Mark 和用户程序是并行的，所以在 Mark 过 程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下，这 个过程也是会 STW 的</li>
<li>Sweep：按照标记结果回收所有的白色对象，该过程后台并行执行</li>
<li>Sweep Termination：对未清扫的 span 进行清扫, 只有上一轮的 GC 的清扫工作完成才可以开始新一轮的 GC</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d3k484cmj31ci0ikwn9.jpg" alt="image.png" style="zoom:67%;" /></div>

<h5 id="3-7-三色标记"><a href="#3-7-三色标记" class="headerlink" title="3.7 三色标记"></a><font color=DarkOrange>3.7 三色标记</font></h5><ul>
<li>GC 开始时，认为所有 object 都是 白色，即垃圾</li>
<li>从 root 区开始遍历，被触达的 object 置成 灰色</li>
<li>遍历所有灰色 object，将他们内部的引用变量置成 灰色，自身置成 黑色</li>
<li>循环第 3 步，直到没有灰色 object 了，只剩下了黑白两种，白色的都是垃圾</li>
<li>对于黑色 object，如果在标记期间发生了写操作，写屏障会在真正赋值前将新对象标记为 灰色</li>
<li>标记过程中，mallocgc 新分配的 object，会先被标记成 黑色 再返回</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d3lpvwr3j31bw0940tw.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="3-8-垃圾回收触发机制"><a href="#3-8-垃圾回收触发机制" class="headerlink" title="3.8 垃圾回收触发机制"></a><font color=DarkOrange>3.8 垃圾回收触发机制</font></h5><ul>
<li>内存分配量达到阀值触发 GC<ul>
<li>每次内存分配时都会检查当前内存分配量是否已达到阀值，如果达到阀值则立即启动 GC</li>
<li>阀值 &#x3D; 上次 GC 内存分配量 * 内存增长率</li>
<li>内存增长率由环境变量 GOGC 控制，默认为 100，即每当内存扩大一倍时启动 GC</li>
</ul>
</li>
<li>定期触发 GC<ul>
<li>默认情况下，最长 2 分钟触发一次 GC，这个间隔在 src&#x2F;runtime&#x2F;proc.go:forcegcperiod 变量中 被声明</li>
</ul>
</li>
<li>手动触发<ul>
<li>程序代码中也可以使用 runtime.GC()来手动触发 GC。这主要用于 GC 性能测试和统计</li>
</ul>
</li>
</ul>
<h4 id="4-包引用与依赖管理"><a href="#4-包引用与依赖管理" class="headerlink" title="4. 包引用与依赖管理"></a><font color=DarkOrange>4. 包引用与依赖管理</font></h4><h5 id="4-1-Go-语言依赖管理的演进"><a href="#4-1-Go-语言依赖管理的演进" class="headerlink" title="4.1 Go 语言依赖管理的演进"></a><font color=DarkOrange>4.1 Go 语言依赖管理的演进</font></h5><ul>
<li>回顾 GOPATH<ul>
<li>通过环境变量设置系统级的 Go 语言类库目录</li>
<li>GOPATH 的问题？<ul>
<li>不同项目可能依赖不同版本</li>
<li>代码被 clone 以后需要设置 GOPATH 才能编译</li>
</ul>
</li>
</ul>
</li>
<li>vendor<ul>
<li>自 1.6 版本，支持 vendor 目录，在每个 Go 语言项目中，创建一个名叫 vendor 的目录，并将依赖拷贝至该目录</li>
<li>Go 语言项目会自动将 vendor 目录作为自身的项目依赖路径</li>
<li>好处？<ul>
<li>每个项目的 vendor目录是独立的，可以灵活的选择版本</li>
<li>Vendor 目录与源代码一起 check in 到 github，其他人 checkout 以后可直接编译</li>
<li>无需在编译期间下载依赖包，所有依赖都已经与源代码保存在一起</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="4-2-vendor管理工具"><a href="#4-2-vendor管理工具" class="headerlink" title="4.2 vendor管理工具"></a><font color=DarkOrange>4.2 vendor管理工具</font></h5><p>通过声明式配置，实现 vendor 管理的自动化</p>
<ul>
<li>在早期，Go 语言无自带依赖管理工具，社区方案鱼龙混杂比较出名的包括<ul>
<li>Godeps, Glide</li>
</ul>
</li>
<li>Go 语言随后发布了自带的依赖管理工具 Gopkg</li>
<li>很快用新的工具 gomod 替换掉了 gopkg<ul>
<li>切换 mod 开启模式：export GO111MODULE&#x3D;on&#x2F;off&#x2F;auto</li>
<li>Go mod 相比之前的工具更灵活易用，以基本统一了 Go 语言依赖管理</li>
</ul>
</li>
</ul>
<h5 id="4-3-Go-mod使用"><a href="#4-3-Go-mod使用" class="headerlink" title="4.3 Go mod使用"></a><font color=DarkOrange>4.3 Go mod使用</font></h5><ul>
<li>创建项目</li>
<li>初始化 Go 模块<ul>
<li><code>go mod init</code></li>
</ul>
</li>
<li>下载依赖包<ul>
<li><code>go mod download</code>（下载的依赖包在$GOPATH&#x2F;pkg，如果没有设置 GOPATH，则下载在项目根目录&#x2F;pkg）</li>
<li>在源代码中使用某个依赖包，如 github.com&#x2F;emicklei&#x2F;go-restful</li>
</ul>
</li>
<li>添加缺少的依赖并为依赖包瘦身<ul>
<li><code>go mod tidy</code></li>
</ul>
</li>
<li>把 Go 依赖模块添加到 vendor 目录<ul>
<li><code>go mod vendor</code></li>
</ul>
</li>
</ul>
<p>配置细节会被保存在项目根目录的 go.mod 中</p>
<p>可在 require 或者 replacement 中指定版本</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module k8s.io/apiserver</span><br><span class="line"><span class="keyword">go</span> <span class="number">1.13</span></span><br><span class="line">require (</span><br><span class="line">  github.com/evanphx/json-patch v4<span class="number">.9</span><span class="number">.0</span>+incompatible</span><br><span class="line">  github.com/<span class="keyword">go</span>-openapi/jsonreference v0<span class="number">.19</span><span class="number">.3</span> <span class="comment">// indirect</span></span><br><span class="line">  github.com/<span class="keyword">go</span>-openapi/spec v0<span class="number">.19</span><span class="number">.3</span></span><br><span class="line">  github.com/gogo/protobuf v1<span class="number">.3</span><span class="number">.2</span></span><br><span class="line">  github.com/google/<span class="keyword">go</span>-cmp v0<span class="number">.3</span><span class="number">.0</span></span><br><span class="line">  github.com/google/gofuzz v1<span class="number">.1</span><span class="number">.0</span></span><br><span class="line">  k8s.io/apimachinery v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20210518100737</span><span class="number">-44</span>f1264f7b6b</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">replace (</span><br><span class="line">  golang.org/x/crypto =&gt; golang.org/x/crypto v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20200220183623</span>-bac4c82f6975</span><br><span class="line">  golang.org/x/text =&gt; golang.org/x/text v0<span class="number">.3</span><span class="number">.2</span></span><br><span class="line">  k8s.io/api =&gt; k8s.io/api v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20210518101910</span><span class="number">-53468e23</span>a787</span><br><span class="line">  k8s.io/apimachinery =&gt; k8s.io/apimachinery v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20210518100737</span><span class="number">-44</span>f1264f7b6b</span><br><span class="line">  k8s.io/client-<span class="keyword">go</span> =&gt; k8s.io/client-<span class="keyword">go</span> v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20210518104342</span>-fa3acefe68f3</span><br><span class="line">  k8s.io/component-base =&gt; k8s.io/component-base v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20210518111421</span><span class="number">-67</span>c12a31a26a</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="4-4-GOPROXY和GOPRIVATE"><a href="#4-4-GOPROXY和GOPRIVATE" class="headerlink" title="4.4 GOPROXY和GOPRIVATE"></a><font color=DarkOrange>4.4 GOPROXY和GOPRIVATE</font></h5><ul>
<li>GOPROXY<ul>
<li>为拉取 Go 依赖设置代理<ul>
<li><code>export GOPROXY=https://goproxy.cn</code></li>
</ul>
</li>
</ul>
</li>
<li>在设置 GOPROXY 以后，默认所有依赖拉取都需要经过 proxy 连接 git repo，拉取代码，并做 checksum 校验</li>
<li>某些私有代码仓库是 goproxy.cn 无法连接的，因此需要设置 GOPRIVATE 来声明私有代码仓库</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">GOPRIVATE=*.corp.example.com</span><br><span class="line">GOPROXY=proxy.example.com</span><br><span class="line">GONOPROXY=myrepo.corp.example.com</span><br></pre></td></tr></table></figure>

<h4 id="5-Makefile"><a href="#5-Makefile" class="headerlink" title="5. Makefile"></a><font color=DarkOrange>5. Makefile</font></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">root:</span><br><span class="line">	export ROOT=github.com/cncamp/golang;</span><br><span class="line">.PHONY: root</span><br><span class="line">release:</span><br><span class="line">  echo <span class="string">&quot;building httpserver binary&quot;</span></span><br><span class="line">  mkdir -p bin/amd64</span><br><span class="line">  CGO_ENABLED=<span class="number">0</span> GOOS=linux GOARCH=amd64 <span class="keyword">go</span> build -o bin/amd64 .</span><br><span class="line">.PHONY: release</span><br></pre></td></tr></table></figure>

<h4 id="6-动手编写一个HTTP-Server"><a href="#6-动手编写一个HTTP-Server" class="headerlink" title="6. 动手编写一个HTTP Server"></a><font color=DarkOrange>6. 动手编写一个HTTP Server</font></h4><h5 id="6-1-理解net-http包"><a href="#6-1-理解net-http包" class="headerlink" title="6.1 理解net.http包"></a><font color=DarkOrange>6.1 理解net.http包</font></h5><ul>
<li><p>注册 handle 处理函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/healthz&quot;</span>, healthz)</span><br><span class="line"><span class="comment">//Use the default DefaultServeMux.</span></span><br><span class="line">ListenAndService</span><br><span class="line">err := http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义 handle 处理函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">healthz</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	io.WriteString(w, <span class="string">&quot;ok&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="6-2-阻塞IO模型"><a href="#6-2-阻塞IO模型" class="headerlink" title="6.2 阻塞IO模型"></a><font color=DarkOrange>6.2 阻塞IO模型</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d3y19ws9j31by0lin5s.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="6-3-非阻塞IO模型"><a href="#6-3-非阻塞IO模型" class="headerlink" title="6.3 非阻塞IO模型"></a><font color=DarkOrange>6.3 非阻塞IO模型</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d4695nkmj31dg0lmtjd.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="6-4-IO多路复用"><a href="#6-4-IO多路复用" class="headerlink" title="6.4 IO多路复用"></a><font color=DarkOrange>6.4 IO多路复用</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d477ndpqj31f20lo142.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="6-5-异步IO"><a href="#6-5-异步IO" class="headerlink" title="6.5 异步IO"></a><font color=DarkOrange>6.5 异步IO</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d4805ht4j318m0lmaif.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="6-6-Linux-epoll"><a href="#6-6-Linux-epoll" class="headerlink" title="6.6 Linux epoll"></a><font color=DarkOrange>6.6 Linux epoll</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d48xagndj31nm0tsqd5.jpg" alt="image.png" style="zoom:50%;" /></div>

<h5 id="6-7-Go-语言高性能httpserver的实现细节"><a href="#6-7-Go-语言高性能httpserver的实现细节" class="headerlink" title="6.7 Go 语言高性能httpserver的实现细节"></a><font color=DarkOrange>6.7 Go 语言高性能httpserver的实现细节</font></h5><p>Go 语言将协程与 fd 资源绑定</p>
<ul>
<li>一个 socket fd 与一个协程绑定</li>
<li>当 socket fd 未就绪时，将对应协程设置为 Gwaiting 状态，将 CPU 时间片让给其他协程</li>
<li>Go 语言 runtime 调度器进行调度唤醒协程时，检查 fd 是否就绪，如果就绪则将协程置为 Grunnable 并加入执行队列</li>
<li>协程被调度后处理 fd 数据</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8d4aae3tyj30vk0d60x7.jpg" alt="image.png" style="zoom:50%;" /></div>

<h4 id="7-调试"><a href="#7-调试" class="headerlink" title="7. 调试"></a><font color=DarkOrange>7. 调试</font></h4><h5 id="7-1-debug"><a href="#7-1-debug" class="headerlink" title="7.1 debug"></a><font color=DarkOrange>7.1 debug</font></h5><ul>
<li>gdb：<ul>
<li>Gccgo 原生支持 gdb，因此可以用 gdb 调试 Go 语言代码，但 dlv 对 Go 语言 debug 的支持比 gdb 更好</li>
<li>Gdb 对 Go 语言的栈管理，多线程支持等方面做的不够好，调试代码时可能有错乱现象</li>
</ul>
</li>
<li>dlv：<ul>
<li>Go 语言的专有 debugger</li>
</ul>
</li>
</ul>
<h5 id="7-2-dlv的配置"><a href="#7-2-dlv的配置" class="headerlink" title="7.2 dlv的配置"></a><font color=DarkOrange>7.2 dlv的配置</font></h5><ul>
<li>配置<ul>
<li>在 vscode 中配置 dlb</li>
<li>菜单：View -&gt; Command Palette</li>
<li>选择 Go : Install&#x2F;Update Tools，选择安装</li>
<li>安装完后，从改入口列表中可以看到 dlv 和 dlv-dap 已经安装好</li>
</ul>
</li>
<li>Debug 方法<ul>
<li>在代码中设置断点</li>
<li>菜单中选择 Run -&gt; Start Debugging 即可进入调试</li>
</ul>
</li>
</ul>
<h5 id="7-3-更多debug方法"><a href="#7-3-更多debug方法" class="headerlink" title="7.3 更多debug方法"></a><font color=DarkOrange>7.3 更多debug方法</font></h5><ul>
<li>添加日志<ul>
<li>在关键代码分支中加入日志</li>
<li>基于fmt包将日志输出到标准输出 stdout：<code>fmt.Println()</code></li>
<li>fmt 无日志重定向，无日志分级</li>
</ul>
</li>
<li>即与日志框架将日志输出到对应的 appender<ul>
<li>比如可利用 glog 进行日志输出<ul>
<li>可配置 appender，将标准输出转至文件</li>
<li>支持多级日志输出，可修改配置调整日志等级</li>
<li>自带时间戳和代码行，方便调试</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="7-4-Glog使用方法示例"><a href="#7-4-Glog使用方法示例" class="headerlink" title="7.4 Glog使用方法示例"></a><font color=DarkOrange>7.4 Glog使用方法示例</font></h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/glog&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  flag.Set(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">  glog.V(<span class="number">2</span>).Info(<span class="string">&quot;Starting http server...&quot;</span>)</span><br><span class="line">  mux := http.NewServeMux()</span><br><span class="line">  mux.HandleFunc(<span class="string">&quot;/&quot;</span>, rootHandler)</span><br><span class="line">  err := http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, mux)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  	log.Fatal(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-5-性能分析（Performance-Profiling）"><a href="#7-5-性能分析（Performance-Profiling）" class="headerlink" title="7.5 性能分析（Performance Profiling）"></a><font color=DarkOrange>7.5 性能分析（Performance Profiling）</font></h5><p>CPU Profiling: 在代码中添加 CPUProfile 代码，runtime&#x2F;pprof 包提供支持</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cpuprofile = flag.String(<span class="string">&quot;cpuprofile&quot;</span>, <span class="string">&quot;&quot;</span> , <span class="string">&quot;write cpu profile to file&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  flag.Parse()</span><br><span class="line">  <span class="keyword">if</span> *cpuprofile != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    f, err := os.Create(*cpuprofile)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    	log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    pprof.StartCPUProfile(f)</span><br><span class="line">    <span class="keyword">defer</span> pprof.StopCPUProfile()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析 CPU 瓶颈</strong></p>
<ul>
<li><p>运行 cpuprofilie 代码后，会在 &#x2F;tmp&#x2F;cpuprofile 中记录 cpu 使用时间</p>
</li>
<li><p>运行 go tool pprof &#x2F;tmp&#x2F;cpuprofile 进入分析模式</p>
</li>
<li><p>运行 top10 查看 top 10线程，显示 30ms 花费在 main.main</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Showing nodes accounting <span class="keyword">for</span> <span class="number">30</span>ms, <span class="number">100</span>% of <span class="number">30</span>ms total</span><br><span class="line">flat flat% sum% cum cum%</span><br><span class="line"><span class="number">30</span>ms <span class="number">100</span>% <span class="number">100</span>% <span class="number">30</span>ms <span class="number">100</span>% main.main</span><br><span class="line"><span class="number">0</span> <span class="number">0</span>% <span class="number">100</span>% <span class="number">30</span>ms <span class="number">100</span>% runtime.main</span><br></pre></td></tr></table></figure>
</li>
<li><p>(pprof) list main.main 显示 30 毫秒都花费在循环上</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Total: <span class="number">30</span>ms</span><br><span class="line"><span class="number">30</span>ms <span class="number">30</span>ms (flat, cum) <span class="number">100</span>% of Total</span><br><span class="line"><span class="number">20</span>ms <span class="number">20</span>ms <span class="number">21</span>: <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++ &#123;</span><br><span class="line"><span class="number">10</span>ms <span class="number">10</span>ms <span class="number">22</span>: result += I</span><br></pre></td></tr></table></figure>
</li>
<li><p>可执行 web 命令生成 svg 文件，在通过浏览器打开 svg 文件查看图形化分析结果</p>
</li>
</ul>
<p><strong>其他可用 profiling 工具分析的问题</strong></p>
<ul>
<li>CPU profile<ul>
<li>程序的 CPU 使用情况，每 100 毫秒采集一次 CPU 使用情况</li>
</ul>
</li>
<li>Memory Profile<ul>
<li>程序的内存使用情况</li>
</ul>
</li>
<li>Block Profiling<ul>
<li>非运行态的 goroutine 细节，分析和查找死锁</li>
</ul>
</li>
<li>Goroutine Profiling<ul>
<li>所有 goroutines 的细节状态，有哪些 goroutine，它们的调用关系是怎样的</li>
</ul>
</li>
</ul>
<p><strong>针对 http 服务的 pprof</strong></p>
<ul>
<li><p>net&#x2F;http&#x2F;pprof 包提供支持</p>
</li>
<li><p>如果采用默认 mux handle，则只需 import _ “net&#x2F;http&#x2F;pprof”</p>
</li>
<li><p>如果采用自定义 mux handle，则需要注册 pprof handler</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startHTTP</span><span class="params">(addr <span class="type">string</span>, s *tnetd.Server)</span></span> &#123;</span><br><span class="line">  mux := http.NewServeMux()</span><br><span class="line">  mux.HandleFunc(“/debug/pprof/”, pprof.Index)</span><br><span class="line">  mux.HandleFunc(“/debug/pprof/profile”, pprof.Profile)</span><br><span class="line">  mux.HandleFunc(“/debug/pprof/symbol”, pprof.Symbol)</span><br><span class="line">  mux.HandleFunc(“/debug/pprof/trace”, pprof.Trace)</span><br><span class="line">  server := &amp;http.Server&#123;</span><br><span class="line">    Addr: addr,</span><br><span class="line">    Handler: mux,</span><br><span class="line">  &#125;</span><br><span class="line">  server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>分析 go profiling 结果</strong></p>
<p>在运行了开启 pprof 的服务器以后，可以通过访问对应的 URL 获得 profile 结果</p>
<ul>
<li>allocs: A sampling of all past memory allocations</li>
<li>block: Stack traces that led to blocking on synchronization primitives</li>
<li>cmdline: The command line invocation of the current program</li>
<li>goroutine: Stack traces of all current goroutines</li>
<li>heap: A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample</li>
</ul>
<p><strong>分析 go profiling 结果</strong></p>
<ul>
<li>mutex: Stack traces of holders of contended mutexes</li>
<li>profile: CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile</li>
<li>threadcreate: Stack traces that led to the creation of new OS threads</li>
<li>trace: A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace</li>
</ul>
<p><strong>结果分析示例</strong></p>
<ul>
<li>分析 goroutine 运行情况<ul>
<li><code>curl localhost/debug/pprof/goroutine?debug=2</code></li>
</ul>
</li>
<li>分析堆内存使用情况<ul>
<li><code>curl localhost/debug/pprof/heap?debug=2</code></li>
</ul>
</li>
</ul>
<h4 id="8-Kubernetes中常用代码解读"><a href="#8-Kubernetes中常用代码解读" class="headerlink" title="8. Kubernetes中常用代码解读"></a><font color=DarkOrange>8. Kubernetes中常用代码解读</font></h4><p>Rate Limit Queue</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ItemExponentialFailureRateLimiter)</span></span> When(item <span class="keyword">interface</span>&#123;&#125;) time.Duration &#123;</span><br><span class="line">  r.failuresLock.Lock()</span><br><span class="line">  <span class="keyword">defer</span> r.failuresLock.Unlock()</span><br><span class="line">  </span><br><span class="line">  exp := r.failures[item]</span><br><span class="line">  r.failures[item] = r.failures[item] + <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// The backoff is capped such that ‘calculated’ value never overflows.</span></span><br><span class="line">  backoff := <span class="type">float64</span>(r.baseDelay.Nanoseconds()) * math.Pow(<span class="number">2</span>, <span class="type">float64</span>(exp))</span><br><span class="line">  <span class="keyword">if</span> backoff &gt; math.MaxInt64 &#123;</span><br><span class="line">  	<span class="keyword">return</span> r.maxDelay</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  calculated := time.Duration(backoff)</span><br><span class="line">  <span class="keyword">if</span> calculated &gt; r.maxDelay &#123;</span><br><span class="line">  	<span class="keyword">return</span> r.maxDelay</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> calculated</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-Kubernetes日常运维中的代码调试场景"><a href="#9-Kubernetes日常运维中的代码调试场景" class="headerlink" title="9. Kubernetes日常运维中的代码调试场景"></a><font color=DarkOrange>9. Kubernetes日常运维中的代码调试场景</font></h4><h5 id="9-1-案例1：空指针"><a href="#9-1-案例1：空指针" class="headerlink" title="9.1 案例1：空指针"></a><font color=DarkOrange>9.1 案例1：空指针</font></h5><ul>
<li><p>问题描述</p>
<p>Kubenetes 调度器在调度有外挂存储需求的 pod 的时候，在获取节点信息失败 时会异常退出</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">panic</span>: runtime <span class="type">error</span>: invalid memory address or <span class="literal">nil</span> pointer dereference [signal SIGSEGV: segmentation violation code=<span class="number">0x1</span> addr=<span class="number">0x0</span> pc=<span class="number">0x105e283</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>根因分析</p>
<p>nil pointe 是 Go 语言中最常出现的一类错误，也最容易判断，通常在 call stack 中就会告诉 你哪行代码有问题</p>
<p>在调度器 csi.go 中的如下代码，当 node 为 nil 的时候，对 node 的引用 node.Name 就会 引发空指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">node := nodeInfo.Node()</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> framework.NewStatus(framework.Error, fmt.Sprintf(<span class="string">&quot;nodenot found: %s&quot;</span>, node.Name))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决办法</p>
<p>当指针为空时，不要继续引用</p>
<p>GitHub参考地址：<a href="https://github.com/kubernetes/kubernetes/pull/102229">点击跳转</a></p>
</li>
</ul>
<h5 id="9-2-案例2：Map-的读写冲突"><a href="#9-2-案例2：Map-的读写冲突" class="headerlink" title="9.2 案例2：Map 的读写冲突"></a><font color=DarkOrange>9.2 案例2：Map 的读写冲突</font></h5><ul>
<li><p>问题描述</p>
<p>程序在遍历 Kubernetes 对象的 Annotation 时异常退出</p>
</li>
<li><p>根因分析</p>
<p>Kubernetes 对象中 Label 和 Annotation 是 map[string]string</p>
<p>经常有代码需要修改这两个 Map</p>
<p>同时可能有其他线程 for…range 遍历</p>
</li>
<li><p>解决方法</p>
<ul>
<li>用 sync.RWMutex 加锁</li>
<li>使用线程安全 Map，比如 sync.Map{}</li>
</ul>
</li>
</ul>
<h5 id="9-3-案例3：kube-proxy消耗10个CPU"><a href="#9-3-案例3：kube-proxy消耗10个CPU" class="headerlink" title="9.3 案例3：kube-proxy消耗10个CPU"></a><font color=DarkOrange>9.3 案例3：kube-proxy消耗10个CPU</font></h5><ul>
<li><p>问题描述</p>
<p>客户汇报问题，kube-proxy 消耗了主机 10 个 CPU</p>
</li>
<li><p>根因分析</p>
<ul>
<li><p>登录问题机器，执行 top 命令查看 cpu 消耗，可以看到 kube-proxy 的 cpu 消耗和 pid 信息</p>
</li>
<li><p>对 kube-proxy 进程运行 System profiling tool，发现 10 个 CPU 中，超过 60% 的 CPU 都在做垃圾回收，这说明 GC 需要回收的对象太多了， 说明程序创建了大量可回收对象</p>
</li>
<li><p><code>perf top –p</code> </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Overhead Shared Obj Symbol</span><br><span class="line"><span class="number">26.48</span>% kube-proxy [.] runtime.gcDrain</span><br><span class="line"><span class="number">13.86</span>% kube-proxy [.] runtime.greyobject</span><br><span class="line"><span class="number">10.71</span>% kube-proxy [.] runtime.(*lfstack).pop</span><br><span class="line"><span class="number">10.04</span>% kube-proxy [.] runtime.scanobject</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 pprof 分析内存占用情况，<code>curl 127.0.0.1:10249/debug/pprof/heap?debug=2</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>: <span class="number">245760</span> [<span class="number">301102</span>: <span class="number">73998827520</span>] @ <span class="number">0x11ddcda</span> <span class="number">0x11f306e</span> <span class="number">0x11f35f5</span> <span class="number">0x11fbdce</span> <span class="number">0x1204a8a</span> <span class="number">0x114ed76</span></span><br><span class="line"><span class="number">0x114eacb</span> <span class="number">0x11</span></span><br><span class="line"># &lt;font color=DarkOrange&gt;<span class="number">0x11ddcd9</span>&lt;/font&gt;</span><br><span class="line">k8s.io/kubernetes/vendor/github.com/vishvananda/netlink.(*Handle).RouteListFiltered+<span class="number">0x679</span></span><br><span class="line"># &lt;font color=DarkOrange&gt;<span class="number">0x11f306d</span> k8s.io/kubernetes/pkg/proxy/ipvs.(*netlinkHandle).GetLocalAddresses+<span class="number">0xed</span>&lt;/font&gt;</span><br><span class="line"># &lt;font color=DarkOrange&gt;<span class="number">0x11f35f4</span> k8s.io/kubernetes/pkg/proxy/ipvs.(*realIPGetter).NodeIPs+<span class="number">0x64</span>&lt;/font&gt;</span><br><span class="line"># &lt;font color=DarkOrange&gt;<span class="number">0x11fbdcd</span> k8s.io/kubernetes/pkg/proxy/ipvs.(*Proxier).syncProxyRules+<span class="number">0x47dd</span>&lt;/font&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>heap dump 分析</p>
<ul>
<li>GetLocalAddresses 函数调用创建了 301102 个对象，占用内存 73998827520</li>
<li>如此多的对象被创建，显然会导致 kube-proxy 进程忙于 GC，占用大量 CPU</li>
<li>对照代码分析 GetLocalAddresses 的实现，发现该函数的主要目的是获取节点本机 IP 地址，获取的方法是通过 ip route 命令获得当前节点所有 local 路由信息并转换成 go struct 并过滤掉 ipvs0网口上的路由信息</li>
<li><code>ip route show table local type local proto kernel</code></li>
<li>因为集群规模较大，该命令返回 5000 条左右记录，因此每次函数调用都会有数万个对象被生成</li>
<li>而 kube-proxy 在处理每一个服务的时候都会调用该方法，因为集群有数千个服务，因此，kube-proxy在反复调用该函数创建大量临时对象</li>
</ul>
</li>
<li><p>修复方法</p>
<p>函数调用提取到循环外</p>
<p>GitHub参考地址：<a href="https://github.com/kubernetes/kubernetes/pull/79444">点击跳转</a></p>
</li>
</ul>
<h5 id="9-4-案例4：线程池耗尽"><a href="#9-4-案例4：线程池耗尽" class="headerlink" title="9.4 案例4：线程池耗尽"></a><font color=DarkOrange>9.4 案例4：线程池耗尽</font></h5><ul>
<li><p>问题描述</p>
<p>在 Kubernetes 中有一个控制器，叫做 endpoint controller，该控制器符合生产者消费者模式，默认有5 个 worker 线程作为消费者。该消费者在处理请求时，可能调用的 LBaaS 的 API 更新负载均衡配置。我们 发现该控制器会时不时不工作，具体表现为，该做的配置变更没发生，相关日志也不打印了</p>
</li>
<li><p>根因分析</p>
<p>通过 pprof 打印出该进程的所有 go routine 信息，发现 worker 线程都卡在 http 请求调用处</p>
<p>当worker线程调用 LBaaS API 时，底层是 net&#x2F;http 包调用，而客户端在发起连接请求时，未设置客户端 超时时间。这导致当出现某些网络异常时，客户端会永远处于等待状态</p>
</li>
<li><p>解决方法</p>
<p>修改代码加入客户端超时控制</p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生04-Kubernetes架构原则和对象设计</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F04-Kubernetes%E6%9E%B6%E6%9E%84%E5%8E%9F%E5%88%99%E5%92%8C%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生03-Docker核心技术</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F03-Docker%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生05-Kubernetes控制平面组件：etcd</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F05-Kubernetes%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2%E7%BB%84%E4%BB%B6%EF%BC%9Aetcd/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis面试题</title>
    <url>/2022/10/28/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>Redis面试常见问题汇总</p>
<h4 id="1-Redis的数据结构及使用场景"><a href="#1-Redis的数据结构及使用场景" class="headerlink" title="1. Redis的数据结构及使用场景"></a><font color=DarkOrange>1. Redis的数据结构及使用场景</font></h4><ul>
<li><p>String字符串</p>
<p>字符串类型是 Redis 最基础的数据结构，首先键都是字符串类型，而且 其他几种数据结构都是在字符串类型基础上构建的，我们常使用的 set key value 命令就是字符串。常用在缓存、计数、共享Session、限速等</p>
</li>
</ul>
<hr>
<ul>
<li><p>Hash哈希</p>
<p>在Redis中，哈希类型是指键值本身又是一个键值对结构，哈希可以用来存放用户信息，比如实现购物车</p>
</li>
</ul>
<hr>
<ul>
<li><p>List列表（双向链表）</p>
<p>列表（list）类型是用来存储多个有序的字符串。可以做简单的消息队列的功能</p>
</li>
</ul>
<hr>
<ul>
<li><p>Set集合</p>
<p>集合（set）类型也是用来保存多个的字符串元素，但和列表类型不一 样的是，集合中不允许有重复元素，并且集合中的元素是无序的，不能通过索引下标获取元素。利用 Set 的交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能</p>
</li>
</ul>
<hr>
<ul>
<li><p>Sorted Set有序集合（跳表实现）</p>
<p>Sorted Set 多了一个权重参数 Score，集合中的元素能够按 Score 进行排列。可以做排行榜应用，取 TOP N 操作</p>
</li>
</ul>
<h4 id="2-Redis持久化的几种方式"><a href="#2-Redis持久化的几种方式" class="headerlink" title="2. Redis持久化的几种方式"></a><font color=DarkOrange>2. Redis持久化的几种方式</font></h4><p>Redis为了保证效率，数据缓存在了内存中，但是会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中，以保证数据的持久化。Redis的持久化策略有两种：</p>
<ul>
<li><strong>RDB：</strong> 快照形式是直接把内存中的数据保存到一个dump的文件中，定时保存，保存策略<ul>
<li>当Redis需要做持久化时，Redis会fork一个子进程，子进程将数据写到磁盘上一个临时RDB文件中。当子进程完成写临时文件后，将原来的RDB替换掉</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>AOF：</strong> 把所有的对Redis的服务器进行修改的命令都存到一个文件里，命令的集合<ul>
<li>使用AOF做持久化，每一个写命令都通过write函数追加到<code>appendonly.aof</code>中</li>
<li>aof的默认策略是每秒钟fsync一次，在这种配置下，就算发生故障停机，也最多丢失一秒钟的数据</li>
<li>缺点是对于相同的数据集来说，AOF的文件体积通常要大于RDB文件的体积。根据所使用的fsync策略，AOF的速度可能会慢于RDB</li>
</ul>
</li>
</ul>
<p>Redis默认是快照RDB的持久化方式。对于主从同步来说，主从刚刚连接的时候，进行全量同步（RDB），全同步结束后，进行增量同步(AOF)</p>
<h4 id="3-Redis的LRU具体实现"><a href="#3-Redis的LRU具体实现" class="headerlink" title="3. Redis的LRU具体实现"></a><font color=DarkOrange>3. Redis的LRU具体实现</font></h4><ul>
<li>传统的LRU是使用栈的形式，每次都将最新使用的移入栈顶，但是用栈的形式会导致执行<code>select *</code>的时候大量非热点数据占领头部数据，所以需要改进</li>
<li>Redis每次按key获取一个值的时候，都会更新value中的lru字段为当前秒级别的时间戳。Redis初始的实现算法很简单，随机从dict中取出五个key，淘汰一个lru字段值最小的</li>
<li>在3.0的时候，又改进了一版算法，首先第一次随机选取的key都会放入一个pool中(pool的大小为16)，pool中的key是按lru大小顺序排列的</li>
<li>接下来每次随机选取的keylru值必须小于pool中最小的lru才会继续放入，直到将pool放满。放满之后，每次如果有新的key需要放入，需要将pool中lru最大的一个key取出。淘汰的时候，直接从pool中选取一个lru最小的值然后将其淘汰</li>
</ul>
<h4 id="4-单线程的Redis为什么快"><a href="#4-单线程的Redis为什么快" class="headerlink" title="4. 单线程的Redis为什么快"></a><font color=DarkOrange>4. 单线程的Redis为什么快</font></h4><ul>
<li>纯内存操作</li>
<li>单线程操作，避免了频繁的上下文切换</li>
<li>合理高效的数据结构</li>
<li>采用了非阻塞I&#x2F;O多路复用机制</li>
</ul>
<h4 id="5-Redis的数据过期策略"><a href="#5-Redis的数据过期策略" class="headerlink" title="5. Redis的数据过期策略"></a><font color=DarkOrange>5. Redis的数据过期策略</font></h4><p>Redis 中数据过期策略采用<strong>定期删除</strong>和<strong>惰性删除</strong>策略：</p>
<ul>
<li>定期删除策略<ul>
<li>Redis 启用一个定时器定时监视所有的 key，判断key是否过期，过期的话就删除</li>
<li>这种策略可以保证过期的 key 最终都会被删除，但是也存在严重的缺点：每次都遍历内存中所有的数据，非常消耗 CPU资源，并且当 key 已过期，但是定时器还处于未唤起状态，这段时间内 key 仍然可以用</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>惰性删除策略<ul>
<li>在获取 key 时，先判断 key 是否过期，如果过期则删除</li>
<li>这种方式存在一个缺点：如果这个 key一直未被使用，那么它一直在内存中，其实它已经过期了，会浪费大量的空间</li>
</ul>
</li>
</ul>
<p>这两种策略天然的互补，结合起来之后，定时删除策略就发生了一些改变，不在是每次扫描全部的 key 了，而是随机抽取一部分 key 进行检查，这样就降低了对 CPU 资源的损耗，惰性删除策略互补了为检查到的key，基本上满足了所有要求</p>
<p>但是有时候就是那么的巧，既没有被定时器抽取到，又没有被使用，这些数据又如何从内存中消失？这个时候就需要用到了，内存淘汰机制</p>
<h5 id="5-1-内存淘汰机制"><a href="#5-1-内存淘汰机制" class="headerlink" title="5.1 内存淘汰机制"></a><font color=DarkOrange>5.1 内存淘汰机制</font></h5><ul>
<li>当内存不足以容纳新写入数据时，新写入操作会报错。（Redis 默认策略）</li>
<li>当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 Key。（LRU推荐使用）</li>
<li>当内存不足以容纳新写入数据时，在键空间中，随机移除某个 Key</li>
<li>当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 Key。这种情况一般是把 Redis 既当缓存，又做持久化存储的时候才用</li>
<li>当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 Key</li>
<li>当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 Key 优先移除</li>
</ul>
<h4 id="6-如何解决Redis缓存雪崩问题"><a href="#6-如何解决Redis缓存雪崩问题" class="headerlink" title="6. 如何解决Redis缓存雪崩问题"></a><font color=DarkOrange>6. 如何解决Redis缓存雪崩问题</font></h4><ul>
<li>使用 Redis 高可用架构：使用 Redis 集群来保证 Redis 服务不会挂掉</li>
<li>缓存时间不一致，给缓存的失效时间，加上一个随机值，避免集体失效</li>
<li>限流降级策略：有一定的备案，比如个性推荐服务不可用了，换成热点数据推荐服务</li>
</ul>
<h4 id="7-如何解决Redis缓存穿透问题"><a href="#7-如何解决Redis缓存穿透问题" class="headerlink" title="7. 如何解决Redis缓存穿透问题"></a><font color=DarkOrange>7. 如何解决Redis缓存穿透问题</font></h4><ul>
<li>在接口层做校验</li>
<li>存null值（缓存击穿加锁）</li>
<li>布隆过滤器拦截：将所有可能的查询key 先映射到布隆过滤器中，查询时先判断key是否存在布隆过滤器中，存在才继续向下执行，如果不存在，则直接返回<br>布隆过滤器将值进行多次哈希bit存储，布隆过滤器说某个元素在，可能会被误判。布隆过滤器说某个元素不在，那么一定不在</li>
</ul>
<h4 id="8-Redis并发竞争key如何解决"><a href="#8-Redis并发竞争key如何解决" class="headerlink" title="8. Redis并发竞争key如何解决"></a><font color=DarkOrange>8. Redis并发竞争key如何解决</font></h4><ul>
<li>可以利用分布式锁和时间戳来解决</li>
<li>利用消息队列解决</li>
</ul>
<h4 id="9-Redis的主从模式和哨兵模式和集群模式区别"><a href="#9-Redis的主从模式和哨兵模式和集群模式区别" class="headerlink" title="9. Redis的主从模式和哨兵模式和集群模式区别"></a><font color=DarkOrange>9. Redis的主从模式和哨兵模式和集群模式区别</font></h4><p>Redis集群方式共有三种：<strong>主从模式</strong>，<strong>哨兵模式</strong>，<strong>集群(cluster)模式</strong></p>
<ul>
<li><p>主从模式</p>
<p>主从模式是三种集群方式里最简单的。它主要是基于Redis的主从复制特性架构的。通常我们会设置一个主节点，N个从节点；默认情况下，主节点负责处理使用者的IO操作，而从节点则会对主节点的数据进行备份，并且也会对外提供读操作的处理。主要的特点如下：</p>
<ul>
<li>主从模式下，当某一节点损坏时，因为其会将数据备份到其它Redis实例上，这样做在很大程度上可以恢复丢失的数据</li>
<li>主从模式下，可以保证负载均衡.</li>
<li>主从模式下，主节点和从节点是读写分离的。使用者不仅可以从主节点上读取数据，还可以很方便的从从节点上读取到数据，这在一定程度上缓解了主机的压力</li>
</ul>
<p>从节点也是能够支持写入数据的，只不过从从节点写入的数据不会同步到主节点以及其它的从节点下。从以上，我们不难看出Redis在主从模式下，必须保证主节点不会宕机——一旦主节点宕机，其它节点不会竞争称为主节点，此时，Redis将丧失写的能力。这点在生产环境中，是致命的</p>
</li>
</ul>
<hr>
<ul>
<li><p>哨兵模式</p>
<p>哨兵模式是基于主从模式做的一定变化，它能够为Redis提供了高可用性</p>
<p>在实际生产中，服务器难免不会遇到一些突发状况：服务器宕机，停电，硬件损坏等。这些情况一旦发生，其后果往往是不可估量的</p>
<p>而哨兵模式在一定程度上能够帮我们规避掉这些意外导致的灾难性后果。其实，哨兵模式的核心还是主从复制</p>
<p>只不过相对于主从模式在主节点宕机导致不可写的情况下，多了一个竞选机制——从所有的从节点竞选出新的主节点。竞选机制的实现，是依赖于在系统中启动一个sentinel进程。sentinel特点：</p>
<ul>
<li>监控：它会监听主服务器和从服务器之间是否在正常工作</li>
<li>通知：它能够通过API告诉系统管理员或者程序，集群中某个实例出了问题。</li>
<li>故障转移：它在主节点出了问题的情况下，会在所有的从节点中竞选出一个节点，并将其作为新的主节点。</li>
<li>提供主服务器地址：它还能够向使用者提供当前主节点的地址。这在故障转移后，使用者不用做任何修改就可以知道当前主节点地址</li>
</ul>
<p>sentinel，也可以集群，部署多个哨兵，sentinel可以通过发布与订阅来自动发现Redis集群上的其它sentinel。sentinel在发现其它sentinel进程后，会将其放入一个列表中，这个列表存储了所有已被发现的sentinel</p>
<p>集群中的所有sentinel不会并发着去对同一个主节点进行故障转移。故障转移只会从第一个sentinel开始，当第一个故障转移失败后，才会尝试下一个</p>
<p>当选择一个从节点作为新的主节点后，故障转移即成功了(而不会等到所有的从节点配置了新的主节点后)。这过程中，如果重启了旧的主节点，那么就会出现无主节点的情况，这种情况下，只能重启集群</p>
<p>当竞选出新的主节点后，被选为新的主节点的从节点的配置信息会被sentinel改写为旧的主节点的配置信息。完成改写后，再将新主节点的配置广播给所有的从节点</p>
</li>
</ul>
<hr>
<ul>
<li><p>集群模式</p>
<p>Redis 集群是一个提供在多个Redis间节点间共享数据的程序集， 其中Redis集群分为主节点和从节点。主节点用于处理槽，而从节点用于复制某个主节点，并在被复制的主节点下线时，代替下线的主节点继续处理命令请求</p>
<p>Redis集群并不支持处理多个keys的命令，因为这需要在不同的节点间移动数据，从而达不到像Redis那样的性能，在高负载的情况下可能会导致不可预料的错误</p>
<p>Redis 集群通过分区来提供一定程度的可用性，在实际环境中当某个节点宕机或者不可达的情况下继续处理命令. Redis 集群的优势：自动分割数据到不同的节点上</p>
<p>整个集群的部分节点失败或者不可达的情况下能够继续处理命令</p>
<p>Redis集群的数据分片 Redis 集群没有使用一致性hash， 而是引入了哈希槽的概念</p>
<p>Redis 集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.集群的每个节点负责一部分hash槽</p>
</li>
</ul>
<h4 id="10-单机、主从、哨兵、集群模式优缺点"><a href="#10-单机、主从、哨兵、集群模式优缺点" class="headerlink" title="10. 单机、主从、哨兵、集群模式优缺点"></a><font color=DarkOrange>10. 单机、主从、哨兵、集群模式优缺点</font></h4><h5 id="10-1-单机模式"><a href="#10-1-单机模式" class="headerlink" title="10.1 单机模式"></a><font color=DarkOrange>10.1 单机模式</font></h5><p>Redis 单副本，采用单个 Redis 节点部署架构，没有备用节点实时同步数据，不提供数据持久化和备份策略，适用于数据可靠性要求不高的纯缓存业务场景</p>
<p><strong>优点：</strong></p>
<ul>
<li>架构简单，部署方便</li>
<li>高性价比：缓存使用时无需备用节点(单实例可用性可以用 supervisor 或 crontab 保证)，当然为了满足业务的高可用性，也可以牺牲一个备用节点，但同时刻只有一个实例对外提供服务</li>
<li>高性能</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>不保证数据的可靠性</li>
<li>在缓存使用，进程重启后，数据丢失，即使有备用的节点解决高可用性，但是仍然不能解决缓存预热问题，因此不适用于数据可靠性要求高的业务</li>
<li>高性能受限于单核 CPU 的处理能力(Redis 是单线程机制)，CPU 为主要瓶颈，所以适合操作命令简单，排序、计算较少的场景。也可以考虑用 Memcached 替代</li>
</ul>
<h5 id="10-2-主从模式"><a href="#10-2-主从模式" class="headerlink" title="10.2 主从模式"></a><font color=DarkOrange>10.2 主从模式</font></h5><p>主（master）和 从（slave）部署在不同的服务器上，当主节点服务器写入数据时会同步到从节点的服务器上，一般主节点负责写入数据，从节点负责读取数据</p>
<blockquote>
<p><strong>从节点设置只读属性，而主节点没有只写属性，因此，主节点可读可以写</strong></p>
</blockquote>
<p><strong>优点：</strong></p>
<ul>
<li><p>读写分离，提高效率</p>
<p>主节点负责写操作，从节点负责读操作；如果写少读多场景，配置多个从节点的话，效率非常高</p>
</li>
<li><p>数据热备份，提供多个副本</p>
<p>从节点宕机，影响较小</p>
</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><p>主节点故障，集群则无法进行工作，可用性比较低，从节点升主节点需要人工手动干预</p>
<p>因为只有主节点能进行写操作，一旦主节点宕机，整个服务就无法使用。当然此时从节点仍可以进行读操作，但是对于整个服务流程来说，是无法使用的</p>
</li>
<li><p>Master的写的压力难以降低</p>
<p>如果写操作比较多，那么只有一个主节点的话，无法分担压力</p>
</li>
<li><p>主节点存储能力受到单击限制</p>
<p>主节点只能有一个，因此单节点内存大小不会太大，因此存储数据量受限</p>
</li>
<li><p>主从数据同步，可能产生部分的性能影响甚至同步风暴</p>
<p>风暴问题，对于任何集群分布式来说都存在，要合理分布节点</p>
</li>
</ul>
<h5 id="10-3-哨兵模式"><a href="#10-3-哨兵模式" class="headerlink" title="10.3 哨兵模式"></a><font color=DarkOrange>10.3 哨兵模式</font></h5><p>为了解决这两个问题，在2.8版本之后redis正式提供了sentinel架构</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8evssatocj30i30bwq48.jpg" alt="image.png" style="zoom:67%;" /></div>

<p>在redis3.0以前的版本要实现集群一般是借助哨兵sentinel工具来监控master节点的状态</p>
<p>如果master节点异常，则会做主从切换，将某一台slave作为master，哨兵的配置略微复杂，并且性能和高可用性等各方面表现一般</p>
<p><strong>优点：</strong></p>
<ul>
<li>对节点进行监控，来完成自动的故障发现与转移</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>特别是在主从切换的瞬间存在访问瞬断的情况，等待时间比较长，至少十来秒不可用</li>
<li>哨兵模式只有一个主节点对外提供服务，没法支持很高的并发</li>
<li>单个主节点内存也不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率</li>
</ul>
<p><strong>与主从相比，哨兵仅解决了手动切换主从节点问题，至于其他的问题，基本上仍然存在</strong></p>
<p><strong>哨兵的主要问题还是由于中心架构，仅存在一个master节点引起的，写的效率太低</strong></p>
<h5 id="10-4-集群模式"><a href="#10-4-集群模式" class="headerlink" title="10.4 集群模式"></a><font color=DarkOrange>10.4 集群模式</font></h5><p>Redis Cluster 是 3.0 版后推出的 Redis 分布式集群解决方案，主要解决 Redis 分布式方面的需求，比如，当遇到单机内存，并发和流量等瓶颈的时候，Redis Cluster 能起到很好的负载均衡的目的</p>
<p>Redis Cluster 集群节点<font color=Red><strong>最小配置 6 个节点以上(3 主 3 从)</strong></font>，其中主节点提供读写操作，从节点作为备用节点，不提供请求，只作为故障转移使用。Redis Cluster 采用虚拟槽分区，所有的键根据哈希函数映射到 0～16383 个整数槽内，每个节点负责维护一部分槽以及槽所印映射的键值数据</p>
<blockquote>
<p>注意：集群模式下 从节点不提供读写，与主从模式不一样。 总结一下经验，分布式 场景下：集群模式一般从节点不参与读写，仅作为备用节点。而主从一般都要负责读或写，都要参与具体的工作</p>
</blockquote>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8evydq8vhj30fk0dfdk7.jpg" alt="image.png" style="zoom:80%;" /></div>

<p> <strong>优点：</strong></p>
<ul>
<li><p>无中心架构</p>
<p>即有多个master节点，不像哨兵模式下仅有一个。这样写的压力就可以分散了；并且存储量也可以扩展了，因为多个主节点都可以存储一部分数据，总量要远大于单主节点架构</p>
</li>
<li><p>数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布</p>
</li>
<li><p>可扩展性：可线性扩展到 1000 多个节点，<code>节点可动态添加或删除</code></p>
</li>
<li><p>高可用性：部分节点不可用时，集群仍可用。通过增加 Slave 做 standby 数据副本，能够 实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave 到 Master 的角色提升</p>
</li>
</ul>
<blockquote>
<p>当然，如果某个槽归属的小群内都不可用时，整个服务仍然是不可用的！通过cluster-require-full-coverageyes 控制该特性， 默认yes 即需要集群完整，方可对外提供服务，设置为no ，其他的小集群仍然可以对外提供服务</p>
</blockquote>
<p><strong>缺点：</strong></p>
<ul>
<li>如果主节点A和它的从节点A1都宕机了，那么该集群就无法再提供服务了</li>
</ul>
<h4 id="11-Redis事物的了解CheckAndSet操作实现乐观锁"><a href="#11-Redis事物的了解CheckAndSet操作实现乐观锁" class="headerlink" title="11. Redis事物的了解CheckAndSet操作实现乐观锁"></a><font color=DarkOrange>11. Redis事物的了解CheckAndSet操作实现乐观锁</font></h4><p>和众多其它数据库一样，Redis作为NoSQL数据库也同样提供了事务机制。在Redis中，<code>MULTI</code>，<code>EXEC</code>，<code>DISCARD</code>，<code>WATCH</code>这四个命令是我们实现事务的基石。相信对有关系型数据库开发经验的开发者而言这一概念并不陌生，即便如此，我们还是会简要的列出 Redis中事务的实现特征 ：</p>
<ul>
<li>在事务中的所有命令都将会被串行化的顺序执行，事务执行期间，Redis不会再为其它客户端的请求提供任何服务，从而保证了事物中的所有命令被原子的执行</li>
<li>和关系型数据库中的事务相比，在Redis事务中如果有某一条命令执行失败，其后的命令仍然会被继续执行</li>
<li>我们可以通过MULTI命令开启一个事务，有关系型数据库开发经验的人可以将其理解为”BEGIN TRANSACTION”语句。在该语句之后执行的命令都将被视为事务之内的操作，最后我们可以通过执行<code>EXEC</code>，<code>DISCARD</code>命令来提交，回滚该事务内的所有操作。这两个Redis命令可被视为等同于关系型数据库中的COMMIT&#x2F;ROLLBACK语句</li>
<li>在事务开启之前，如果客户端与服务器之间出现通讯故障并导致网络断开，其后所有待执行的语句都将不会被服务器执行。然而如果网络中断事件是发生在客户端执行EXEC命令之后，那么该事务中的所有命令都会被服务器执行</li>
<li>当使用<code>Append-Only</code>模式时，Redis会通过调用系统函数write将该事务内的所有写操作在本次调用中全部写入磁盘。然而如果在写入的过程中出现系统崩溃，如电源故障导致的宕机，那么此时也许只有部分数据被写入到磁盘，而另外一部分数据却已经丢失。Redis服务器会在重新启动时执行一系列必要的一致性检测，一旦发现类似问题，就会立即退出并给出相应的错误提示。此时，我们就要充分利用Redis工具包中提供的<code>redis-check-aof</code>工具，该工具可以帮助我们定位到数据不一致的错误，并将已经写入的部分数据进行回滚。修复之后我们就可以再次重新启动Redis服务器了</li>
</ul>
<h4 id="12-Redis有序集合zset底层怎么实现的"><a href="#12-Redis有序集合zset底层怎么实现的" class="headerlink" title="12. Redis有序集合zset底层怎么实现的"></a><font color=DarkOrange>12. Redis有序集合zset底层怎么实现的</font></h4><ul>
<li>跳表是一个随机化的数据结构，实质就是一种可以进行二分查找的有序链表</li>
<li>跳表在原有的有序链表上面增加了多级索引，通过索引来实现快速查找</li>
<li>跳表不仅能提高搜索性能，同时也可以提高插入和删除操作的性能</li>
</ul>
<hr>
<ul>
<li>跳表是可以实现二分查找的有序链表</li>
<li>每个元素插入时随机生成它的level</li>
<li>最低层包含所有的元素</li>
<li>如果一个元素出现在level(x)，那么它肯定出现在x以下的level中</li>
<li>每个索引节点包含两个指针，一个向下，一个向右</li>
<li>跳表查询、插入、删除的时间复杂度为O(log n)，与平衡二叉树接近</li>
</ul>
<hr>
<h5 id="12-1-为什么Redis选择使用跳表而不是红黑树来实现有序集合？-O-logN"><a href="#12-1-为什么Redis选择使用跳表而不是红黑树来实现有序集合？-O-logN" class="headerlink" title="12.1 为什么Redis选择使用跳表而不是红黑树来实现有序集合？(O(logN))"></a><font color=DarkOrange>12.1 为什么Redis选择使用跳表而不是红黑树来实现有序集合？(O(logN))</font></h5><p>首先，我们来分析下Redis的有序集合支持的操作：</p>
<ul>
<li>插入元素</li>
<li>删除元素</li>
<li>查找元素</li>
<li>有序输出所有元素</li>
<li>查找区间内所有元素</li>
</ul>
<p>其中，前4项红黑树都可以完成，且时间复杂度与跳表一致。但是，最后一项，红黑树的效率就没有跳表高了。在跳表中，要查找区间的元素，我们只要定位到两个区间端点在最低层级的位置，然后按顺序遍历元素就可以了，非常高效</p>
<p>而红黑树只能定位到端点后，再从首位置开始每次都要查找后继节点，相对来说是比较耗时的。此外，跳表实现起来很容易且易读，红黑树实现起来相对困难，所以Redis选择使用跳表来实现有序集合</p>
<h4 id="13-跳表的查询过程是怎么样的，查询和插入的时间复杂度"><a href="#13-跳表的查询过程是怎么样的，查询和插入的时间复杂度" class="headerlink" title="13. 跳表的查询过程是怎么样的，查询和插入的时间复杂度"></a><font color=DarkOrange>13. 跳表的查询过程是怎么样的，查询和插入的时间复杂度</font></h4><p>先从第一层查找，不满足就下沉到第二层找，因为每一层都是有序的，写入和插入的时间复杂度都是O(logN)</p>
<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生06-Kubernetes控制平面组件：API Server</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F06-Kubernetes%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2%E7%BB%84%E4%BB%B6%EF%BC%9AAPI-Server/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生08-Kubernetes控制平面组件：生命周期管理和服务发现</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F08-Kubernetes%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2%E7%BB%84%E4%BB%B6%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生07-Kubernetes控制平面组件：调度器和控制器</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F07-Kubernetes%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2%E7%BB%84%E4%BB%B6%EF%BC%9A%E8%B0%83%E5%BA%A6%E5%99%A8%E5%92%8C%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生09-生产化集群的管理</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F09-%E7%94%9F%E4%BA%A7%E5%8C%96%E9%9B%86%E7%BE%A4%E7%9A%84%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生11-将应用迁移至Kubernetes平台</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F11-%E5%B0%86%E5%BA%94%E7%94%A8%E8%BF%81%E7%A7%BB%E8%87%B3Kubernetes%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生10-Kubernetes的生产化运维</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F10-Kubernetes%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8C%96%E8%BF%90%E7%BB%B4/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生12-基于Istio的高级流量管理</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F12-%E5%9F%BA%E4%BA%8EIstio%E7%9A%84%E9%AB%98%E7%BA%A7%E6%B5%81%E9%87%8F%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生13-Kubernetes集群联邦和Istio多集群管理</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F13-Kubernetes%E9%9B%86%E7%BE%A4%E8%81%94%E9%82%A6%E5%92%8CIstio%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生14-基于Kubernetes和Istio的安全保证</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F14-%E5%9F%BA%E4%BA%8EKubernetes%E5%92%8CIstio%E7%9A%84%E5%AE%89%E5%85%A8%E4%BF%9D%E8%AF%81/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生15-微服务项目的开发和部署案例</title>
    <url>/2022/11/08/%E4%BA%91%E5%8E%9F%E7%94%9F15-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E5%8F%91%E5%92%8C%E9%83%A8%E7%BD%B2%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>待完成。。。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生训练营课程大纲</title>
    <url>/2022/11/06/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%AE%AD%E7%BB%83%E8%90%A5%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<h4 id="第一部分：Go-语言基础"><a href="#第一部分：Go-语言基础" class="headerlink" title="第一部分：Go 语言基础"></a><font color=DarkOrange>第一部分：Go 语言基础</font></h4><h5 id="模块一：Go-语言特性"><a href="#模块一：Go-语言特性" class="headerlink" title="模块一：Go 语言特性"></a><font color=DarkOrange>模块一：Go 语言特性</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>理解 Go 语言基本语法</p>
</li>
<li><p>理解 Go 语言常用数据类型</p>
</li>
<li><p>理解 Go 语言常用小技巧</p>
</li>
<li><p>深入理解 Go 语言的多线程编程</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>云原生从业者因为未熟练掌握 Go 语言，在阅读 Docker、containerd、Kubernetes 代码时有困难</p>
</li>
<li><p>未熟练掌握 Go 语言，在需要编写云原生组件时无法高效率高质量交付</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>阅读 Go 语言代码的能力</p>
</li>
<li><p>用 Go 语言编写应用程序的基本能力</p>
</li>
<li><p>用 Go 语言编写一个 Kubernetes 中最常见的生产者消费者小程序</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>Go 语言编译环境设置</p>
</li>
<li><p>Go 语言常用数据结构</p>
</li>
<li><p>Go 语言函数调用，深入理解 Channel 并基于 Channel 编写一个生产者消费者程序</p>
</li>
</ol>
<hr>
<h5 id="模块二：使用-Go-语言编写一个小-Demo"><a href="#模块二：使用-Go-语言编写一个小-Demo" class="headerlink" title="模块二：使用 Go 语言编写一个小 Demo "></a><font color=DarkOrange>模块二：使用 Go 语言编写一个小 Demo </font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>理解 Go 语言的调度原理</p>
</li>
<li><p>理解 Go 语言的内存管理</p>
</li>
<li><p>Go 语言依赖管理</p>
</li>
<li><p>Go 语言调试和问题分析 pprof</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>对 Goroutine 无深入理解，无法利用 Go 语言强大的并发能力</p>
</li>
<li><p>面对众多的 Go 语言项目包依赖管理工具无所适从，不知道该用哪一个工具</p>
</li>
<li><p>针对 Go 语言编写的程序，不知道如何调试</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>了解 Go 语言的高级话题，如线程调度原理，内存管理等，使得学员有能力编写高效程序</p>
</li>
<li><p>理解 Go 语言的依赖管理方法，以便能够正确地管理项目依赖</p>
</li>
<li><p>学会用 pprof 对应用运行时的调用栈、内存等进行分析</p>
</li>
<li><p>学会用 Go 语言编写一个简单的 HTTP 服务器供后续云原生应用使用</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>Goroutine 的调度</p>
</li>
<li><p>内存管理</p>
</li>
<li><p>学会用 Go 语言编写一个简单的 HTTP 服务器</p>
</li>
</ol>
<hr>
<h4 id="第二部分：云原生技术栈"><a href="#第二部分：云原生技术栈" class="headerlink" title="第二部分：云原生技术栈"></a><font color=DarkOrange>第二部分：云原生技术栈</font></h4><h5 id="模块三：Docker-核心技术"><a href="#模块三：Docker-核心技术" class="headerlink" title="模块三：Docker 核心技术"></a><font color=DarkOrange>模块三：Docker 核心技术</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>理解容器特性以及相比虚拟化技术所具备的优势</p>
</li>
<li><p>了解容器技术的实现细节：Namespace、cgroup、文件系统</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>分不清容器技术和虚拟化技术的差异，在做技术决策时没有理论支撑</p>
</li>
<li><p>因为不了解技术原理，排查容器问题时毫无头绪</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>了解 Namespace 技术的原理以及基于 Namespace 的问题排查方法</p>
</li>
<li><p>理解 cgroup 控制资源限额的方法，查看 cgroup 配置并临时调整 cgroup 配置</p>
</li>
<li><p>理解容器文件系统如何高效管理运行时和数据</p>
</li>
<li><p>理解容器网络，为进一步理解 Kubernetes 网络插件奠定基础</p>
</li>
<li><p>基于 Dockerfile 将应用程序打包成容器镜像</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>容器技术的本质以及技术优势，Namespace、cgroup、文件系统、网络连通</p>
</li>
<li><p>容器镜像与镜像仓库</p>
</li>
<li><p>将 Go 语言编写的 HTTP 服务器打包成容器镜像</p>
</li>
</ol>
<hr>
<h5 id="模块四：Kubernetes-架构原则和对象设计"><a href="#模块四：Kubernetes-架构原则和对象设计" class="headerlink" title="模块四：Kubernetes 架构原则和对象设计"></a><font color=DarkOrange>模块四：Kubernetes 架构原则和对象设计</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>理解 Kubenretes 架构原则</p>
</li>
<li><p>理解 Kubernetes 的对象设计与 API 定义</p>
</li>
<li><p>理解 Kubernetes 控制器模式与多组件联动机制</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>对 Kubernetes 有简单认知，但无法编写出高效的、符合云原生规范和最佳实践的组件</p>
</li>
<li><p>对组件和基本对象只有浅层次的理解，对 API 的统一性和差异性无深入理解</p>
</li>
<li><p>不了解 Kubernetes 的控制器原理，对 Kubernetes 控制面板组件如何运作无深入理解</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>动手搭建 Kubernetes 环境</p>
</li>
<li><p>理解 Kubernetes 架构原则</p>
</li>
<li><p>理解 Kubernetes API 定义的设计原则，理解 Kubernetes 对象中的重要属性</p>
</li>
<li><p>理解 Kubernetes 控制器的联动机制</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>环境搭建</p>
</li>
<li><p>Kubernetes 架构优势及架构原则</p>
</li>
<li><p>Kubernetes 核心组件</p>
</li>
<li><p>Kubernetes 对象设计与 API 定义</p>
</li>
<li><p>Kubernetes 控制器模式</p>
</li>
</ol>
<hr>
<h5 id="模块五：Kubernetes-控制平面组件：etcd"><a href="#模块五：Kubernetes-控制平面组件：etcd" class="headerlink" title="模块五：Kubernetes 控制平面组件：etcd"></a><font color=DarkOrange>模块五：Kubernetes 控制平面组件：etcd</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>深入理解 Kubernetes 的唯一数据存储组件 etcd</p>
</li>
<li><p>掌握构建生产系统中 etcd 集群的方法</p>
</li>
<li><p>熟悉 etcd 的优化管理，了解灾备方案</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>对 etcd 的实现机制不了解，不知道在生产化应用过程中可能遇到的问题</p>
</li>
<li><p>不知道应该如何构建生产系统中的 etcd 集群</p>
</li>
<li><p>不知道如何进行数据的备份和灾难恢复</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>理解 Raft 协议的工作机制和 etcd 的实现原理，针对 etcd 生产系统的配置优化以及数据灾备</p>
</li>
<li><p>深入理解 API Server 的实现机制，包括与企业认证系统整合、鉴权、准入插件的实现等等</p>
</li>
<li><p>深入理解 Kubernetes 的对象实现</p>
</li>
<li><p>如何构建高可用的 etcd 和 API Server 控制平面</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>深入理解 Kubernetes 的数据存储 etcd</p>
</li>
<li><p>了解 Raft 协议</p>
</li>
<li><p>生产系统中 etcd 的配置</p>
</li>
<li><p>etcd operator</p>
</li>
<li><p>etcd 的灾备方案</p>
</li>
<li><p>生产系统中常见问题解析</p>
</li>
</ol>
<hr>
<h5 id="模块六：Kubernetes-控制平面组件：API-Server"><a href="#模块六：Kubernetes-控制平面组件：API-Server" class="headerlink" title="模块六：Kubernetes 控制平面组件：API Server"></a><font color=DarkOrange>模块六：Kubernetes 控制平面组件：API Server</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>深入理解 Kubernetes API Server 的实现机制</p>
</li>
<li><p>掌握基于 API Server Webhook 的整合方案</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>缺乏对 Kubernetes 对象实现方法的理解</p>
</li>
<li><p>对 API Server 缺乏理解，不知道如何与企业认证系统整合，不会基于鉴权准入等机制打造多租户 Kubernetes 平台</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>理解 Kubernetes 对象设计的实现机制</p>
</li>
<li><p>理解 API Server 缓存的工作机制</p>
</li>
<li><p>掌握生产系统中 API Server 的常用配置</p>
</li>
<li><p>掌握 API Server 与企业生态系统的整合方法</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>深入理解 Kubernetes API Server</p>
</li>
<li><p>API Server 代码走读</p>
</li>
<li><p>理解 internalVersion、externalVersion 和 storageVersion</p>
</li>
<li><p>理解 conversion</p>
</li>
<li><p>基于 client-go 生成 Kubernetes 框架代码</p>
</li>
<li><p>理解 lister 和 informer 框架</p>
</li>
<li><p>理解 API Server 缓存</p>
</li>
<li><p>API Server 与企业生态系统的整合：认证接入、鉴权、准入控制</p>
</li>
<li><p>API Server 常用配置与常见问题解析</p>
</li>
</ol>
<hr>
<h5 id="模块七：Kubernetes-控制平面组件：调度器和控制器"><a href="#模块七：Kubernetes-控制平面组件：调度器和控制器" class="headerlink" title="模块七：Kubernetes 控制平面组件：调度器和控制器"></a><font color=DarkOrange>模块七：Kubernetes 控制平面组件：调度器和控制器</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>理解 Kubernetes 调度器原理以及常用调度插件</p>
</li>
<li><p>理解 Kubernetes 调度的常用技巧，利用亲和性与反亲和性进行调度</p>
</li>
<li><p>理解 Kubernetes 的常见控制器</p>
</li>
<li><p>深入理解 Kubelet 对 Pod 声明周期的管理</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>对 Kubernetes 调度器无深入理解，在 Pod 无法调度时，不知道如何排查问题</p>
</li>
<li><p>不会利用 Kubernetes 调度器实现应用的高效、高可用部署</p>
</li>
<li><p>对 Kubernetes 控制器缺乏全面认知</p>
</li>
<li><p>对 Kubernetes 如何管理 Pod 生命周期缺乏认知</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>排查调度故障，利用调度器实现应用的高可用部署</p>
</li>
<li><p>扩展对 Kubernetes 控制器的认知，理解更多的 Kubernetes 控制平面行为</p>
</li>
<li><p>深入理解 CRI、CNI 和 CSI</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>深入理解 Kubernetes 调度器</p>
</li>
<li><p>深入理解 Kubenretes 控制器</p>
</li>
<li><p>深入理解 Kubelet</p>
</li>
<li><p>如何运行你的 Pod（CRI、CNI、CSI）</p>
</li>
<li><p>Kubelet Pod 代码走读</p>
</li>
<li><p>containerd 代码走读</p>
</li>
<li><p>CNI 代码走读</p>
</li>
<li><p>全方位的 CSI 一站式解决方案：Rook</p>
</li>
</ol>
<hr>
<h5 id="模块八：Kubernetes-控制平面组件：生命周期管理和服务发现"><a href="#模块八：Kubernetes-控制平面组件：生命周期管理和服务发现" class="headerlink" title="模块八：Kubernetes 控制平面组件：生命周期管理和服务发现"></a><font color=DarkOrange>模块八：Kubernetes 控制平面组件：生命周期管理和服务发现</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>深入理解 Pod 的完整生命周期和就绪状态控制</p>
</li>
<li><p>深入理解 Pod 状态控制对应用可用性的影响</p>
</li>
<li><p>深入理解 Kubernetes 中的服务发现机制，包括负载均衡配置和域名服务</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>解决日常运维的困扰，比如，在 Pod 初始化或故障转移时或者版本发布时，如何不影响业务？</p>
</li>
<li><p>我发布的服务经常出现服务中断，是缺了什么配置吗？</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>理解 Pod 的完整生命周期，如何初始化、如何控制就绪状态、如何探活、如何优雅终止</p>
</li>
<li><p>如何发布服务，如何剔出异常实例</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>深入理解 Kubernetes 的服务实例对象 Pod：Pod 生命周期详解、健康探针、ReadinessGate</p>
</li>
<li><p>深入理解 Kube-Proxy：如何发布你的服务、代码走读、负载均衡配置</p>
</li>
<li><p>域名管理</p>
</li>
<li><p>基于 Ingress 以及 Service API 的入站流量管理</p>
</li>
</ol>
<hr>
<h5 id="模块九：生产化集群的管理"><a href="#模块九：生产化集群的管理" class="headerlink" title="模块九：生产化集群的管理"></a><font color=DarkOrange>模块九：生产化集群的管理</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>掌握生产化集群的搭建技术</p>
</li>
<li><p>掌握生产化集群持续运维过程中最重要的节点管理能力</p>
</li>
<li><p>如何在不影响业务的前提下完成 Kubernetes 升级</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>不知道如何快速构建本地集群供研发测试使用</p>
</li>
<li><p>未掌握构建生产化集群的方法，缺少对集群节点的管控，节点出现故障以后需要人为介入</p>
</li>
<li><p>如何实现生产化集群的管理，比如计算节点的监控与管理</p>
</li>
<li><p>不了解完成了集群搭建以后离生产化还有多远</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<p>快速构建本地集群的能力</p>
<p>理解 Kubernetes 集群构建的原理，掌握搭建 Kubernetes 集群的能力</p>
<p>基于 Cluster API 完成生产化集群的构建和持续运维</p>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>利用 kind 构建本地集群</p>
</li>
<li><p>利用 kubeadm 构建基于虚拟机的集群</p>
</li>
<li><p>利用 Cluster API 完成生产化集群的搭建</p>
</li>
<li><p>持续运维的考量：节点健康检查、Kubernetes 升级、主机操作系统升级</p>
</li>
</ol>
<hr>
<h5 id="模块十：Kubernetes-的生产化运维"><a href="#模块十：Kubernetes-的生产化运维" class="headerlink" title="模块十：Kubernetes 的生产化运维"></a><font color=DarkOrange>模块十：Kubernetes 的生产化运维</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>如何实现基于 Kubernetes 的 CI&#x2F;CD</p>
</li>
<li><p>如何实现生产化集群的监控</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>缺少企业统一的镜像仓库</p>
</li>
<li><p>镜像安全应该如何保证</p>
</li>
<li><p>企业缺少持续集成持续部署能力</p>
</li>
<li><p>缺少对整个集群的监控，希望实现无人值守</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>打造持续集成平台</p>
</li>
<li><p>基于自动化管理生产化集群</p>
</li>
<li><p>实现对集群控制面板以及重要应用的监控和告警</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>镜像仓库和容器镜像缓存</p>
</li>
<li><p>镜像扫描和镜像安全保证</p>
</li>
<li><p>基于 Kubernetes、Jenkins、Tekton 打造 CI&#x2F;CD Pipeline</p>
</li>
<li><p>集群监控：日志收集和分析，事件、指标和告警（Event、Metrics 和 Alert）</p>
</li>
</ol>
<hr>
<h5 id="模块十一：将应用迁移至-Kubernetes-平台"><a href="#模块十一：将应用迁移至-Kubernetes-平台" class="headerlink" title="模块十一：将应用迁移至 Kubernetes 平台"></a><font color=DarkOrange>模块十一：将应用迁移至 Kubernetes 平台</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>如何将无状态应用发布到 Kubernetes 平台</p>
</li>
<li><p>如何基于 Kubernetes 原生能力将有状态应用发布到 Kubernetes 平台</p>
</li>
<li><p>基于 Kubernetes 对象扩展，将更复杂的应用发布到 Kubernetes 平台</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>缺少将应用发布到 Kubernetes 平台上的理论指导</p>
</li>
<li><p>对于有状态应用，更不知道如何借助 Kubernetes 平台的优势进行处理</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>掌握 Kubernetes 提供的应用管理框架，包括有状态应用和无状态应用</p>
</li>
<li><p>掌握 Operator 模式，具备通过 Kubebuilder 构建自己的 CRD，并且基于 CRD 编写控制器的能力</p>
</li>
<li><p>利用 Kubebuilder 完成控制器的测试和发布</p>
</li>
<li><p>借助 Helm 完成复杂的应用模板管理</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>应用容器化</p>
</li>
<li><p>无状态应用移植到 Kubernetes 平台的考量</p>
</li>
<li><p>有状态应用移植到 Kubernetes 平台的考量</p>
</li>
<li><p>理解 Operator</p>
</li>
<li><p>借助 Kubebuilder 开发一个 Operator</p>
</li>
<li><p>借助 Helm 管理应用发布</p>
</li>
</ol>
<hr>
<h5 id="模块十二：基于-Istio-的高级流量管理"><a href="#模块十二：基于-Istio-的高级流量管理" class="headerlink" title="模块十二：基于 Istio 的高级流量管理"></a><font color=DarkOrange>模块十二：基于 Istio 的高级流量管理</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>理解基于 TCP&#x2F;UDP 协议的 Kubernetes Service 的局限性</p>
</li>
<li><p>理解 Kubernetes 入站流量管理的场景和原生方案</p>
</li>
<li><p>理解原生方案的局限性和社区的方向</p>
</li>
<li><p>深入理解 Envoy 的服务发现机制、线程模型以及扩展机制</p>
</li>
<li><p>理解如何基于 Istio 实现入站、出站流量管理以及服务网格管理</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>社区的 Ingress 对象无法毕业，为支持生产化应用，应该用什么方案提供入站流量支撑</p>
</li>
<li><p>Envoy 为什么变成了 Kubernetes 中七层代理的首选</p>
</li>
<li><p>社区爆火的 Istio 背后的技术驱动力是什么，我应该选 Istio 作为入站流量管理平面组件吗</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>深入理解 Envoy 的实现机制</p>
</li>
<li><p>深入理解 Istio 的实现机制，了解为什么 Istio 会成为服务网格的标准</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>入站流量管理 Ingress 和 Service API</p>
</li>
<li><p>Istio 和 Envoy</p>
</li>
<li><p>深入理解 Envoy：发现机制、线程模型、filter 机制、高级特性</p>
</li>
<li><p>深入理解 Isito：入站流量、出站流量、Service Mesh（服务网格）、Istio 服务发现代码走读</p>
</li>
<li><p>安全保证</p>
</li>
</ol>
<hr>
<h5 id="模块十三：Kubernetes-集群联邦和-Istio-多集群管理"><a href="#模块十三：Kubernetes-集群联邦和-Istio-多集群管理" class="headerlink" title="模块十三：Kubernetes 集群联邦和 Istio 多集群管理"></a><font color=DarkOrange>模块十三：Kubernetes 集群联邦和 Istio 多集群管理</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>如何通过集群联邦的统一控制平面管理多个集群</p>
</li>
<li><p>如何部署跨地域的高可用应用</p>
</li>
<li><p>如何通过 Istio 多集群方案管理跨集群的 Service Mesh（服务网格）</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>针对真正的生产化应用，跨地域部署是确保应用高可用的一个强需求，那么如何管理多个 Kubernetes 集群</p>
</li>
<li><p>针对跨集群部署的应用，如何确保其接入流量高可用，如何借助 Istio 实现这一目的</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>Kubernetes 集群联邦的实现原理和配置方法</p>
</li>
<li><p>Istio 多集群实现原理和配置方法</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>Kubernetes 集群联邦</p>
</li>
<li><p>基于集群联邦的跨地域高可用部署</p>
</li>
<li><p>基于 Istio 多集群的流量高可用方案</p>
</li>
</ol>
<hr>
<h5 id="模块十四：基于-Kubernetes-和-Istio-的安全保证"><a href="#模块十四：基于-Kubernetes-和-Istio-的安全保证" class="headerlink" title="模块十四：基于 Kubernetes 和 Istio 的安全保证"></a><font color=DarkOrange>模块十四：基于 Kubernetes 和 Istio 的安全保证</font></h5><p><strong>教学目标：</strong></p>
<ol>
<li><p>理解传统安全架构的挑战</p>
</li>
<li><p>掌握零信任架构的意义和机遇</p>
</li>
<li><p>掌握 Kubernetes 平台本身的安全保证手段</p>
</li>
<li><p>学习如何基于 Kubernetes 和 Istio 实现对应用的隔离和安全保证</p>
</li>
</ol>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>如何确保 Kubernetes 平台的安全性</p>
</li>
<li><p>如何确保 Kubernetes 中数据保存的安全性</p>
</li>
<li><p>如何确保 Kubernetes 上运行应用的安全性</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>如何保证 etcd 中保存的数据安全性</p>
</li>
<li><p>如何保证 Kubernetes 控制面板的安全性</p>
</li>
<li><p>如何确保 API 网关的安全性</p>
</li>
<li><p>对应用进行安全隔离</p>
</li>
<li><p>如何基于零信任架构完成应用的认证和授权</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<ol>
<li><p>理解 etcd 的加密方法</p>
</li>
<li><p>掌握 Kubernetes 控制面板的安全配置</p>
</li>
<li><p>掌握应用隔离的常规手段以及在 Kubernetes 中配置的方式</p>
</li>
<li><p>掌握 API 网关的安全配置</p>
</li>
<li><p>了解基于 Istio 的认证鉴权机制</p>
</li>
</ol>
<hr>
<h4 id="第三部分：云原生项目实战"><a href="#第三部分：云原生项目实战" class="headerlink" title="第三部分：云原生项目实战"></a><font color=DarkOrange>第三部分：云原生项目实战</font></h4><h5 id="模块十五：微服务项目的开发和部署案例"><a href="#模块十五：微服务项目的开发和部署案例" class="headerlink" title="模块十五：微服务项目的开发和部署案例"></a><font color=DarkOrange>模块十五：微服务项目的开发和部署案例</font></h5><p><strong>教学目标：</strong></p>
<p>完成一个复杂的异构的微服务系统在 Kubernetes 平台上的部署，以 Istio 的 Bookinfo 为例</p>
<p><strong>针对的用户痛点：</strong></p>
<ol>
<li><p>随着业务复杂度的增加，微服务的部署和运维变得越来越有挑战性，如何保证微服务应用部署的高性能是一个复杂问题</p>
</li>
<li><p>如何基于熔断、限流等手段保护核心业务</p>
</li>
<li><p>如何基于基础架构平台确保应用安全</p>
</li>
</ol>
<p><strong>通过学习掌握的核心能力：</strong></p>
<ol>
<li><p>基于微服务架构的复杂应用部署</p>
</li>
<li><p>熔断、限流、故障注入</p>
</li>
<li><p>应用的安全保证</p>
</li>
</ol>
<p><strong>详细内容：</strong></p>
<p>本模块是之前所有模块的综合复习模块，希望借助本模块完成基于 Kubernetes 框架下面微服务治理这一重要命题的回顾和总结</p>
<hr>
<h4 id="石墨文档"><a href="#石墨文档" class="headerlink" title="石墨文档"></a><font color=DarkOrange>石墨文档</font></h4><p>石墨文档的链接可能会更新，在此附上原地址链接</p>
<p>云原生训练营课程大纲：<a href="https://shimo.im/docs/6VdchtKxdjrCqDdY/read">点击跳转</a></p>
<p>云原生训练营实战项目：<a href="https://shimo.im/docs/RKAWV8xgZ7tKWXk8/read">点击跳转</a></p>
<hr>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客</title>
    <url>/2022/10/27/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="8cdeeb691609e9cb1a4d50ee937210b710f399c64ca345f4564a3a4a39e3d98e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>加密</category>
      </categories>
  </entry>
  <entry>
    <title>系统设计与架构</title>
    <url>/2022/11/01/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>系统设计与架构常见题整理</p>
<p>GitHub地址：<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md">点击跳转</a></p>
<h4 id="1-如何设计一个短链服务"><a href="#1-如何设计一个短链服务" class="headerlink" title="1. 如何设计一个短链服务"></a><font color=DarkOrange>1. 如何设计一个短链服务</font></h4><p>参考链接：<a href="https://mp.weixin.qq.com/s/33lcKX3bLUAC-Mj0VlXa6A">点击跳转</a></p>
<h5 id="1-1-短链的价值"><a href="#1-1-短链的价值" class="headerlink" title="1.1 短链的价值"></a><font color=DarkOrange>1.1 短链的价值</font></h5><ul>
<li><strong>更加简洁：</strong>比起一长串无意义的问题，只有差不多 10 个字符的字符串显然更加简洁</li>
<li><strong>便于使用：</strong>第一，有些平台对内容长度有限制（微博只能发 140 个字），此时短网址就可以输入更多内容。第二，我们将链接转为二维码时，短链接生成的二维码更容易识别。第三，有些平台无法识别特殊的长链参数，转为短链就没这个问题</li>
<li><strong>节省成本：</strong>当我们需要发短信的时候，短信是按照长度计费的，短网址可以节省成本</li>
</ul>
<h5 id="1-2-短链的原理"><a href="#1-2-短链的原理" class="headerlink" title="1.2 短链的原理"></a><font color=DarkOrange>1.2 短链的原理</font></h5><p>当我们输入短链时，其实访问的是短链服务器的地址。短链服务器获取到对应的长链地址之后，返回一个 302 的 HTTP 响应，在响应中包含了长链接地址。浏览器收到响应后，转而去请求长链接地址。 访问短链的整个流程如下图所示：</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7qyiustgcj30e307zq3t.jpg" alt="image.png" style="zoom:90%;" /></div>

<p>从上面的流程中可以知道，短链涉及到的技术原理主要有两点，分别是：HTTP 重定向和短链服务的设计</p>
<p>对于 HTTP 重定向来说，301 和 302 都是重定向：</p>
<ul>
<li>301 代表永久重定向。它表示第一次拿到长链接之后，下次浏览器如果再去请求短链的话，不会再向短链服务器请求了，而是直接从浏览器的缓存中获取。</li>
<li>302 代表临时重定向。它表示每次请求短链都会去请求短链服务器，不会从浏览器缓存中获取</li>
</ul>
<p>如果我们希望统计短链接的点击次数信息，从而来分析活动的效果的话。那么我们就需要使用 302 重定向码，这样才能获取到每次的请求数据。 一般情况下，我们都是需要获取到请求的数据的，因此对于短链服务都是用 302 临时重定向</p>
<h5 id="1-3-实现思路"><a href="#1-3-实现思路" class="headerlink" title="1.3 实现思路"></a><font color=DarkOrange>1.3 实现思路</font></h5><p>系统的处理流程：</p>
<ol>
<li>用户访问短链生成页面，输入长链字符串，短链服务返回生成的短链</li>
<li>用户访问短链，短链服务返回 302 响应，用户浏览器跳转到长链地址</li>
</ol>
<p>如果我们要实现上面的系统流程，我们大致的处理思路是：</p>
<ol>
<li><strong>生成短链。</strong> 生成短链时，短链服务获取到长链，随后生成一个短链，并把短链与长链的映射关系保存下来，最后将短链返回给用户</li>
<li><strong>找到长链。</strong> 访问短链时，短链服务获取到短链，根据短链去获取到长链，返回返回 302 响应</li>
</ol>
<p>根据上面的分析，我们可以知道短链系统设计主要得解决如下两个问题：</p>
<ol>
<li>如何根据长链生成唯一短链？</li>
<li>如何保存短链与长链的映射关系</li>
</ol>
<p>对于第 1 点，我们有 2 个思路生成一个唯一短链，分别是：</p>
<ol>
<li>使用哈希算法生成唯一值</li>
<li>使用分布式唯一 ID 生成作为锻炼 ID</li>
</ol>
<p>对于第 2 点，保存短链与长链的映射关系，考虑到持久性的问题，我们肯定需要落库，所以使用 MySQL 表保存即可。如果有需要的话，可以在 MySQL 前做一层缓存。因此第 2 点相对来说比较简单</p>
<hr>
<h6 id="1-3-1-哈希算法生成短链"><a href="#1-3-1-哈希算法生成短链" class="headerlink" title="1.3.1 哈希算法生成短链"></a><font color=DarkOrange>1.3.1 哈希算法生成短链</font></h6><p>要生成一个短链，我们可以将原有的长链做一次哈希，然后就可以得到一个哈希值，计算哈希值会遇到如下2个问题：</p>
<p><strong>使用什么哈希算法</strong></p>
<p>我们都知道哈希算法是一种摘要算法，它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。我们常见的哈希算法有：MD5、SHA-1、SHA-256、SHA-512 算法等。但我们最好还是使用另一种叫做 MurmurHash 的哈希算法。为什么呢</p>
<p>因为 MD5 和 SHA 哈希算法，它们都是加密的哈希算法，也就是说我们无法从哈希值反向推导出原文，从而保证了原文的保密性</p>
<p>但对于我们这个场景而言，我们并不关心安全性，我们关注的是运算速度以及哈希冲突。而 MurmurHash 算法是一个非加密哈希算法，所以它的速度回更快</p>
<p><strong>哈希冲突</strong></p>
<p>学过 HashMap 的同学都知道，哈希冲突是哈希算法不可避免的问题。而解决哈希冲突的方式有两种，分别是：链表法和重哈希法。HashMap 使用了链表法，但我们这里使用的是重哈希法</p>
<p>所谓的重哈希法，指的是当发生哈希冲突的时候，我们在原有长链后面加上固定的特殊字符，后续拿出长链时再将其去掉，如下所示</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">原有长链：https://mp.weixin.qq.com/s1caec8eb1b81d6ee5dd7b</span><br><span class="line">              ↓↓  </span><br><span class="line">           发生哈希冲突</span><br><span class="line">              ↓↓  </span><br><span class="line">补上特殊字符：https://mp.weixin.qq.com/s1caec8eb1b81d6ee5dd7b[SPECIAL-CHARACTER]</span><br><span class="line">              ↓↓  </span><br><span class="line">           再次进行哈希</span><br></pre></td></tr></table></figure>

<p>通过这种办法，我们就可以解决哈希冲突的问题了。如果再次发生，那么就再进行哈希，一直到不冲突位置。一般来说，哈希冲突的可能性微乎其微</p>
<p>好了，现在我们通过哈希算法得到了一个哈希值：<code>29541341303115543223957290326355</code>，变成了这样：<code>http://dwz.com/29541341303115543223957290326355</code></p>
<p>有没有办法让网址变得再短一点呢</p>
<p>我们知道在网址 URL 中，常用的合法字符有 0～9、a～z、A～Z 这样 62 个字符。如果我们用哈希值与 62 取余，那么余数肯定是在 0-61 之间</p>
<p>这 62 个数字刚好与 62 个合法网址字符一一对应。接着，我们再用除 62 得到的值，再次与 62 取余，一直到位 0 为止。通过这样的处理，我们就可以得到一个字符为 62 个字符、长度很短的字符串了</p>
<p>上面讲有点晦涩难懂，我们来举个例子。假设我们得到的哈希值为 181338494，那么上面的处理流程为：</p>
<ol>
<li>将 181338494 除以 62，得到结果为 2924814，余数为 26，此时余数 26 对应字符为 q。</li>
<li>将 2924814 除以 62，得到结果为 47174，余数为 26，此时余数 26 对应字符为 q。</li>
<li>将 47174 除以 62，得到结果为 760，余数为 54，此时余数 54 对应字符为 S。</li>
<li>省略剩余步骤</li>
</ol>
<p>整个处理流程如下图所示：</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7qyyjct7rj30ia0bk405.jpg" alt="image.png" style="zoom:90%;" /></div>

<p>可以看到，我们把 181338494 这个十进制数，转成了由合法网址字符组成的「62 进制数」—— <code>cgSqq</code></p>
<p>到这里，我们不仅生成了短链，还将短链的长度极大地缩短了</p>
<p>这就是使用哈希算法生成唯一锻炼的全部内容了，我们总结一下：<strong>首先，使用 MurmurHash 生成哈希值，并且用重哈希法解决哈希冲突的问题。接着，将 10 进制的哈希值转成 62 进制的合法网址字符，从而缩短网址长度</strong></p>
<h6 id="1-3-2-分布式-ID-生成短链"><a href="#1-3-2-分布式-ID-生成短链" class="headerlink" title="1.3.2 分布式 ID 生成短链"></a><font color=DarkOrange>1.3.2 分布式 ID 生成短链</font></h6><p>上面使用哈希算法生成唯一短链的方式，相对来说是比较形象的。但其实我们也可以用分布式 ID 的方式，来完成唯一短链的生成</p>
<p>例如第一次请求的长链，我们为其生成一个唯一 ID，将其长链与唯一 ID 对应起来。第二次请求，我们再为其生成一个唯一 ID，再次将长链与唯一 ID 对应起来，如下所示。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">第一次请求：https://mp.weixin.qq.com/s1caec8eb1b81d6ee5dd7b</span><br><span class="line">              ↓↓  </span><br><span class="line">生成短链：https://dwz.com/1021000001</span><br><span class="line"></span><br><span class="line">第一次请求：https://mp.weixin.qq.com/s1caec8eb1b81d6ee5ff7b</span><br><span class="line">              ↓↓  </span><br><span class="line">生成短链：https://dwz.com/1021000002</span><br></pre></td></tr></table></figure>

<p>因为生成的唯一 ID 也可能非常长，因此我们可以采用上面同样的方式，将 10 进制的唯一 ID 转成 62 进制的合法网址字符，从而缩短字符长度</p>
<p>那么接下来的问题就变成了：如何设计一个全局唯一 ID 发号器了</p>
<p>对于如何设计一个全局唯一的 ID 发号器，就属于另外一个话题，我们这里就不深入探讨了</p>
<h5 id="1-4-性能优化"><a href="#1-4-性能优化" class="headerlink" title="1.4 性能优化"></a><font color=DarkOrange>1.4 性能优化</font></h5><p>看到这里，我们基本上有了一个完整的思路：拿到长链地址后，可以用哈希算法或唯一 ID 分号器获取唯一字符串，从而建立长链与短链的映射关系。为了缩短短链长度，我们还可以将其用 62 进制数表示，整个短链生成过程如下图所示</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7qz2vgn49j30f10d3gn7.jpg" alt="image.png" style="zoom:80%;" /></div>

<p>短链生成完，并且已经存到了数据库中，接下里该使用了。通常的做法是会根据请求的短链字符串，从数据库中找到数据，然后返回 HTTP 重定向原始地址。而在不断使用过程中，还有一些可能发现的优化点，这里简单讲讲</p>
<ul>
<li><p>索引优化</p>
<ul>
<li>如果使用关系型数据库的话，对于短链字段需要创建唯一索引，从而加快查询速度</li>
</ul>
</li>
<li><p>增加缓存</p>
<ul>
<li>并发量小的时候，我们都是直接访问数据库。但当并发量再次升高时，需要加上缓存抗住热点数据的访问</li>
</ul>
</li>
<li><p>读写分离</p>
<ul>
<li>短链服务肯定是读远大于写的，因此对于短链服务，可以做好读写分离</li>
</ul>
</li>
<li><p>分库分表</p>
<ul>
<li>如果是商用的短链服务，那么数据量上亿是很正常的，更不用说常年累月积累下的量了。这时候可以一开始就做好分库分表操作，避免后期再大动干戈</li>
<li>对于分库分表来说，最关键的便是根据哪个字段去作为分库分表的依据了。对于短链服务来说，当然是用转化后的 62 进制数字做分表依据了，因为它是唯一的嘛</li>
</ul>
</li>
<li><p>防止恶意攻击</p>
<ul>
<li><p>开放到公网的服务，什么事情都可能发生，其中一个可能的点就是被恶意攻击，不断循环调用</p>
</li>
<li><p>一开始我们可以做一下简单地限流操作，例如：</p>
<ol>
<li>没有授权的用户，根据 IP 进行判断，1 分钟最多只能请求 10 次</li>
<li>没有授权的用户，所有用户 1 分钟最多只能请求 4000 次，防止更换 IP 进行攻击</li>
</ol>
</li>
<li><p>简单地说，就是要不断提高攻击的成本，使得最坏情况下系统依然可以正常提供服务</p>
</li>
</ul>
</li>
</ul>
<h5 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5 总结"></a><font color=DarkOrange>1.5 总结</font></h5><p>在短链服务的设计思路上，最重要是解决两个问题：根据长链生成短链、根据短链找到长链。在根据长链生成短链的思路上，有两种实现思路，分别是：哈希算法生成短链、分布式全局 ID 生成短链，其中哈希算法涉及到哈希算法的选择，以及哈希冲突的处理</p>
<p>最后还列举了一些短链服务后续可能的优化点，包括：如何让网址变得更短、索引优化、增加热点数据、读写分离、分库分表、防止恶意攻击等等</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7qz95bl1zj30u00l77d9.jpg" alt="image.png" style="zoom:100%;" /></div>

<h4 id="2-如何设计一个秒杀系统"><a href="#2-如何设计一个秒杀系统" class="headerlink" title="2. 如何设计一个秒杀系统"></a><font color=DarkOrange>2. 如何设计一个秒杀系统</font></h4><p>参考链接：<a href="https://mp.weixin.qq.com/s/kWqgzMw4qKek7QUfkDSwNg">点击跳转</a></p>
<p>秒杀系统的设计是高级职位面试中非常高频的一道题目，它可以较好地考察候选人的知识体系情况。对于我们来说，学习秒杀系统的设计，能够让我们学以致用，设计系统的时候考虑得更加全面</p>
<p>活动一般出现在电商的促销活动中，一般是指定了很少数量的商品，以极低的价格，让大量的用户参与，从而造成大量用户在极短的时间内参与活动，进而造成系统在极短的时间内有极高的流量。系统设计的目的是使系统能够稳定地支撑活动的进行，因此其稳定性、高可用是我们考虑的第一位</p>
<p>要知道如何进行秒杀系统的优化，那我们需要先对请求的整个流程有个全局的认识。<strong>一般来说，秒杀活动请求以公网为划分点，可以分为：前端部分、后端部分。</strong> 前端部分指的是从用户端到进入后端服务前的部分，包括了移动端的处理、DNS 解析、公网的数据传递等</p>
<p>后端部分指的是经公网进入了后端的服务器网络里，包括了前置的负载均衡（Nginx 等）、应用服务器、数据库层等。秒杀活动的整个流程可以用下图来表示</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7qzrdanrnj30r90bpn04.jpg" alt="image.png" style="zoom:80%;" /></div>

<p>我们要去设计一个秒杀系统，那自然也是从这两大部分来进行优化。整体思路是尽量将流量挡在前面，让尽量少的流量留到后端部分。因为越往后端，我们的处理逻辑就越重，其处理能力也越弱</p>
<h5 id="2-1-前端优化"><a href="#2-1-前端优化" class="headerlink" title="2.1 前端优化"></a><font color=DarkOrange>2.1 前端优化</font></h5><p>对于前端部分来说，常见的优化手段有：页面静态化 + CDN、请求频率限制</p>
<h6 id="2-1-1-页面静态化-CDN"><a href="#2-1-1-页面静态化-CDN" class="headerlink" title="2.1.1 页面静态化 + CDN"></a><font color=DarkOrange>2.1.1 页面静态化 + CDN</font></h6><p>一般来说，活动页面是流量最大的地方。活动页面上绝大部分内容都是固定的，比如：商品描述、图片等。这时候没有必要每次都去请求服务端，而是将这些静态的内容放到 CDN 上</p>
<p>每次打开页面的时候，直接去请求 CDN 服务器，能极大地减少后端的请求流量。加入了 CDN 之后，其请求过程如下：</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7qzu0en0vj30k105ldh2.jpg" alt="image.png" style="zoom:100%;" /></div>

<p>所谓的 CDN 就是内容分发网络，它由非常多台分布在世界各地的缓存服务器组成。每次用户请求特定域名的时候，会转发到对应 CDN 的 DNS 解析服务器，随后会返回一台离用户地理位置最近的一台 CDN 服务器</p>
<p>随后，用户直接请求这台 CDN 服务器获取数据，从而极大地减少了长途网络传输的时间，并且也减少了后端服务器的压力</p>
<p><strong>因此，对于秒杀活动设计来说，我们可以将所有可以静态化的内容全部静态化，然后将其配置在 CDN 服务器上。这样既提高了用户打开页面的时间，又减少了后端服务器的压力</strong></p>
<h6 id="2-1-2-请求频率限制"><a href="#2-1-2-请求频率限制" class="headerlink" title="2.1.2 请求频率限制"></a><font color=DarkOrange>2.1.2 请求频率限制</font></h6><p>请求频率限制，指的是根据业务的特点，在前端做一些流量拦截，减少后端服务器的压力。常见的拦截方式有：</p>
<ol>
<li>设定一个请求概率，只允许 30% 的概率向后端发送接口请求。</li>
<li>设定一个请求频率，例如 10 秒钟只能请求 1 次，随后按钮置灰</li>
</ol>
<p>通过这种方式，我们可以减少很大一部分流量。但在具体实现的时候，可能需要考虑安全问题，预防某些用户直接调用后台接口，绕过前端的频率检查</p>
<p>常见的方法是在频率检查时生成一个参数，随后请求后端服务时携带上该参数。没有该参数的请求，都视为非法请求，直接拒绝该请求</p>
<h5 id="2-2-后端优化"><a href="#2-2-后端优化" class="headerlink" title="2.2 后端优化"></a><font color=DarkOrange>2.2 后端优化</font></h5><p>无论我们做多大的努力，始终还是会有不少流量会来到后端服务器这里。一般来说，后端的优化有如下几种方式：</p>
<ol>
<li>增加缓存层 + 预热数据</li>
<li>MQ 异步处理</li>
<li>限流、熔断、兜底</li>
<li>业务侧优化</li>
</ol>
<h6 id="2-2-1-增加缓存层-预热数据"><a href="#2-2-1-增加缓存层-预热数据" class="headerlink" title="2.2.1 增加缓存层 + 预热数据"></a><font color=DarkOrange>2.2.1 增加缓存层 + 预热数据</font></h6><p>如果我们所有数据都去读取数据库，数据库可能无法承受较大的流量，此时一个常见的优化就是增加缓存层</p>
<p>当我们需要查询数据库之前，我们先去查询缓存，这样可以减少绝大部分的数据库请求，减轻数据库压力。如果在缓存中找不到数据，我们再去请求数据库，随后再将数据缓存到缓存中</p>
<p>在引入缓存层的时候，我们需要考虑缓存击穿、缓存穿透的可能性，在写相关代码的时候就要做好这些优化。另外，我们在秒杀活动开始之前，可以手动将热点数据加载到缓存中，从而避免秒杀时去请求数据库</p>
<h6 id="2-2-2-MQ-异步处理"><a href="#2-2-2-MQ-异步处理" class="headerlink" title="2.2.2 MQ 异步处理"></a><font color=DarkOrange>2.2.2 MQ 异步处理</font></h6><p>我们知道秒杀活动一般涉及抢购、下单、支付、发货等阶段，而抢购与后续的几个阶段是可以异步执行的。为了避免对下单、支付、发货等阶段产生影响，我们可以将抢购阶段与后续阶段用 MQ 进行解耦处理。当用户抢购成功后，往消息队列中丢入一台消息，随后再由订单系统消费进行下单处理</p>
<p>通过各系统之间的解耦处理，我们可以将原本同步的处理方式变为异步处理，从而大大的减少了请求的处理时间，提高了系统的并发处理能力。其次，也能避免系统之间相互影响，提高了整体系统的稳定性</p>
<h6 id="2-2-3-限流、熔断、兜底"><a href="#2-2-3-限流、熔断、兜底" class="headerlink" title="2.2.3 限流、熔断、兜底"></a><font color=DarkOrange>2.2.3 限流、熔断、兜底</font></h6><p>我们可以在每个业务系统做限流操作，从而避免因为请求太多，导致整个系统都无法工作。当并发请求在正常范围内时，我们正常处理请求。当超过设置的限流阈值时，我们则直接拒绝该请求，提示用户抢购失败</p>
<p>如果没有限流操作，那么系统直接崩溃了，一个请求都处理不了。而通过限流这种方式，系统至少还可以保持正常工作，而不至于一个请求都处理不了。而超量的需求，本来就处理不了，因此提示失败也是情理之中</p>
<p>除了限流之外，不同的系统还可以采用熔断、降级的服务治理措施</p>
<p>熔断指的是请求的错误次数超过阈值时，不再到用后端服务，直接返回失败。同时每隔一定时间放几个请求去重试后端服务，看看是否正常。如果正常则关闭熔断状态，如果失败则继续快速失败。<strong>熔断的目的是避免因下游短暂的异常，导致上游不断重试，最终造成下游有太多请求，最终压垮下游系统</strong></p>
<p>降级指的是当服务失败或异常后，返回指定的默认信息。<strong>降级的目的是保证有基本的信息，当下游异常时，与其返回空信息，不如返回一个有业务含义的默认信息，可以提高用户体验</strong></p>
<h6 id="2-2-4-业务侧优化"><a href="#2-2-4-业务侧优化" class="headerlink" title="2.2.4 业务侧优化"></a><font color=DarkOrange>2.2.4 业务侧优化</font></h6><p>一般来说，经过上述的整体优化之后，系统已经能够比较稳当地应对秒杀活动了。如果此时还是流量比较大，那么或许应该从业务侧去进行优化了</p>
<p>例如 12306 刚开始的时候，购买时间都在同一时刻，这导致同一时刻并发量太大，系统经常支撑不住。后来 12306 将购票周期放长，可以提前 20 天购买火车票。通过业务侧的优化，我们将本来在 1 个小时的抢购分摊到了 20 天，服务器压力一下子降低了 480 倍</p>
<p><strong>因此从业务侧进行优化，是一个四两拨千斤的办法，可以极大地降低技术侧实现的难度</strong></p>
<h5 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a><font color=DarkOrange>2.3 总结</font></h5><p>设计一个秒杀系统，整体而言可以从前端与后端进行优化。</p>
<p><strong>对于前端优化而言，可以从「页面静态化 + CDN」、请求频率限制进行优化</strong></p>
<p>其中「页面静态化 + CDN」指的是将不变的静态数据固定下来，然后放入 CDN 服务器，从而降低用户请求的响应速度，降低服务器的并发压力。请求频率限制，则是通过抢购概率与抢购频率限制，降低后端服务器的服务压力。</p>
<p><strong>对于后端优化而言，一般有「增加缓存层 + 预热数据」、「MQ 异步处理」、「限流、熔断、降级」、业务侧优化这 4 种优化方式</strong></p>
<p>其中「增加缓存层 + 预热数据」指的是将热点数据存入缓存，并在活动开始前提前加载到缓存中，降低数据库层的读取压力。「MQ 异步处理」指的是对于非必要的业务逻辑，通过 MQ 进行异步处理，降低请求处理延时，同时提高业务系统整体稳定性</p>
<p>「限流、熔断、降级」是对于整体微服务的保护，其中限流指的是对请求进行限制，当超过限流阈值时，直接拒绝请求，保护系统本身；熔断指的是保护下游系统，当请求下游系统连续错误超过阈值时，自动不去请求下游系统，避免因重试流量过大击垮下游系统。</p>
<p>降级指的是当请求失败时，自动返回默认数据，提高用户体验。业务侧优化，则是指从业务层面去进行逻辑优化，从而降低技术复杂度，使得业务与技术复杂度达到一个平衡的状态，有利于更好地实现秒杀系统的高可用与高并发。</p>
<p>上面说到的 6 个优化思路，是设计秒杀系统常见的优化思路。<strong>但在实际业务场景中，除了要保障正常的功能设计之外，还还考虑防刷、安全、黑产等问题</strong>，此时可能需要多考虑一些其他优化，例如：黄牛利用抢购工具抢购，导致正常用户无法抢到商品等</p>
<p>这时候可能需要考虑增加验证码，用 App 设备指纹等风控措施。<strong>此外，对于秒杀系统而言，做好业务指标和系统指标的埋点监控也是非常重要的</strong></p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7r06ob49vj30u00e145t.jpg" alt="image.png" style="zoom:100%;" /></div>



<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>系统设计与架构</tag>
      </tags>
  </entry>
  <entry>
    <title>行为面试</title>
    <url>/2022/11/03/%E8%A1%8C%E4%B8%BA%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="3b29574c97e587c780b70d5a0914998c0beb811a3e8003ceac64b7bec2b7cbad"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>加密</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法面试题</title>
    <url>/2022/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>常见高频面试数据结构与算法题</p>
<hr>
<p><strong>出现的频率从上到下依次递减</strong></p>
<h4 id="1-反转链表（Go）206-容易"><a href="#1-反转链表（Go）206-容易" class="headerlink" title="1. 反转链表（Go）206-容易"></a><font color=DarkOrange>1. 反转链表（Go）206-容易</font></h4><p><strong>题目：</strong></p>
<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：head = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输入：head = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输入：head = <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 5000]</code></li>
<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：迭代<br>假设链表为 1→2→3→∅，我们想要把它改成∅←1←2←3</p>
<p>在遍历链表时，将当前节点的 <code>next</code> 指针改为指向前一个节点。由于节点没有引用其前一个节点，因此必须事先存储其前一个节点。在更改引用之前，还需要存储后一个节点。最后返回新的头引用</p>
<div align="center"><img src="https://i.bmp.ovh/imgs/2022/06/21/935d47f8204310d8.png" style="zoom:50%;" /></div>

<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n 是链表的长度。需要遍历链表一次</li>
<li>空间复杂度：O(1)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNode 定义单链表</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Value <span class="type">int</span></span><br><span class="line">	Next  *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 反转单链表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Solution</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">	<span class="keyword">var</span> prev *ListNode</span><br><span class="line">	curr := head</span><br><span class="line">	<span class="keyword">for</span> curr != <span class="literal">nil</span> &#123;</span><br><span class="line">		next := curr.Next</span><br><span class="line">		curr.Next = prev</span><br><span class="line">		prev = curr</span><br><span class="line">		curr = next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateListNode 使用slice生成单链表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateListNode</span><span class="params">(nums []<span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">	<span class="keyword">var</span> head ListNode</span><br><span class="line">	<span class="keyword">var</span> pre ListNode</span><br><span class="line">	<span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">		node := ListNode&#123;Value: num, Next: <span class="literal">nil</span>&#125;</span><br><span class="line">		<span class="keyword">if</span> head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">			head.Next = &amp;node</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> pre.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">			pre.Next = &amp;node</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			pre.Next.Next = &amp;node</span><br><span class="line">			pre = *pre.Next</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Traverse 遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Traverse</span><span class="params">(t *ListNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;空链表&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> t != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%d &quot;</span>, t.Value)</span><br><span class="line">		t = t.Next</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">10</span>&#125;</span><br><span class="line">	head := CreateListNode(nums)</span><br><span class="line">	<span class="comment">// 遍历链表</span></span><br><span class="line">	Traverse(head)</span><br><span class="line">	<span class="comment">// 反转链表</span></span><br><span class="line">	solution := Solution(head)</span><br><span class="line">	<span class="comment">// 遍历反转后的链表</span></span><br><span class="line">	Traverse(solution)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-LRU缓存（Go）146-中等"><a href="#2-LRU缓存（Go）146-中等" class="headerlink" title="2. LRU缓存（Go）146-中等"></a><font color=DarkOrange>2. LRU缓存（Go）146-中等</font></h4><p><strong>题目：</strong></p>
<p>请你设计并实现一个满足 <code>LRU (最近最少使用)</code> 缓存 约束的数据结构<br>实现 <code>LRUCache</code> 类：</p>
<ul>
<li><code>LRUCache(int capacity)</code> 以 正整数 作为容量 <code>capacity</code> 初始化 <code>LRU</code> 缓存</li>
<li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 -1 </li>
<li><code>void put(int key, int value)</code> 如果关键字 <code>key</code> 已经存在，则变更其数据值 <code>value</code> ；如果不存在，则向缓存中插入该组 <code>key-value</code> 。如果插入操作导致关键字数量超过 <code>capacity</code> ，则应该 逐出 最久未使用的关键字</li>
</ul>
<p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line"><span class="punctuation">[</span><span class="string">&quot;LRUCache&quot;</span><span class="punctuation">,</span> <span class="string">&quot;put&quot;</span><span class="punctuation">,</span> <span class="string">&quot;put&quot;</span><span class="punctuation">,</span> <span class="string">&quot;get&quot;</span><span class="punctuation">,</span> <span class="string">&quot;put&quot;</span><span class="punctuation">,</span> <span class="string">&quot;get&quot;</span><span class="punctuation">,</span> <span class="string">&quot;put&quot;</span><span class="punctuation">,</span> <span class="string">&quot;get&quot;</span><span class="punctuation">,</span> <span class="string">&quot;get&quot;</span><span class="punctuation">,</span> <span class="string">&quot;get&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">输出</span><br><span class="line"><span class="punctuation">[</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="number">-1</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="number">-1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">LRUCache lRUCache = new LRUCache(<span class="number">2</span>);</span><br><span class="line">lRUCache.put(<span class="number">1</span><span class="punctuation">,</span> <span class="number">1</span>); <span class="comment">// 缓存是 &#123;1=1&#125;</span></span><br><span class="line">lRUCache.put(<span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span>); <span class="comment">// 缓存是 &#123;1=1, 2=2&#125;</span></span><br><span class="line">lRUCache.get(<span class="number">1</span>);    <span class="comment">// 返回 1</span></span><br><span class="line">lRUCache.put(<span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span>); <span class="comment">// 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span></span><br><span class="line">lRUCache.get(<span class="number">2</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.put(<span class="number">4</span><span class="punctuation">,</span> <span class="number">4</span>); <span class="comment">// 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span></span><br><span class="line">lRUCache.get(<span class="number">1</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.get(<span class="number">3</span>);    <span class="comment">// 返回 3</span></span><br><span class="line">lRUCache.get(<span class="number">4</span>);    <span class="comment">// 返回 4</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= capacity &lt;= 3000</code></li>
<li><code>0 &lt;= key &lt;= 10000</code></li>
<li><code>0 &lt;= value &lt;= 105</code></li>
<li>最多调用 <code>2 * 105</code> 次 <code>get</code> 和 <code>put</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：哈希表 + 双向链表</p>
<p>LRU 缓存机制可以通过哈希表辅以双向链表实现，我们用一个哈希表和一个双向链表维护所有在缓存中的键值对</p>
<ul>
<li>双向链表按照被使用的顺序存储了这些键值对，靠近头部的键值对是最近使用的，而靠近尾部的键值对是最久未使用的</li>
<li>哈希表即为普通的哈希映射（HashMap），通过缓存数据的键映射到其在双向链表中的位置</li>
</ul>
<p>这样以来，我们首先使用哈希表进行定位，找出缓存项在双向链表中的位置，随后将其移动到双向链表的头部，即可在 O(1) 的时间内完成 <code>get</code> 或者 <code>put</code> 操作。具体的方法如下：</p>
<ul>
<li><p>对于 <code>get</code> 操作，首先判断 <code>key</code> 是否存在：</p>
<ul>
<li>如果 <code>key</code> 不存在，则返回 −1</li>
<li>如果 <code>key</code> 存在，则 <code>key</code> 对应的节点是最近被使用的节点。通过哈希表定位到该节点在双向链表中的位置，并将其移动到双向链表的头部，最后返回该节点的值</li>
</ul>
</li>
<li><p>对于 <code>put</code> 操作，首先判断 <code>key</code> 是否存在：</p>
<ul>
<li>如果 <code>key</code> 不存在，使用 <code>key</code> 和 <code>value</code> 创建一个新的节点，在双向链表的头部添加该节点，并将 <code>key</code> 和该节点添加进哈希表中。然后判断双向链表的节点数是否超出容量，如果超出容量，则删除双向链表的尾部节点，并删除哈希表中对应的项</li>
<li>如果 <code>key</code> 存在，则与 <code>get</code> 操作类似，先通过哈希表定位，再将对应的节点的值更新为 <code>value</code>，并将该节点移到双向链表的头部</li>
</ul>
</li>
</ul>
<p>上述各项操作中，访问哈希表的时间复杂度为 O(1)，在双向链表的头部添加节点、在双向链表的尾部删除节点的复杂度也为 O(1)。而将一个节点移到双向链表的头部，可以分成「删除该节点」和「在双向链表的头部添加节点」两步操作，都可以在 O(1) 时间内完成</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：对于 <code>put</code> 和 <code>get</code> 都是 O(1)</li>
<li>空间复杂度：O(capacity)，因为哈希表和双向链表最多存储 capacity+1 个元素</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> LRUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">    size <span class="type">int</span></span><br><span class="line">    capacity <span class="type">int</span></span><br><span class="line">    cache <span class="keyword">map</span>[<span class="type">int</span>]*DLinkedNode</span><br><span class="line">    head, tail *DLinkedNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DLinkedNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    key, value <span class="type">int</span></span><br><span class="line">    prev, next *DLinkedNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDLinkedNode</span><span class="params">(key, value <span class="type">int</span>)</span></span> *DLinkedNode &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;DLinkedNode&#123;</span><br><span class="line">        key: key,</span><br><span class="line">        value: value,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(capacity <span class="type">int</span>)</span></span> LRUCache &#123;</span><br><span class="line">    lruCache := LRUCache&#123;</span><br><span class="line">        cache: <span class="keyword">map</span>[<span class="type">int</span>]*DLinkedNode&#123;&#125;,</span><br><span class="line">        head: initDLinkedNode(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">        tail: initDLinkedNode(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">        capacity: capacity,</span><br><span class="line">    &#125;</span><br><span class="line">    lruCache.head.next = lruCache.tail</span><br><span class="line">    lruCache.tail.prev = lruCache.head</span><br><span class="line">    <span class="keyword">return</span> lruCache</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span></span> Get(key <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    _, ok := this.cache[key]</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    node := this.cache[key]</span><br><span class="line">    this.moveToHead(node)</span><br><span class="line">    <span class="keyword">return</span> node.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span></span> Put(key <span class="type">int</span>, value <span class="type">int</span>)  &#123;</span><br><span class="line">    _, ok := this.cache[key]</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        node := initDLinkedNode(key, value)</span><br><span class="line">        this.cache[key] = node</span><br><span class="line">        this.addToHead(node)</span><br><span class="line">        this.size++</span><br><span class="line">        <span class="keyword">if</span> this.size &gt; this.capacity &#123;</span><br><span class="line">            removeed :=this.removeTail()</span><br><span class="line">            <span class="built_in">delete</span>(this.cache, removeed.key)</span><br><span class="line">            this.size--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node := this.cache[key]</span><br><span class="line">        node.value = value</span><br><span class="line">        this.moveToHead(node)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span></span> addToHead(node *DLinkedNode) &#123;</span><br><span class="line">    node.prev = this.head</span><br><span class="line">    node.next = this.head.next</span><br><span class="line">    this.head.next.prev = node</span><br><span class="line">    this.head.next = node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span></span> removeNode(node *DLinkedNode) &#123;</span><br><span class="line">    node.prev.next = node.next</span><br><span class="line">    node.next.prev = node.prev</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span></span> moveToHead(node *DLinkedNode) &#123;</span><br><span class="line">    this.removeNode(node)</span><br><span class="line">    this.addToHead(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *LRUCache)</span></span> removeTail() *DLinkedNode &#123;</span><br><span class="line">    node := this.tail.prev</span><br><span class="line">    this.removeNode(node)</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-CodeTop补充题：手撕快速排序（Go）-排序数组-912-中等"><a href="#3-CodeTop补充题：手撕快速排序（Go）-排序数组-912-中等" class="headerlink" title="3. CodeTop补充题：手撕快速排序（Go） | 排序数组 912-中等"></a><font color=DarkOrange>3. CodeTop补充题：手撕快速排序（Go） | 排序数组 912-中等</font></h4><blockquote>
<p><font color=red><strong>10大排序算法： 1. 冒泡排序，2. 选择排序，3. 插入排序，4. 归并排序，5. 快速排序，6. 堆排序，8. 计数排序，9. 桶排序，10. 基数排序</strong></font></p>
</blockquote>
<p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 5 * 10^4</code></li>
<li><code>-5 * 10^4 &lt;= nums[i] &lt;= 5 * 10^4</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：快速排序<br>思路和算法</p>
<p>快速排序的主要思想是通过划分将待排序的序列分成前后两部分，其中前一部分的数据都比后一部分的数据要小，然后再递归调用函数对两部分的序列分别进行快速排序，以此使整个序列达到有序</p>
<p>我们定义函数 <code>randomized_quicksort(nums, l, r)</code> 为对 <code>nums</code> 数组里 [l,r]的部分进行排序，每次先调用 <code>randomized_partition</code> 函数对 <code>nums</code> 数组里 [l,r]的部分进行划分，并返回分界值的下标 <code>pos</code>，然后按上述将的递归调用 <code>randomized_quicksort(nums, l, pos - 1)</code> 和 <code>randomized_quicksort(nums, pos + 1, r)</code> 即可</p>
<p>那么核心就是划分函数的实现了，划分函数一开始需要确定一个分界值（我们称之为主元 <code>pivot</code>)，然后再进行划分。而主元的选取有很多种方式，这里我们采用随机的方式，对当前划分区间 [l,r] 里的数等概率随机一个作为我们的主元，再将主元放到区间末尾，进行划分</p>
<p>整个划分函数 <code>partition</code> 主要涉及两个指针 i 和 j，一开始 <code>i = l - 1</code>，<code>j = l</code>。我们需要实时维护两个指针使得任意时候，对于任意数组下标 k，我们有如下条件成立：</p>
<ol>
<li>l≤k≤i 时，nums[k]≤pivot</li>
<li>i+1≤k≤j−1 时，nums[k]&gt;pivot</li>
<li>k&#x3D;&#x3D;r 时，nums[k]&#x3D;pivot</li>
</ol>
<p>我们每次移动指针 j ，如果 nums[j]&gt;pivot，我们只需要继续移动指针 j ，即能使上述三个条件成立，否则我们需要将指针 i 加一，然后交换 nums[i] 和 nums[j]，再移动指针 j 才能使得三个条件成立</p>
<p>当 j 移动到 r−1 时结束循环，此时我们可以由上述三个条件知道 [l,i] 的数都小于等于主元 <code>pivot</code>，[i+1,r−1] 的数都大于主元 <code>pivot</code>，那么我们只要交换 nums[i+1] 和 nums[r] ，即能使得 [l,i+1] 区间的数都小于 [i+2,r] 区间的数，完成一次划分，且分界值下标为 i+1，返回即可</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：基于随机选取主元的快速排序时间复杂度为期望 O(nlogn)，其中 n 为数组的长度</li>
<li>空间复杂度：O(h)，其中 h 为快速排序递归调用的层数。我们需要额外的 O(h) 的递归调用的栈空间，由于划分的结果不同导致了快速排序递归调用的层数也会不同，最坏情况下需 O(n) 的空间，最优情况下每次都平衡，此时整个递归树高度为 logn，空间复杂度为 O(logn)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// partition 定位 pivot</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(nums []<span class="type">int</span>, left, right <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="comment">// 以当前数据序列最后一个元素作为初始 pivot</span></span><br><span class="line">	pivot := nums[right]</span><br><span class="line">	<span class="comment">// 初始化 i、j 下标</span></span><br><span class="line">	i := left</span><br><span class="line">	<span class="comment">// 后移 j 下标的遍历过程</span></span><br><span class="line">	<span class="keyword">for</span> j := left; j &lt; right; j++ &#123;</span><br><span class="line">		<span class="comment">// 将比 pivot 小的数丢到 [left...i-1] 中，剩下的 [i...j] 区间都是比 pivot 大的</span></span><br><span class="line">		<span class="keyword">if</span> nums[j] &lt; pivot &#123;</span><br><span class="line">			<span class="comment">// 互换 i、j 下标对应数据</span></span><br><span class="line">			nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">			<span class="comment">// 将 i 下标后移一位</span></span><br><span class="line">			i++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 最后将 pivot 与 i 下标对应数据值互换</span></span><br><span class="line">	<span class="comment">// 这样一来，pivot 就位于当前数据序列中间，i 也就是 pivot 值对应的下标</span></span><br><span class="line">	nums[i], nums[right] = pivot, nums[i]</span><br><span class="line">	<span class="comment">// 返回 i 作为 pivot 分区位置</span></span><br><span class="line">	<span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuickSort 快速排序入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(nums []<span class="type">int</span>, left, right <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 递归终止条件</span></span><br><span class="line">	<span class="keyword">if</span> left &gt;= right &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 获取分区位置</span></span><br><span class="line">	pivot := partition(nums, left, right)</span><br><span class="line">	<span class="comment">// 递归分区（排序是在定位 pivot 的过程中实现的）</span></span><br><span class="line">	QuickSort(nums, left, pivot<span class="number">-1</span>)</span><br><span class="line">	QuickSort(nums, pivot+<span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">56</span>&#125;</span><br><span class="line">	QuickSort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">	fmt.Println(nums)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-合并两个有序链表（Go）-21-简单"><a href="#4-合并两个有序链表（Go）-21-简单" class="headerlink" title="4. 合并两个有序链表（Go） 21-简单"></a><font color=DarkOrange>4. 合并两个有序链表（Go） 21-简单</font></h4><p><strong>题目：</strong></p>
<p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：l1 = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> l2 = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span></span><br><span class="line">输入：l1 = <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> l2 = <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">输入：l1 = <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> l2 = <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>两个链表的节点数目范围是 <code>[0, 50]</code></li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：递归<br>思路</p>
<p>我们可以如下递归地定义两个链表里的 merge 操作（忽略边界情况，比如空链表等）：</p>
<p>list1[0] + merge(list1[1:], list2) list1[0] &lt; list2[0]</p>
<p>list2[0] + merge(list1, list2[1:]) otherwise </p>
<p>也就是说，两个链表头部值较小的一个节点与剩下元素的 <code>merge</code> 操作结果合并</p>
<p>算法：</p>
<p>我们直接将以上递归过程建模，同时需要考虑边界情况</p>
<p>如果 <code>l1</code> 或者 <code>l2</code> 一开始就是空链表 ，那么没有任何操作需要合并，所以我们只需要返回非空链表。否则，我们要判断 <code>l1</code> 和 <code>l2</code> 哪一个链表的头节点的值更小，然后递归地决定下一个添加到结果里的节点。如果两个链表有一个为空，递归结束</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(n+m)，其中 n 和 m 分别为两个链表的长度。因为每次调用递归都会去掉 <code>l1</code> 或者 <code>l2</code> 的头节点（直到至少有一个链表为空），函数 <code>mergeTwoList</code> 至多只会递归调用每个节点一次。因此，时间复杂度取决于合并后的链表长度，即 O(n+m)</li>
<li>空间复杂度：O(n+m)，其中 n 和 m 分别为两个链表的长度。递归调用 <code>mergeTwoLists</code> 函数时需要消耗栈空间，栈空间的大小取决于递归调用的深度。结束递归调用时 mergeTwoLists 函数最多调用 n+m 次，因此空间复杂度为 O(n+m)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> ListNode struct &#123;</span><br><span class="line">	Value <span class="built_in">int</span></span><br><span class="line">	Next  *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// CreateListNode 使用<span class="built_in">slice</span>创建单链表</span><br><span class="line">func CreateListNode(nums []<span class="built_in">int</span>) *ListNode &#123;</span><br><span class="line">	var head ListNode</span><br><span class="line">	var pre ListNode</span><br><span class="line">	<span class="keyword">for</span> _, num := <span class="built_in">range</span> nums &#123;</span><br><span class="line">		node := ListNode&#123;Value: num, Next: nil&#125;</span><br><span class="line">		<span class="keyword">if</span> head.Next == nil &#123;</span><br><span class="line">			head.Next = &amp;node</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> pre.Next == nil &#123;</span><br><span class="line">			pre.Next = &amp;node</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			pre.Next.Next = &amp;node</span><br><span class="line">			pre = *pre.Next</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Traverse 遍历链表</span><br><span class="line">func Traverse(t *ListNode) &#123;</span><br><span class="line">	<span class="keyword">if</span> t == nil &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;空链表&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> t != nil &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot; %d&quot;</span>, t.Value)</span><br><span class="line">		t = t.Next</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// MergeTwoListNode 合并<span class="number">2</span>个链表</span><br><span class="line">func MergeTwoListNode(List1, List2 *ListNode) *ListNode &#123;</span><br><span class="line">	// 如果有一条链表为nil，直接返回另一条链表</span><br><span class="line">	<span class="keyword">if</span> List1 == nil &#123;</span><br><span class="line">		<span class="keyword">return</span> List2</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> List2 == nil &#123;</span><br><span class="line">		<span class="keyword">return</span> List1</span><br><span class="line">	&#125;</span><br><span class="line">	// 定义一个节点</span><br><span class="line">	var result *ListNode</span><br><span class="line">	<span class="keyword">if</span> List1.Value &gt;= List2.Value &#123;</span><br><span class="line">		result = List2</span><br><span class="line">		result.Next = MergeTwoListNode(List1, List2.Next)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		result = List1</span><br><span class="line">		result.Next = MergeTwoListNode(List1.Next, List2)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	nums1 := []<span class="built_in">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">	nums2 := []<span class="built_in">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>&#125;</span><br><span class="line">	lis1 := CreateListNode(nums1)</span><br><span class="line">	lis2 := CreateListNode(nums2)</span><br><span class="line">	mergeTwoListNode := MergeTwoListNode(lis1, lis2)</span><br><span class="line">	Traverse(mergeTwoListNode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-最大子数组和（Go）53-简单"><a href="#5-最大子数组和（Go）53-简单" class="headerlink" title="5. 最大子数组和（Go）53-简单"></a><font color=DarkOrange>5. 最大子数组和（Go）53-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和</p>
<p><strong>子数组</strong> 是数组中的一个连续部分</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">-2</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">-3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">-5</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：连续子数组 <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> 的和最大，为 <span class="number">6</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：动态规划（核心：若前一个元素大于0，则将其加到当前元素上）<br>思路和算法</p>
<p>假设 nums 数组的长度是 n，下标从 0 到 n−1</p>
<p>我们用 f(i) 代表以第 i 个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：<br>0≤i的max≤n−1的{f(i)}</p>
<p>因此我们只需要求出每个位置的 f(i)，然后返回 f 数组中的最大值即可。那么我们如何求 f(i) 呢？我们可以考虑 nums[i] 单独成为一段还是加入 f(i−1) 对应的那一段，这取决于 nums[i] 和 f(i-1) +nums[i] 的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程：<br>f(i)&#x3D;max{f(i−1)+nums[i],nums[i]}</p>
<p>不难给出一个时间复杂度 O(n)、空间复杂度 O(n) 的实现，即用一个 ff 数组来保存 f(i) 的值，用一个循环求出所有 f(i)。考虑到 f(i) 只和 f(i−1) 相关，于是我们可以只用一个变量 pre 来维护对于当前 f(i) 的 f(i−1) 的值是多少，从而让空间复杂度降低到 O(1)，这有点类似「滚动数组」的思想</p>
<div align="center"><img src="https://i.bmp.ovh/imgs/2022/06/21/2f768ff06b617809.png" style="zoom:50%;" /></div>

<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n 为 nums 数组的长度。我们只需要遍历一遍数组即可求得答案</li>
<li>空间复杂度：O(1)。我们只需要常数空间存放若干变量</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    max := nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] + nums[i - <span class="number">1</span>] &gt; nums[i] &#123;</span><br><span class="line">            nums[i] += nums[i - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; max &#123;</span><br><span class="line">            max = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-字符串相加（Go）415-简单"><a href="#6-字符串相加（Go）415-简单" class="headerlink" title="6. 字符串相加（Go）415-简单"></a><font color=DarkOrange>6. 字符串相加（Go）415-简单</font></h4><p><strong>题目：</strong></p>
<p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和并同样以字符串形式返回</p>
<p>你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：num1 = <span class="string">&quot;11&quot;</span><span class="punctuation">,</span> num2 = <span class="string">&quot;123&quot;</span></span><br><span class="line">输出：<span class="string">&quot;134&quot;</span></span><br><span class="line">输入：num1 = <span class="string">&quot;456&quot;</span><span class="punctuation">,</span> num2 = <span class="string">&quot;77&quot;</span></span><br><span class="line">输出：<span class="string">&quot;533&quot;</span></span><br><span class="line">输入：num1 = <span class="string">&quot;0&quot;</span><span class="punctuation">,</span> num2 = <span class="string">&quot;0&quot;</span></span><br><span class="line">输出：<span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= num1.length, num2.length &lt;= 10的4次方</code></li>
<li><code>num1</code> 和<code>num2</code> 都只包含数字 <code>0-9</code></li>
<li><code>num1</code> 和<code>num2</code> 都不包含任何前导零</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：模拟<br>思路与算法</p>
<p>本题我们只需要对两个大整数模拟「竖式加法」的过程。竖式加法就是我们平常学习生活中常用的对两个整数相加的方法，回想一下我们在纸上对两个整数相加的操作，是不是如下图将相同数位对齐，从低到高逐位相加，如果当前位和超过 10，则向高位进一位？因此我们只要将这个过程用代码写出来即可</p>
<p>具体实现也不复杂，我们定义两个指针 i 和 j 分别指向 num1  和 num 2 的末尾，即最低位，同时定义一个变量 add 维护当前是否有进位，然后从末尾到开头逐位相加即可。你可能会想两个数字位数不同怎么处理，这里我们统一在指针当前下标处于负数的时候返回 0，等价于对位数较短的数字进行了补零操作，这样就可以除去两个数字位数不同情况的处理，具体可以看下面的代码</p>
<div align="center"><img src="https://i.bmp.ovh/imgs/2022/06/21/83dd1b48338dee5d.png" style="zoom:50%;" /></div>

<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(max(len1,len2))，其中 len1&#x3D;num1.length，len2&#x3D;num2.length。竖式加法的次数取决于较大数的位数</li>
<li>空间复杂度：O(1)。除答案外我们只需要常数空间存放若干变量。在 Java 解法中使用到了 <code>StringBuffer</code>，故 Java 解法的空间复杂度为O(n)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addStrings</span><span class="params">(num1 <span class="type">string</span>, num2 <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    add := <span class="number">0</span></span><br><span class="line">    ans := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="built_in">len</span>(num1) - <span class="number">1</span>, <span class="built_in">len</span>(num2) - <span class="number">1</span>; i &gt;= <span class="number">0</span> ||</span><br><span class="line">    j &gt;= <span class="number">0</span> || add != <span class="number">0</span>; i, j = i - <span class="number">1</span>, j - <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> x, y <span class="type">int</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            x = <span class="type">int</span>(num1[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            y = <span class="type">int</span>(num2[j] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        result := x + y + add</span><br><span class="line">        ans = strconv.Itoa(result % <span class="number">10</span>) + ans</span><br><span class="line">        add = result / <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-二分查找（Go）704-简单"><a href="#7-二分查找（Go）704-简单" class="headerlink" title="7. 二分查找（Go）704-简单"></a><font color=DarkOrange>7. 二分查找（Go）704-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 <code>target</code>  ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 -1</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入<span class="punctuation">:</span> nums = <span class="punctuation">[</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">,</span> target = <span class="number">9</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">解释<span class="punctuation">:</span> <span class="number">9</span> 出现在 nums 中并且下标为 <span class="number">4</span></span><br><span class="line">输入<span class="punctuation">:</span> nums = <span class="punctuation">[</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">,</span> target = <span class="number">2</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="number">-1</span></span><br><span class="line">解释<span class="punctuation">:</span> <span class="number">2</span> 不存在 nums 中因此返回 <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ol>
<li>你可以假设 <code>nums</code> 中的所有元素是不重复的</li>
<li><code>n</code> 将在 <code>[1, 10000]</code>之间</li>
<li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间</li>
</ol>
<p><strong>思路：</strong></p>
<p>方法一：二分查找<br>在升序数组 nums 中寻找目标值 target，对于特定下标 i，比较 nums[i] 和 target 的大小：</p>
<ul>
<li><p>如果 nums[i] &#x3D; target，则下标 i 即为要寻找的下标</p>
</li>
<li><p>如果 nums[i] &gt; target，则 target 只可能在下标 i 的左侧</p>
</li>
<li><p>如果 nums[i] &lt; target，则 target 只可能在下标 i 的右侧</p>
</li>
</ul>
<p>基于上述事实，可以在有序数组中使用二分查找寻找目标值<br>二分查找的做法是，定义查找的范围 [left,right]，初始查找范围是整个数组。每次取查找范围的中点 mid，比较 nums[mid] 和 target 的大小，如果相等则 mid 即为要寻找的下标，如果不相等则根据 nums[mid] 和 target 的大小关系将查找范围缩小一半</p>
<p>由于每次查找都会将查找范围缩小一半，因此二分查找的时间复杂度是 O(logn)，其中 n 是数组的长度</p>
<p>二分查找的条件是查找范围不为空，即 left &lt;&#x3D; right。如果 target 在数组中，二分查找可以保证找到 target，返回 target 在数组中的下标。如果 target 不在数组中，则当 left &gt; right 时结束查找，返回 -1</p>
<div align="center"><img src="https://i.bmp.ovh/imgs/2022/06/21/736001c2f7e7a333.png" style="zoom:50%;" /></div>

<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(logn)，其中 n 是数组的长度</li>
<li>空间复杂度：O(1)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        mid := (right - left) / <span class="number">2</span> + left</span><br><span class="line">        num := nums[mid]</span><br><span class="line">        <span class="keyword">if</span> num == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &gt; target &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-无重复字符串的最长子串（Go）3-中等"><a href="#8-无重复字符串的最长子串（Go）3-中等" class="headerlink" title="8. 无重复字符串的最长子串（Go）3-中等"></a><font color=DarkOrange>8. 无重复字符串的最长子串（Go）3-中等</font></h4><p><strong>题目：</strong></p>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入<span class="punctuation">:</span> s = <span class="string">&quot;abcabcbb&quot;</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="number">3</span> </span><br><span class="line">解释<span class="punctuation">:</span> 因为无重复字符的最长子串是 <span class="string">&quot;abc&quot;</span>，所以其长度为 <span class="number">3</span></span><br><span class="line">输入<span class="punctuation">:</span> s = <span class="string">&quot;bbbbb&quot;</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">解释<span class="punctuation">:</span> 因为无重复字符的最长子串是 <span class="string">&quot;b&quot;</span>，所以其长度为 <span class="number">1</span></span><br><span class="line">输入<span class="punctuation">:</span> s = <span class="string">&quot;pwwkew&quot;</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">解释<span class="punctuation">:</span> 因为无重复字符的最长子串是 <span class="string">&quot;wke&quot;</span>，所以其长度为 <span class="number">3</span></span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">&quot;pwke&quot;</span> 是一个子序列，不是子串</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 10^4</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：滑动窗口</p>
<p>思路和算法</p>
<p>我们先用一个例子考虑如何在较优的时间复杂度内通过本题</p>
<p>我们不妨以示例一中的字符串 abcabcbb 为例，找出从每一个字符开始的，不包含重复字符的最长子串，那么其中最长的那个字符串即为答案。对于示例一中的字符串，我们列举出这些结果，其中括号中表示选中的字符以及最长的字符串：</p>
<ul>
<li><p>以 (a)bcabcbb 开始的最长字符串为 (abc)abcbb</p>
</li>
<li><p>以 a(b)cabcbb 开始的最长字符串为 a(bca)bcbb</p>
</li>
<li><p>以 ab(c)abcbb 开始的最长字符串为 ab(cab)cbb</p>
</li>
<li><p>以 abc(a)bcbb 开始的最长字符串为 abc(abc)bb</p>
</li>
<li><p>以 abca(b)cbb 开始的最长字符串为 abca(bc)bb</p>
</li>
<li><p>以 abcab(c)bb 开始的最长字符串为 abcab(cb)b</p>
</li>
<li><p>以 abcabc(b)b 开始的最长字符串为 abcabc(b)b</p>
</li>
<li><p>以 abcabcb(b) 开始的最长字符串为 abcabcb(b)</p>
</li>
</ul>
<p>发现了什么？如果我们依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的！这里的原因在于，假设我们选择字符串中的第 k 个字符作为起始位置，并且得到了不包含重复字符的最长子串的结束位置为 tk 。那么当我们选择第 k+1 个字符作为起始位置时，首先从 k+1 到 tk  的字符显然是不重复的，并且由于少了原本的第 k 个字符，我们可以尝试继续增大 tk，直到右侧出现了重复字符为止</p>
<p>这样一来，我们就可以使用「滑动窗口」来解决这个问题了：</p>
<ul>
<li>我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着上文中「枚举子串的起始位置」，而右指针即为上文中的 rk</li>
<li>在每一步的操作中，我们会将左指针向右移动一格，表示 我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度</li>
<li>在枚举结束后，我们找到的最长的子串的长度即为答案</li>
</ul>
<p>判断重复字符：</p>
<p>在上面的流程中，我们还需要使用一种数据结构来判断 是否有重复的字符，常用的数据结构为哈希集合（即 <code>C++</code>中的 <code>std::unordered_set</code>，<code>Java</code> 中的 <code>HashSet</code>，<code>Python</code> 中的 <code>set</code> , <code>JavaScript</code> 中的 <code>Set</code>）。在左指针向右移动的时候，我们从哈希集合中移除一个字符，在右指针向右移动的时候，我们往哈希集合中添加一个字符</p>
<p>至此，我们就完美解决了本题</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(N)，其中 N 是字符串的长度。左指针和右指针分别会遍历整个字符串一次</li>
<li>空间复杂度：O(∣Σ∣)，其中Σ 表示字符集（即字符串中可以出现的字符），∣Σ∣ 表示字符集的大小。在本题中没有明确说明字符集，因此可以默认为所有 ASCII 码在 [0,128) 内的字符，即 ∣Σ∣&#x3D;128。我们需要用到哈希集合来存储出现过的字符，而字符最多有 ∣Σ∣ 个，因此空间复杂度为 O(∣Σ∣)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 哈希集合，记录每个字符串是否出现过</span></span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="comment">// 右指针，初始值为-1，相当于我们在字符串的左边界的左侧，还没有开始移动</span></span><br><span class="line">    rk, ans := <span class="number">-1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// 左指针向右移动一格，移除一个字符串</span></span><br><span class="line">            <span class="built_in">delete</span>(m, s[i - <span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> rk + <span class="number">1</span> &lt; n &amp;&amp; m[s[rk + <span class="number">1</span>]] == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">// 不断的移动右指针</span></span><br><span class="line">            m[s[rk + <span class="number">1</span>]]++</span><br><span class="line">            rk++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第i到rk个字符是一个极长的无重复字符子串</span></span><br><span class="line">        ans = max(ans, rk - i + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-数组中的第K个最大元素（Go）215-中等"><a href="#9-数组中的第K个最大元素（Go）215-中等" class="headerlink" title="9. 数组中的第K个最大元素（Go）215-中等"></a><font color=DarkOrange>9. 数组中的第K个最大元素（Go）215-中等</font></h4><p><strong>题目：</strong></p>
<p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>k</code> 个最大的元素</p>
<p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span> 和 k = <span class="number">2</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">输入<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">]</span> 和 k = <span class="number">4</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= nums.length &lt;= 10的4次方</code></li>
<li><code>-10的4次方 &lt;= nums[i] &lt;= 10的4次方</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：基于快速排序的选择方法</p>
<p>思路和算法</p>
<p>我们可以用快速排序来解决这个问题，先对原数组排序，再返回倒数第 k 个位置，这样平均时间复杂度是 O(nlogn)，但其实我们可以做的更快</p>
<p>首先我们来回顾一下快速排序，这是一个典型的分治算法。我们对数组 a[l⋯r] 做快速排序的过程是（参考《算法导论》）：</p>
<ul>
<li>分解： 将数组 a[l⋯r] 「划分」成两个子数组 a[l⋯q−1]、a[q+1⋯r]，使得 a[l⋯q−1] 中的每个元素小于等于 a[q]，且 a[q] 小于等于 a[q+1⋯r] 中的每个元素。其中，计算下标 q 也是「划分」过程的一部分</li>
<li>解决： 通过递归调用快速排序，对子数组 a[l⋯q−1] 和 a[q+1⋯r] 进行排序</li>
<li>合并： 因为子数组都是原址排序的，所以不需要进行合并操作，a[l⋯r] 已经有序</li>
<li>上文中提到的 「划分」 过程是：从子数组 a[l⋯r] 中选择任意一个元素 x 作为主元，调整子数组的元素使得左边的元素都小于等于它，右边的元素都大于等于它， x 的最终位置就是 q</li>
</ul>
<p>由此可以发现每次经过「划分」操作后，我们一定可以确定一个元素的最终位置，即 x 的最终位置为 q，并且保证 a[l⋯q−1] 中的每个元素小于等于 a[q]，且 a[q] 小于等于 a[q+1⋯r] 中的每个元素。所以只要某次划分的 q 为倒数第 k 个下标的时候，我们就已经找到了答案。 我们只关心这一点，至于 a[l⋯q−1] 和 a[q+1⋯r] 是否是有序的，我们不关心</p>
<p>因此我们可以改进快速排序算法来解决这个问题：在分解的过程当中，我们会对子数组进行划分，如果划分得到的 q 正好就是我们需要的下标，就直接返回 a[q]；否则，如果 q 比目标下标小，就递归右子区间，否则递归左子区间。这样就可以把原来递归两个区间变成只递归一个区间，提高了时间效率。这就是「快速选择」算法</p>
<p>我们知道快速排序的性能和「划分」出的子数组的长度密切相关。直观地理解如果每次规模为 n 的问题我们都划分成 1 和 n−1，每次递归的时候又向 n−1 的集合中递归，这种情况是最坏的，时间代价是 O n的2次方。我们可以引入随机化来加速这个过程，它的时间代价的期望是 O(n)，证明过程可以参考「《算法导论》9.2：期望为线性的选择算法」</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(n)，如上文所述，证明过程可以参考「《算法导论》9.2：期望为线性的选择算法」</li>
<li>空间复杂度：O(logn)，递归使用栈空间的空间代价的期望为 O(logn)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findKthLargest</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="keyword">return</span> quickSelect(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, <span class="built_in">len</span>(nums) - k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSelect</span><span class="params">(a []<span class="type">int</span>, l, r, index <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    q := randomPartition(a, l, r)</span><br><span class="line">    <span class="keyword">if</span> q == index &#123;</span><br><span class="line">        <span class="keyword">return</span> a[q]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> q &lt; index &#123;</span><br><span class="line">        <span class="keyword">return</span> quickSelect(a, q + <span class="number">1</span>, r, index)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSelect(a, l, q - <span class="number">1</span>, index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomPartition</span><span class="params">(a []<span class="type">int</span>, l, r <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    i := rand.Int() % (r - l + <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">    a[i], a[r] = a[r], a[i]</span><br><span class="line">    <span class="keyword">return</span> partition(a, l, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(a []<span class="type">int</span>, l, r <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    x := a[r]</span><br><span class="line">    i := l - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; r; j ++ &#123;</span><br><span class="line">        <span class="keyword">if</span> a[j] &lt;= x &#123;</span><br><span class="line">            i++</span><br><span class="line">            a[i], a[j] = a[j], a[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i + <span class="number">1</span>], a[r] = a[r], a[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="10-字符串转换整数-8-中等"><a href="#10-字符串转换整数-8-中等" class="headerlink" title="10. 字符串转换整数 8-中等"></a><font color=DarkOrange>10. 字符串转换整数 8-中等</font></h4><p>题目：</p>
<p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&#x2F;C++ 中的 <code>atoi</code> 函数</p>
<p>函数 <code>myAtoi(string s)</code> 的算法如下：</p>
<ol>
<li>读入字符串并丢弃无用的前导空格</li>
<li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正</li>
<li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略<br>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）</li>
<li>如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整</li>
<li>应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 </li>
<li>返回整数作为最终结果</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>本题中的空白字符只包括空格字符 <code>&#39; &#39;</code> </li>
<li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;42&quot;</span></span><br><span class="line">输出：<span class="number">42</span></span><br><span class="line">解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符</span><br><span class="line">第 <span class="number">1</span> 步：<span class="string">&quot;42&quot;</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 <span class="number">2</span> 步：<span class="string">&quot;42&quot;</span>（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         ^</span><br><span class="line">第 <span class="number">3</span> 步：<span class="string">&quot;42&quot;</span>（读入 <span class="string">&quot;42&quot;</span>）</span><br><span class="line">           ^</span><br><span class="line">解析得到整数 <span class="number">42</span></span><br><span class="line">由于 <span class="string">&quot;42&quot;</span> 在范围 <span class="punctuation">[</span><span class="number">-231</span><span class="punctuation">,</span> <span class="number">231</span> - <span class="number">1</span><span class="punctuation">]</span> 内，最终结果为 <span class="number">42</span></span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">&quot;   -42&quot;</span></span><br><span class="line">输出：<span class="number">-42</span></span><br><span class="line">解释：</span><br><span class="line">第 <span class="number">1</span> 步：<span class="string">&quot;   -42&quot;</span>（读入前导空格，但忽视掉）</span><br><span class="line">            ^</span><br><span class="line">第 <span class="number">2</span> 步：<span class="string">&quot;   -42&quot;</span>（读入 &#x27;-&#x27; 字符，所以结果应该是负数）</span><br><span class="line">             ^</span><br><span class="line">第 <span class="number">3</span> 步：<span class="string">&quot;   -42&quot;</span>（读入 <span class="string">&quot;42&quot;</span>）</span><br><span class="line">               ^</span><br><span class="line">解析得到整数 <span class="number">-42</span></span><br><span class="line">由于 <span class="string">&quot;-42&quot;</span> 在范围 <span class="punctuation">[</span><span class="number">-231</span><span class="punctuation">,</span> <span class="number">231</span> - <span class="number">1</span><span class="punctuation">]</span> 内，最终结果为 <span class="number">-42</span></span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">&quot;4193 with words&quot;</span></span><br><span class="line">输出：<span class="number">4193</span></span><br><span class="line">解释：</span><br><span class="line">第 <span class="number">1</span> 步：<span class="string">&quot;4193 with words&quot;</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 <span class="number">2</span> 步：<span class="string">&quot;4193 with words&quot;</span>（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         ^</span><br><span class="line">第 <span class="number">3</span> 步：<span class="string">&quot;4193 with words&quot;</span>（读入 <span class="string">&quot;4193&quot;</span>；由于下一个字符不是一个数字，所以读入停止）</span><br><span class="line">             ^</span><br><span class="line">解析得到整数 <span class="number">4193</span></span><br><span class="line">由于 <span class="string">&quot;4193&quot;</span> 在范围 <span class="punctuation">[</span><span class="number">-231</span><span class="punctuation">,</span> <span class="number">231</span> - <span class="number">1</span><span class="punctuation">]</span> 内，最终结果为 <span class="number">4193</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 200</code></li>
<li><code>s</code> 由英文字母（大写和小写）、数字（<code>0-9</code>）、<code>&#39; &#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code> 和 <code>&#39;.&#39;</code> 组成</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：自动机</p>
<p>思路</p>
<p>字符串处理的题目往往涉及复杂的流程以及条件情况，如果直接上手写程序，一不小心就会写出极其臃肿的代码</p>
<p>因此，为了有条理地分析每个输入字符的处理方法，我们可以使用自动机这个概念：</p>
<p>我们的程序在每个时刻有一个状态 <code>s</code>，每次从序列中输入一个字符 <code>c</code>，并根据字符 <code>c</code> 转移到下一个状态 <code>s</code>。这样，我们只需要建立一个覆盖所有情况的从 <code>s</code> 与 <code>c</code> 映射到 <code>s</code> 的表格即可解决题目中的问题</p>
<p>算法</p>
<p>本题可以建立如下图所示的自动机：</p>
<p>我们也可以用下面的表格来表示这个自动机：</p>
<p>接下来编程部分就非常简单了：我们只需要把上面这个状态转换表抄进代码即可</p>
<p>另外自动机也需要记录当前已经输入的数字，只要在 <code>s</code> 为 <code>in_number</code> 时，更新我们输入的数字，即可最终得到输入的数字</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 nn 为字符串的长度。我们只需要依次处理所有的字符，处理每个字符需要的时间为 O(1)</li>
<li>空间复杂度：O(1)。自动机的状态只需要常数空间存储</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myAtoi</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">min</span>(<span class="built_in">int</span>(*re.findall(<span class="string">&#x27;^[\+\-]?\d+&#x27;</span>, s.lstrip())), <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>), -<span class="number">2</span>**<span class="number">31</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INT_MAX = <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span></span><br><span class="line">INT_MIN = -<span class="number">2</span> ** <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Automaton</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.state = <span class="string">&#x27;start&#x27;</span></span><br><span class="line">        self.sign = <span class="number">1</span></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line">        self.table = &#123;</span><br><span class="line">            <span class="string">&#x27;start&#x27;</span>: [<span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;signed&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;signed&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;in_number&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;end&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_col</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">if</span> c.isspace():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c.isdigit():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, c</span>):</span><br><span class="line">        self.state = self.table[self.state][self.get_col(c)]</span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&#x27;in_number&#x27;</span>:</span><br><span class="line">            self.ans = self.ans * <span class="number">10</span> + <span class="built_in">int</span>(c)</span><br><span class="line">            self.ans = <span class="built_in">min</span>(self.ans, INT_MAX) <span class="keyword">if</span> self.sign == <span class="number">1</span> <span class="keyword">else</span> <span class="built_in">min</span>(self.ans, -INT_MIN)</span><br><span class="line">        <span class="keyword">elif</span> self.state == <span class="string">&#x27;signed&#x27;</span>:</span><br><span class="line">            self.sign = <span class="number">1</span> <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myAtoi</span>(<span class="params">self, <span class="built_in">str</span>: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        automaton = Automaton()</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">            automaton.get(c)</span><br><span class="line">        <span class="keyword">return</span> automaton.sign * automaton.ans</span><br></pre></td></tr></table></figure>

<h4 id="11-回文链表（Go）234-简单"><a href="#11-回文链表（Go）234-简单" class="headerlink" title="11. 回文链表（Go）234-简单"></a><font color=DarkOrange>11. 回文链表（Go）234-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> </p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：head = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">输入：head = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点数目在范围<code>[1, 10^5]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：将值复制到数组中后用双指针法<br>思路</p>
<p>如果你还不太熟悉链表，下面有关于列表的概要讲述</p>
<p>有两种常用的列表实现，分别为数组列表和链表。如果我们想在列表中存储值，它们是如何实现的呢</p>
<ul>
<li>数组列表底层是使用数组存储值，我们可以通过索引在 O(1) 的时间访问列表任何位置的值，这是由基于内存寻址的方式</li>
<li>链表存储的是称为节点的对象，每个节点保存一个值和指向下一个节点的指针。访问某个特定索引的节点需要 O(n) 的时间，因为要通过指针获取到下一个位置的节点</li>
</ul>
<p>确定数组列表是否回文很简单，我们可以使用双指针法来比较两端的元素，并向中间移动。一个指针从起点向中间移动，另一个指针从终点向中间移动。这需要 O(n) 的时间，因为访问每个元素的时间是 O(1)，而有 n 个元素要访问</p>
<p>然而同样的方法在链表上操作并不简单，因为不论是正向访问还是反向访问都不是 O(1)。而将链表的值复制到数组列表中是 O(n)，因此最简单的方法就是将链表的值复制到数组列表中，再使用双指针法判断</p>
<p>算法</p>
<p>一共为两个步骤：</p>
<ol>
<li>复制链表值到数组列表中</li>
<li>使用双指针法判断是否为回文</li>
</ol>
<p>第一步，我们需要遍历链表将值复制到数组列表中。我们用 <code>currentNode</code> 指向当前节点。每次迭代向数组添加 <code>currentNode.val</code>，并更新 <code>currentNode = currentNode.next</code>，当 currentNode &#x3D; null&#96; 时停止循环</p>
<p>执行第二步的最佳方法取决于你使用的语言。在 Python 中，很容易构造一个列表的反向副本，也很容易比较两个列表。而在其他语言中，就没有那么简单。因此最好使用双指针法来检查是否为回文。我们在起点放置一个指针，在结尾放置一个指针，每一次迭代判断两个指针指向的元素是否相同，若不同，返回 <code>false</code>；相同则将两个指针向内移动，并继续判断，直到两个指针相遇</p>
<p>在编码的过程中，注意我们比较的是节点值的大小，而不是节点本身。正确的比较方式是：<code>node_1.val == node_2.val</code>，而 <code>node_1 == node_2</code> 是错误的</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li><p>时间复杂度：O(n)，其中 n 指的是链表的元素个数</p>
<ul>
<li>第一步： 遍历链表并将值复制到数组中，O(n)</li>
<li>第二步：双指针判断是否为回文，执行了 O(n&#x2F;2) 次的判断，即 O(n)</li>
<li>总的时间复杂度：O(2n)&#x3D;O(n)</li>
</ul>
</li>
<li><p>空间复杂度：O(n)，其中 nn 指的是链表的元素个数，我们使用了一个数组列表存放链表的元素值</p>
</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    vals := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> ; head != <span class="literal">nil</span>; head = head.Next &#123;</span><br><span class="line">        vals = <span class="built_in">append</span>(vals, head.Val)</span><br><span class="line">    &#125;</span><br><span class="line">    n := <span class="built_in">len</span>(vals)</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> vals[:n / <span class="number">2</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> v != vals[n - <span class="number">1</span> - i] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="12-用Rand7-实现Rand10-（Go）470-中等"><a href="#12-用Rand7-实现Rand10-（Go）470-中等" class="headerlink" title="12. 用Rand7()实现Rand10()（Go）470-中等"></a><font color=DarkOrange>12. 用Rand7()实现Rand10()（Go）470-中等</font></h4><p><strong>题目：</strong></p>
<p>给定方法 <code>rand7</code> 可生成 <code>[1,7]</code> 范围内的均匀随机整数，试写一个方法 <code>rand10</code> 生成 <code>[1,10]</code> 范围内的均匀随机整数</p>
<p>你只能调用 <code>rand7()</code> 且不能调用其他方法。请不要使用系统的 <code>Math.random()</code> 方法</p>
<p>每个测试用例将有一个内部参数 <code>n</code>，即你实现的函数 <code>rand10()</code> 在测试时将被调用的次数。请注意，这不是传递给 <code>rand10()</code> 的参数</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入<span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">输入<span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">]</span></span><br><span class="line">输入<span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">10</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
</ul>
<p><strong>思想：</strong></p>
<p>方法一：拒绝采样</p>
<p>思路与算法</p>
<p>我们可以用拒绝采样的方法实现 Rand10()。在拒绝采样中，如果生成的随机数满足要求，那么就返回该随机数，否则会不断生成，直到生成一个满足要求的随机数为止</p>
<ul>
<li>我们只需要能够满足等概率的生成 10 个不同的数即可，具体的生成方法可以有很多种，比如我们可以利用两个 Rand7() 相乘，我们只取其中等概率的 10 个不同的数的组合即可，当然还有许多其他不同的解法，可以利用各种运算和函数的组合等方式来实现<ul>
<li>比如我们可以利用两个Rand7()相乘，分别可以得到结果如下：一大个表格</li>
<li>我们可以得到每个数生成的概率为：一大个表格</li>
<li>我们可以从中挑选 10个等概率的数即可</li>
</ul>
</li>
<li>题目中要求尽可能的减少 Rand7() 的调用次数，则我们应该尽量保证生成的每个不同的数的生成概率尽可能的大，即调用 Rand7() 期望次数尽可能的小</li>
<li>我们可以调用两次 Rand7()，那么可以生成 [1,49] 之间的随机整数，我们只用到其中的前 40 个用来实现 Rand10()，而拒绝剩下的 9 个数，如下图所示</li>
<li>我们可以看到表中的 [1,49] 每个数生成的概率为49分之1。我们实际上只取 [1,40] 这前 40 个数，转化为 [1,10] 时，这 10 个数中每个数的生成概率则为 49分之1</li>
</ul>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：期望时间复杂度为 O(1)，但最坏情况下会达到 O*(∞)（一直被拒绝）</li>
<li>空间复杂度：O(1)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rand10</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        row := rand7()</span><br><span class="line">        col := rand7()</span><br><span class="line">        idx := (row - <span class="number">1</span>) * <span class="number">7</span> + col</span><br><span class="line">        <span class="keyword">if</span> idx &lt;= <span class="number">40</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + (idx - <span class="number">1</span>) % <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="13-两数之和（Go）1-简单"><a href="#13-两数之和（Go）1-简单" class="headerlink" title="13. 两数之和（Go）1-简单"></a><font color=DarkOrange>13. 两数之和（Go）1-简单</font></h4><p>题目：</p>
<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 和为目标值 <code>target</code>  的那 两个 整数，并返回它们的数组下标</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现</p>
<p>你可以按任意顺序返回答案</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">11</span><span class="punctuation">,</span><span class="number">15</span><span class="punctuation">]</span><span class="punctuation">,</span> target = <span class="number">9</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">解释：因为 nums<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span> + nums<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> == <span class="number">9</span> ，返回 <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> target = <span class="number">6</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> target = <span class="number">6</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 10^4</code></li>
<li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>-10^9 &lt;= target &lt;= 10^9</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<p><strong>思想：</strong></p>
<p>方法二：哈希表</p>
<p>思路及算法</p>
<p>注意到方法一的时间复杂度较高的原因是寻找 <code>target - x</code> 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引</p>
<p>使用哈希表，可以将寻找 <code>target - x</code> 的时间复杂度降低到从 O(N) 降低到 O(1)</p>
<p>这样我们创建一个哈希表，对于每一个 <code>x</code>，我们首先查询哈希表中是否存在 <code>target - x</code>，然后将 <code>x</code> 插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配</p>
<p><strong>复杂度分析：</strong></p>
<p>时间复杂度：O(N)，其中 NN 是数组中的元素数量。对于每一个元素 <code>x</code>，我们可以 O(1) 地寻找 <code>target - x</code></p>
<p>空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    hashTable := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, x := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> p, ok := hashTable[target - x]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;p, i&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hashTable[x] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="14-爬楼梯（Go）70-简单"><a href="#14-爬楼梯（Go）70-简单" class="headerlink" title="14. 爬楼梯（Go）70-简单"></a><font color=DarkOrange>14. 爬楼梯（Go）70-简单</font></h4><p><strong>题目：</strong></p>
<p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶</p>
<p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span> <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span> <span class="number">2</span> 阶</span><br><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span> <span class="number">1</span> 阶 + <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span> <span class="number">1</span> 阶 + <span class="number">2</span> 阶</span><br><span class="line"><span class="number">3.</span> <span class="number">2</span> 阶 + <span class="number">1</span> 阶</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 45</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>思路和算法</p>
<p>我们用 f(x) 表示爬到第 x 级台阶的方案数，考虑最后一步可能跨了一级台阶，也可能跨了两级台阶，所以我们可以列出如下式子：<br>f(x)&#x3D;f(x−1)+f(x−2)</p>
<p>它意味着爬到第 x 级台阶的方案数是爬到第 x−1 级台阶的方案数和爬到第 x−2 级台阶的方案数的和。很好理解，因为每次只能爬 1 级或 2 级，所以 f(x) 只能从 f(x−1) 和 f(x−2) 转移过来，而这里要统计方案总数，我们就需要对这两项的贡献求和</p>
<p>以上是动态规划的转移方程，下面我们来讨论边界条件。我们是从第 0 级开始爬的，所以从第 0 级爬到第 0 级我们可以看作只有一种方案，即 f(0)&#x3D;1；从第 0 级到第 1 级也只有一种方案，即爬一级，f(1)&#x3D;1。这两个作为边界条件就可以继续向后推导出第 n 级的正确结果</p>
<p>我们不妨写几项来验证一下，根据转移方程得到 f(2)&#x3D;2，f(3)&#x3D;3，f(4)&#x3D;5，……，我们把这些情况都枚举出来，发现计算的结果是正确的</p>
<p>我们不难通过转移方程和边界条件给出一个时间复杂度和空间复杂度都是 O(n) 的实现，但是由于这里的 f(x) 只和 f(x−1) 与 f(x−2) 有关，所以我们可以用「滚动数组思想」把空间复杂度优化成 O(1)。下面的代码中给出的就是这种实现</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：循环执行 n 次，每次花费常数的时间代价，故渐进时间复杂度为 O(n)</li>
<li>空间复杂度：这里只用了常数个变量作为辅助空间，故渐进空间复杂度为 O(1)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    p, q, r := <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">        p = q</span><br><span class="line">        q = r</span><br><span class="line">        r = p + q</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="15-最长递增子系列（Go）-300-中等"><a href="#15-最长递增子系列（Go）-300-中等" class="headerlink" title="15. 最长递增子系列（Go） 300-中等"></a><font color=DarkOrange>15. 最长递增子系列（Go） 300-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度</p>
<p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">10</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">101</span><span class="punctuation">,</span><span class="number">18</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最长递增子序列是 <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">101</span><span class="punctuation">]</span>，因此长度为 <span class="number">4</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">7</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 2500</code></li>
<li><code>-10的4次方 &lt;= nums[i] &lt;= 10的4次方</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：动态规划</p>
<p>思路与算法</p>
<p>定义 dp[i] 为考虑前 i 个元素，以第 i 个数字结尾的最长上升子序列的长度，注意 nums[i] 必须被选取</p>
<p>我们从小到大计算 dp 数组的值，在计算 dp[i] 之前，我们已经计算出 dp[0…i−1] 的值，则状态转移方程为：<br>dp[i] &#x3D; max(dp[j]) + 1，其中0&lt;&#x3D;j&lt;i并且num[j]&lt;num[i]</p>
<p>即考虑往 dp[0…i−1] 中最长的上升子序列后面再加一个 nums[i]。由于 dp[j] 代表 nums[0…j] 中以 nums[j] 结尾的最长上升子序列，所以如果能从 dp[j] 这个状态转移过来，那么 nums[i] 必然要大于 nums[j]，才能将 nums[i] 放在 nums[j] 后面以形成更长的上升子序列</p>
<p>最后，整个数组的最长上升子序列即所有 dp[i] 中的最大值</p>
<p>LISlength &#x3D; max(dp[i])，其中0&lt;&#x3D;i&lt;n</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(n的2次方)，其中 n 为数组 nums 的长度。动态规划的状态数为 n，计算状态 dp[i] 时，需要 O(n) 的时间遍历 dp[0…i−1] 的所有状态，所以总时间复杂度为 O(n的2次方)</li>
<li>空间复杂度：O(n)，需要额外使用长度为 n 的 dp 数组</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">func LengthOfList(nums []<span class="built_in">int</span>) <span class="built_in">int</span> &#123;</span><br><span class="line">	// 定义dp[i]标识以nums[i]这个数据结尾的最长递增子系列的长度</span><br><span class="line">	dp := make([]<span class="built_in">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(dp); i++ &#123;</span><br><span class="line">		dp[i] = <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line">		<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; j; k++ &#123;</span><br><span class="line">			<span class="keyword">if</span> nums[j] &gt; nums[k] &#123;</span><br><span class="line">				<span class="keyword">if</span> dp[j] &lt; dp[k]+<span class="number">1</span> &#123;</span><br><span class="line">					dp[j] = dp[k] + <span class="number">1</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="built_in">range</span> dp &#123;</span><br><span class="line">		<span class="keyword">if</span> v &gt; ans &#123;</span><br><span class="line">			ans = v</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	nums := []<span class="built_in">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">11</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;结果为：&quot;</span>, LengthOfList(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="16-有效的括号（Go）20-简单"><a href="#16-有效的括号（Go）20-简单" class="headerlink" title="16. 有效的括号（Go）20-简单"></a><font color=DarkOrange>16. 有效的括号（Go）20-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个只包括 <code>&#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合</li>
<li>左括号必须以正确的顺序闭合</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;()&quot;</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">输入：s = <span class="string">&quot;()[]&#123;&#125;&quot;</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">输入：s = <span class="string">&quot;(]&quot;</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">false</span></span></span><br><span class="line">输入：s = <span class="string">&quot;([)]&quot;</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">false</span></span></span><br><span class="line">输入：s = <span class="string">&quot;&#123;[]&#125;&quot;</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">true</span></span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 10^4</code></li>
<li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：栈</p>
<p>判断括号的有效性可以使用「栈」这一数据结构来解决</p>
<p>我们遍历给定的字符串 s。当我们遇到一个左括号时，我们会期望在后续的遍历中，有一个相同类型的右括号将其闭合。由于后遇到的左括号要先闭合，因此我们可以将这个左括号放入栈顶</p>
<p>当我们遇到一个右括号时，我们需要将一个相同类型的左括号闭合。此时，我们可以取出栈顶的左括号并判断它们是否是相同类型的括号。如果不是相同的类型，或者栈中并没有左括号，那么字符串 s 无效，返回 False。为了快速判断括号的类型，我们可以使用哈希表存储每一种括号。哈希表的键为右括号，值为相同类型的左括号</p>
<p>在遍历结束后，如果栈中没有左括号，说明我们将字符串 s 中的所有左括号闭合，返回 True，否则返回 False</p>
<p>注意到有效字符串的长度一定为偶数，因此如果字符串的长度为奇数，我们可以直接返回 False，省去后续的遍历判断过程</p>
<div align="center"><img src="https://i.bmp.ovh/imgs/2022/06/22/f79a7d99292db85e.png" style="zoom:50%;" /></div>

<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n 是字符串 s 的长度</li>
<li>空间复杂度：O(n+∣Σ∣)，其中 Σ 表示字符集，本题中字符串只包含 6 种括号，∣Σ∣&#x3D;6。栈中的字符数量为 O(n)，而哈希表使用的空间为 O(∣Σ∣)，相加即可得到总空间复杂度</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    pairs := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">byte</span>&#123;</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;]&#x27;</span>:<span class="string">&#x27;[&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    stack := []<span class="type">byte</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> pairs[s[i]] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || stack[<span class="built_in">len</span>(stack) - <span class="number">1</span>] != pairs[s[i]] &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            stack = stack[:<span class="built_in">len</span>(stack) - <span class="number">1</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, s[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="17-环形链表（Go）141-简单"><a href="#17-环形链表（Go）141-简单" class="headerlink" title="17. 环形链表（Go）141-简单"></a><font color=DarkOrange>17. 环形链表（Go）141-简单</font></h4><p><strong>题目：</strong></p>
<p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环</p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：<code>pos</code> 不作为参数进行传递 。仅仅是为了标识链表的实际情况</p>
<p>如果链表中存在环 ，则返回 <code>true</code> 。 否则，返回 <code>false</code> </p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：head = <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">-4</span><span class="punctuation">]</span><span class="punctuation">,</span> pos = <span class="number">1</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点</span><br><span class="line">输入：head = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span> pos = <span class="number">0</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点</span><br><span class="line">输入：head = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span> pos = <span class="number">-1</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">false</span></span></span><br><span class="line">解释：链表中没有环</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中节点的数目范围是 <code>[0, 10^4]</code></li>
<li><code>-10^5&lt;= Node.val &lt;= 10^5</code></li>
<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：哈希表<br>思路及算法</p>
<p>最容易想到的方法是遍历所有节点，每次遍历到一个节点时，判断该节点此前是否被访问过</p>
<p>具体地，我们可以使用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(N)，其中 N 是链表中的节点数。最坏情况下我们需要遍历每个节点一次</li>
<li>空间复杂度：O(N)，其中 N 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    seen := <span class="keyword">map</span>[*ListNode]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := seen[head]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        seen[head] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="18-寻找旋转排序数组中的最小值（Go）153-中等"><a href="#18-寻找旋转排序数组中的最小值（Go）153-中等" class="headerlink" title="18. 寻找旋转排序数组中的最小值（Go）153-中等"></a><font color=DarkOrange>18. 寻找旋转排序数组中的最小值（Go）153-中等</font></h4><p><strong>题目：</strong></p>
<p>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 旋转 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7]</code> 在变化后可能得到：</p>
<ul>
<li>若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]</li>
<li>若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]</li>
</ul>
<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 旋转一次 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> </p>
<p>给你一个元素值 互不相同 的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 </p>
<p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：原数组为 <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span> ，旋转 <span class="number">3</span> 次得到输入数组</span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：原数组为 <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">]</span> ，旋转 <span class="number">4</span> 次得到输入数组</span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">11</span><span class="punctuation">,</span><span class="number">13</span><span class="punctuation">,</span><span class="number">15</span><span class="punctuation">,</span><span class="number">17</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">11</span></span><br><span class="line">解释：原数组为 <span class="punctuation">[</span><span class="number">11</span><span class="punctuation">,</span><span class="number">13</span><span class="punctuation">,</span><span class="number">15</span><span class="punctuation">,</span><span class="number">17</span><span class="punctuation">]</span> ，旋转 <span class="number">4</span> 次得到输入数组</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li><code>1 &lt;= n &lt;= 5000</code></li>
<li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li>
<li><code>nums</code> 中的所有整数 互不相同</li>
<li><code>nums</code> 原来是一个升序排序的数组，并进行了 1 至 n 次旋转</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：二分查找</p>
<p>思路与算法</p>
<p>一个不包含重复元素的升序数组在经过旋转之后，可以得到下面可视化的折线图：</p>
<p>其中横轴表示数组元素的下标，纵轴表示数组元素的值。图中标出了最小值的位置，是我们需要查找的目标</p>
<p>我们考虑数组中的最后一个元素 x：在最小值右侧的元素（不包括最后一个元素本身），它们的值一定都严格小于 x；而在最小值左侧的元素，它们的值一定都严格大于 x。因此，我们可以根据这一条性质，通过二分查找的方法找出最小值</p>
<p>在二分查找的每一步中，左边界为 low，右边界为 high，区间的中点为 pivot，最小值就在该区间内。我们将中轴元素 nums[pivot] 与右边界元素 nums[high] 进行比较，可能会有以下的三种情况：</p>
<p>第一种情况是 nums[pivot]&lt;nums[high]。如下图所示，这说明 nums[pivot] 是最小值右侧的元素，因此我们可以忽略二分查找区间的右半部分</p>
<p>第二种情况是 nums[pivot]&gt;nums[high]。如下图所示，这说明 nums[pivot] 是最小值左侧的元素，因此我们可以忽略二分查找区间的左半部分</p>
<p>由于数组不包含重复元素，并且只要当前的区间长度不为 1，pivot 就不会与 high 重合；而如果当前的区间长度为 1，这说明我们已经可以结束二分查找了。因此不会存在 nums[pivot]&#x3D;nums[high] 的情况</p>
<p>当二分查找结束时，我们就得到了最小值所在的位置</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：时间复杂度为 O(logn)，其中 nn 是数组 nums 的长度。在二分查找的过程中，每一步会忽略一半的区间，因此时间复杂度为 O(logn)</li>
<li>空间复杂度：O(1)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMin</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    low, high := <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> low &lt; high &#123;</span><br><span class="line">        pivot := low + (high - low) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[pivot] &lt; nums[high] &#123;</span><br><span class="line">            high = pivot</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = pivot + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[low]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="19-最长回文子串（Go）5-中等"><a href="#19-最长回文子串（Go）5-中等" class="headerlink" title="19. 最长回文子串（Go）5-中等"></a><font color=DarkOrange>19. 最长回文子串（Go）5-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;babad&quot;</span></span><br><span class="line">输出：<span class="string">&quot;bab&quot;</span></span><br><span class="line">解释：<span class="string">&quot;aba&quot;</span> 同样是符合题意的答案</span><br><span class="line">输入：s = <span class="string">&quot;cbbd&quot;</span></span><br><span class="line">输出：<span class="string">&quot;bb&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母组成</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法二：中心扩展算法</p>
<p>思路与算法</p>
<p>我们仔细观察一下方法一中的状态转移方程：</p>
<p>P(i,i) &#x3D; true<br>P(i,i+1) &#x3D; (Si&#x3D;&#x3D;Si+1)</p>
<p>P(i,j) &#x3D; P(i+1, j+1)^(Si&#x3D;&#x3D;Sj)</p>
<p>找出其中的状态转移链：</p>
<p><em>P</em>(<em>i</em>,<em>j</em>)←<em>P</em>(<em>i</em>+1,<em>j</em>−1)←<em>P</em>(<em>i</em>+2,<em>j</em>−2)←⋯←某一边界情况</p>
<p>可以发现，所有的状态在转移的时候的可能性都是唯一的。也就是说，我们可以从每一种边界情况开始「扩展」，也可以得出所有的状态对应的答案</p>
<p>边界情况即为子串长度为 1 或 2 的情况。我们枚举每一种边界情况，并从对应的子串开始不断地向两边扩展。如果两边的字母相同，我们就可以继续扩展，例如从 P(i+1,j−1) 扩展到 P(i,j)；如果两边的字母不同，我们就可以停止扩展，因为在这之后的子串都不能是回文串了</p>
<p>聪明的读者此时应该可以发现，「边界情况」对应的子串实际上就是我们「扩展」出的回文串的「回文中心」。方法二的本质即为：我们枚举所有的「回文中心」并尝试「扩展」，直到无法扩展为止，此时的回文串长度即为此「回文中心」下的最长回文串长度。我们对所有的长度求出最大值，即可得到最终的答案</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(n的2次方)，其中 n 是字符串的长度。长度为 1 和 2 的回文中心分别有 n 和 n−1 个，每个回文中心最多会向外扩展 O(n) 次</li>
<li>空间复杂度：O(1)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    start, end := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        left1, right1 := expandAroundCenter(s, i ,i)</span><br><span class="line">        left2, right2 := expandAroundCenter(s, i, i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> right1 - left1 &gt; end - start &#123;</span><br><span class="line">            start, end = left1, right1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> right2 - left2 &gt; end - start &#123;</span><br><span class="line">            start ,end = left2, right2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[start:end + <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">expandAroundCenter</span><span class="params">(s <span class="type">string</span>, left, right <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> ; left &gt;= <span class="number">0</span> &amp;&amp; right &lt; <span class="built_in">len</span>(s) &amp;&amp; s[left] == s[right]; </span><br><span class="line">    left, right = left - <span class="number">1</span>, right + <span class="number">1</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">return</span> left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="20-最长公共子序列（Go）1143-中等"><a href="#20-最长公共子序列（Go）1143-中等" class="headerlink" title="20. 最长公共子序列（Go）1143-中等"></a><font color=DarkOrange>20. 最长公共子序列（Go）1143-中等</font></h4><p><strong>题目：</strong></p>
<p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 </p>
<p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串</p>
<ul>
<li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列</li>
</ul>
<p>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：text1 = <span class="string">&quot;abcde&quot;</span><span class="punctuation">,</span> text2 = <span class="string">&quot;ace&quot;</span> </span><br><span class="line">输出：<span class="number">3</span>  </span><br><span class="line">解释：最长公共子序列是 <span class="string">&quot;ace&quot;</span> ，它的长度为 <span class="number">3</span></span><br><span class="line">输入：text1 = <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> text2 = <span class="string">&quot;abc&quot;</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：最长公共子序列是 <span class="string">&quot;abc&quot;</span> ，它的长度为 <span class="number">3</span></span><br><span class="line">输入：text1 = <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> text2 = <span class="string">&quot;def&quot;</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：两个字符串没有公共子序列，返回 <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li>
<li><code>text1</code> 和 <code>text2</code> 仅由小写英文字符组成</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：动态规划<br>最长公共子序列问题是典型的二维动态规划问题</p>
<p>假设字符串 text 1和 text2的长度分别为 m 和 n，创建 m+1 行 n+1 列的二维数组 dp，其中 dp[i] [j]表示 text1[0:i] 和 text2[0:j] 的最长公共子序列的长度</p>
<p>上述表示中，text1[0:i] 表示 text1的长度为 i 的前缀，text2[0:j] 表示 text2的长度为 j 的前缀</p>
<p>考虑动态规划的边界情况：</p>
<ul>
<li>当 i&#x3D;0 时，text1[0:i] 为空，空字符串和任何字符串的最长公共子序列的长度都是 0，因此对任意 0≤j≤n，有 dp[0] [j]&#x3D;0</li>
<li>当 j&#x3D;0 时，text2 [0:j] 为空，同理可得，对任意 0≤i≤m，有 dp[i] [0]&#x3D;0</li>
</ul>
<p>因此动态规划的边界情况是：当 i&#x3D;0 或 j&#x3D;0 时，dp[i] [j]&#x3D;0</p>
<p>当 i&gt;0 且 j&gt;0 时，考虑 dp[i] [j] 的计算：</p>
<ul>
<li>当text1[i-1]!&#x3D;text2[j-1]时，将这两个相同的字符称为公共字符，考虑text1[0:i-1]和text2[0:j-1]的最长公共子序列，再增加一个字符（即公共字符）即可得到text1[0:i]和text2[0:j]的最长公共子序列，因此dp[i] [j]&#x3D;dp[i-1] [j-1]+1</li>
<li>当text1[i-1]!&#x3D;text2[j-1]时，考虑以下两项：<ul>
<li>text1[0:i-1]和text2[0:j]的最长公共子序列</li>
<li>text1[0:i]和text2[0:j-1]的最长公共子系列</li>
</ul>
</li>
</ul>
<p>要得到text1[0:i]和text[o:j]的最长公共子系列，应取两项中的长度较大的一项，因此dp[i] [j]&#x3D;max(dp[i-1],dp[i][j-1])</p>
<p>由此可得到如下状态转移方程：</p>
<p>dp[i] [j]&#x3D;1:dp[i-1] [j-1]+1,text1[i-1]&#x3D;text2[j-1] 2:max(dp[i-1] [j],dp[i] [j-1]),text[i-1]!&#x3D;text[j-1]</p>
<p>最终计算得到db[m] [n] 即为text1和text2的最长公共子系列的长度</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(mn)，其中 m 和 n 分别是字符串 text1和 text 2的长度。二维数组 dp 有m+1 行和 n+1 列，需要对 dp 中的每个元素进行计算</li>
<li>空间复杂度：O(mn)，其中 m 和 n 分别是字符串 text1和 text 2的长度。创建了 m+1 行 n+1 列的二维数组 dp</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonSubsequence</span><span class="params">(text1 <span class="type">string</span>, text2 <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    m, n := <span class="built_in">len</span>(text1), <span class="built_in">len</span>(text2)</span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">int</span>, m + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dp &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">int</span>, n + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i, c1 := <span class="keyword">range</span> text1 &#123;</span><br><span class="line">        <span class="keyword">for</span> j, c2 := <span class="keyword">range</span> text2 &#123;</span><br><span class="line">            <span class="keyword">if</span> c1 == c2 &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j] + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = max(dp[i][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]) </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="21-三数之和（Go）15-中等"><a href="#21-三数之和（Go）15-中等" class="headerlink" title="21. 三数之和（Go）15-中等"></a><font color=DarkOrange>21. 三数之和（Go）15-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <code>a，b，c</code> ，使得 <code>a + b + c = 0</code> ？请你找出所有和为 <code>0</code> 且不重复的三元组。<strong>注意：</strong>答案中不可以包含重复的三元组</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">-4</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="punctuation">[</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">-1</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-10的5次方 &lt;= nums[i] &lt;= 10的5次方</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：排序 + 双指针</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(N的2次方)，其中 N 是数组 nums 的长度</li>
<li>空间复杂度：O(logN)。我们忽略存储答案的空间，额外的排序的空间复杂度为 O(logN)。然而我们修改了输入的数组 nums，在实际情况下不一定允许，因此也可以看成使用了一个额外的数组存储了 nums 的副本并进行排序，空间复杂度为 O(N)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    ans := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 枚举a</span></span><br><span class="line">    <span class="keyword">for</span> first := <span class="number">0</span>; first &lt; n; first++ &#123;</span><br><span class="line">        <span class="comment">// 需要和上一次枚举的数不同</span></span><br><span class="line">        <span class="keyword">if</span> first &gt; <span class="number">0</span> &amp;&amp; nums[first] == nums[first <span class="number">-1</span>] &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// c对应的指针初始指向数组的最右端</span></span><br><span class="line">        third := n - <span class="number">1</span></span><br><span class="line">        target := <span class="number">-1</span> * nums[first]</span><br><span class="line">        <span class="comment">// 枚举b</span></span><br><span class="line">        <span class="keyword">for</span> second := first + <span class="number">1</span>; second &lt; n; second++ &#123;</span><br><span class="line">            <span class="comment">// 需要和上一次枚举的数不相同</span></span><br><span class="line">            <span class="keyword">if</span> second &gt; first + <span class="number">1</span> &amp;&amp; nums[second] == nums[second - <span class="number">1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 需要保证b的指针在c的指针左侧</span></span><br><span class="line">            <span class="keyword">for</span> second &lt; third &amp;&amp; nums[second] + nums[third] &gt; target &#123;</span><br><span class="line">                third --</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果指针重合，随着b后续的增加，就不会有满足a+b+c=0并且b&lt;c的c了，可以退出循环</span></span><br><span class="line">            <span class="keyword">if</span> second == third &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> nums[second] + nums[third] == target &#123;</span><br><span class="line">                ans = <span class="built_in">append</span>(ans, []<span class="type">int</span>&#123;nums[first], nums[second], nums[third]&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="22-寻找两个正序数组的中位数（Go）4-困难"><a href="#22-寻找两个正序数组的中位数（Go）4-困难" class="headerlink" title="22. 寻找两个正序数组的中位数（Go）4-困难"></a><font color=DarkOrange>22. 寻找两个正序数组的中位数（Go）4-困难</font></h4><p><strong>题目：</strong></p>
<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> </p>
<p>算法的时间复杂度应该为 <code>O(log (m+n))</code> </p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：nums1 = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> nums2 = <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">2.00000</span></span><br><span class="line">解释：合并数组 = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span> ，中位数 <span class="number">2</span></span><br><span class="line">===</span><br><span class="line">输入：nums1 = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span> nums2 = <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">2.50000</span></span><br><span class="line">解释：合并数组 = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span> ，中位数 (<span class="number">2</span> + <span class="number">3</span>) / <span class="number">2</span> = <span class="number">2.5</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<p>方法一：二分查找</p>
<p>给定两个有序数组，要求找到两个有序数组的中位数，最直观的思路有以下两种：</p>
<ul>
<li>使用归并的方式，合并两个有序数组，得到一个大的有序数组。大的有序数组的中间位置的元素，即为中位数</li>
<li>不需要合并两个有序数组，只要找到中位数的位置即可。由于两个数组的长度已知，因此中位数对应的两个数组的下标之和也是已知的。维护两个指针，初始时分别指向两个数组的下标 00 的位置，每次将指向较小值的指针后移一位（如果一个指针已经到达数组末尾，则只需要移动另一个数组的指针），直到到达中位数的位置</li>
</ul>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(log(m+n))，其中 mm 和 nn 分别是数组nums1和 nums2的长度。初始时有 k&#x3D;(m+n)&#x2F;2 或 k&#x3D;(m+n)&#x2F;2+1，每一轮循环可以将查找范围减少一半，因此时间复杂度是 O(log(m+n))</li>
<li>空间复杂度：O(1)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">	totalLength := <span class="built_in">len</span>(nums1) + <span class="built_in">len</span>(nums2)</span><br><span class="line">	<span class="keyword">if</span> totalLength%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">		midIndex := totalLength / <span class="number">2</span></span><br><span class="line">		<span class="keyword">return</span> <span class="type">float64</span>(getKthElement(nums1, nums2, midIndex+<span class="number">1</span>))</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		midIndex1, midIndex2 := totalLength/<span class="number">2</span><span class="number">-1</span>, totalLength/<span class="number">2</span></span><br><span class="line">		<span class="keyword">return</span> <span class="type">float64</span>(getKthElement(nums1, nums2, midIndex1+<span class="number">1</span>)+getKthElement(nums1, nums2, midIndex2+<span class="number">1</span>)) / <span class="number">2.0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getKthElement</span><span class="params">(nums1, nums2 []<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	index1, index2 := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> index1 == <span class="built_in">len</span>(nums1) &#123;</span><br><span class="line">			<span class="keyword">return</span> nums2[index2+k<span class="number">-1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> index2 == <span class="built_in">len</span>(nums2) &#123;</span><br><span class="line">			<span class="keyword">return</span> nums1[index1+k<span class="number">-1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> k == <span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> min(nums1[index1], nums2[index2])</span><br><span class="line">		&#125;</span><br><span class="line">		half := k / <span class="number">2</span></span><br><span class="line">		newIndex1 := min(index1+half, <span class="built_in">len</span>(nums1)) - <span class="number">1</span></span><br><span class="line">		newIndex2 := min(index2+half, <span class="built_in">len</span>(nums2)) - <span class="number">1</span></span><br><span class="line">		pivot1, pivot2 := nums1[newIndex1], nums2[newIndex2]</span><br><span class="line">		<span class="keyword">if</span> pivot1 &lt;= pivot2 &#123;</span><br><span class="line">			k -= (newIndex1 - index1 + <span class="number">1</span>)</span><br><span class="line">			index1 = newIndex1 + <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			k -= (newIndex2 - index2 + <span class="number">1</span>)</span><br><span class="line">			index2 = newIndex2 + <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">	nums2 := []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;结果为：&quot;</span>, findMedianSortedArrays(nums1, nums2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="23-二叉树的层序遍历（Go）102-中等"><a href="#23-二叉树的层序遍历（Go）102-中等" class="headerlink" title="23. 二叉树的层序遍历（Go）102-中等"></a><font color=DarkOrange>23. 二叉树的层序遍历（Go）102-中等</font></h4><p><strong>题目：</strong></p>
<p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：root = <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">20</span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="number">15</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">9</span><span class="punctuation">,</span><span class="number">20</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">15</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">输入：root = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">输入：root = <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[0, 2000]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：广度优先搜索</p>
<p>思路和算法</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：每个点进队出队各一次，故渐进时间复杂度为 O(n)</li>
<li>空间复杂度：队列中元素的个数不超过 n 个，故渐进空间复杂度为 O(n)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeNode 定义二叉树</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val   <span class="type">int</span></span><br><span class="line">	Left  *TreeNode</span><br><span class="line">	Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateNode 创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateNode</span><span class="params">(i <span class="type">int</span>, nums []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">	tree := &amp;TreeNode&#123;nums[i], <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	<span class="comment">// 左节点的数组下标为1，,3，,5...2*i+1</span></span><br><span class="line">	<span class="keyword">if</span> i &lt; <span class="built_in">len</span>(nums) &amp;&amp; <span class="number">2</span>*i+<span class="number">1</span> &lt; <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">		tree.Left = CreateNode(<span class="number">2</span>*i+<span class="number">1</span>, nums)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 右节点的数组下标为2,4,6...2*i+2</span></span><br><span class="line">	<span class="keyword">if</span> i &lt; <span class="built_in">len</span>(nums) &amp;&amp; <span class="number">2</span>*i+<span class="number">2</span> &lt; <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">		tree.Right = CreateNode(<span class="number">2</span>*i+<span class="number">2</span>, nums)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LevelOrder 二叉树层序遍历（广度优先搜索）-中等</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LevelOrder</span><span class="params">(root *TreeNode)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ret [][]<span class="type">int</span></span><br><span class="line">	<span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ret</span><br><span class="line">	&#125;</span><br><span class="line">	q := []*TreeNode&#123;root&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; <span class="built_in">len</span>(q) &gt; <span class="number">0</span>; i++ &#123;</span><br><span class="line">		ret = <span class="built_in">append</span>(ret, []<span class="type">int</span>&#123;&#125;)</span><br><span class="line">		<span class="keyword">var</span> p []*TreeNode</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(q); j++ &#123;</span><br><span class="line">			node := q[j]</span><br><span class="line">			ret[i] = <span class="built_in">append</span>(ret[i], node.Val)</span><br><span class="line">			<span class="keyword">if</span> node.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">				p = <span class="built_in">append</span>(p, node.Left)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> node.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">				p = <span class="built_in">append</span>(p, node.Right)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		q = p</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PreorderTraversal 二叉树前序遍历（递归）-简单-根节点——左子树——右子树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PreorderTraversal</span><span class="params">(root *TreeNode)</span></span> (vals []<span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> preorder <span class="function"><span class="keyword">func</span><span class="params">(*TreeNode)</span></span></span><br><span class="line">	preorder = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		vals = <span class="built_in">append</span>(vals, node.Val)</span><br><span class="line">		preorder(node.Left)</span><br><span class="line">		preorder(node.Right)</span><br><span class="line">	&#125;</span><br><span class="line">	preorder(root)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InorderTraversal 二叉树中序遍历（递归）-简单-左子树——根节点——右子树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InorderTraversal</span><span class="params">(root *TreeNode)</span></span> (res []<span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> inorder <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span></span><br><span class="line">	inorder = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		inorder(node.Left)</span><br><span class="line">		res = <span class="built_in">append</span>(res, node.Val)</span><br><span class="line">		inorder(node.Right)</span><br><span class="line">	&#125;</span><br><span class="line">	inorder(root)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostorderTraversal 二叉树后续遍历（递归）-简单-左子树——右子树——根节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PostorderTraversal</span><span class="params">(root *TreeNode)</span></span> (res []<span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> postorder <span class="function"><span class="keyword">func</span><span class="params">(*TreeNode)</span></span></span><br><span class="line">	postorder = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		postorder(node.Left)</span><br><span class="line">		postorder(node.Right)</span><br><span class="line">		res = <span class="built_in">append</span>(res, node.Val)</span><br><span class="line">	&#125;</span><br><span class="line">	postorder(root)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 0代表节点为空</span></span><br><span class="line">	nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">	<span class="comment">// 将数组切片转化为二叉树结构体</span></span><br><span class="line">	tree := CreateNode(<span class="number">0</span>, nums)</span><br><span class="line">	levelOrder := LevelOrder(tree)</span><br><span class="line">	fmt.Println(<span class="string">&quot;二叉树层序遍历：&quot;</span>, levelOrder)</span><br><span class="line">	preorderTraversal := PreorderTraversal(tree)</span><br><span class="line">	fmt.Println(<span class="string">&quot;二叉树前序遍历：&quot;</span>, preorderTraversal)</span><br><span class="line">	inorderTraversal := InorderTraversal(tree)</span><br><span class="line">	fmt.Println(<span class="string">&quot;二叉树中序遍历：&quot;</span>, inorderTraversal)</span><br><span class="line">	postorderTraversal := PostorderTraversal(tree)</span><br><span class="line">	fmt.Println(<span class="string">&quot;二叉树后序遍历：&quot;</span>, postorderTraversal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="24-补充题6：手撕堆排序（Go）-912-中等"><a href="#24-补充题6：手撕堆排序（Go）-912-中等" class="headerlink" title="24. 补充题6：手撕堆排序（Go） 912-中等"></a><font color=DarkOrange>24. 补充题6：手撕堆排序（Go） 912-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<p>算法描述：首先建一个堆，然后调整堆，调整过程是将节点和子节点进行比较，将 其中最大的值变为父节点，递归调整调整次数lgn,最后将根节点和尾节点交换再n次 调整<strong>O(nlgn)</strong></p>
<p>步骤：</p>
<ul>
<li>创建最大堆或者最小堆（我是最小堆）</li>
<li>调整堆</li>
<li>交换首尾节点(为了维持一个完全二叉树才要进行收尾交换)</li>
</ul>
<p><strong>复杂度分析：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HeapSortMax</span><span class="params">(nums []<span class="type">int</span>, length <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> length &lt;= <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> nums</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 二叉树深度</span></span><br><span class="line">	depth := length/<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i := depth; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">		<span class="comment">// 假定最大的位置就在i的位置</span></span><br><span class="line">		topmax := i</span><br><span class="line">		leftchild := <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line">		rightchild := <span class="number">2</span>*i + <span class="number">2</span></span><br><span class="line">		<span class="comment">// nums[leftchild] &gt; nums[topmax] 防止越界</span></span><br><span class="line">		<span class="keyword">if</span> leftchild &lt;= length<span class="number">-1</span> &amp;&amp; nums[leftchild] &gt; nums[topmax] &#123;</span><br><span class="line">			topmax = leftchild</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// nums[rightchild] &gt; nums[topmax] 防止越界</span></span><br><span class="line">		<span class="keyword">if</span> rightchild &lt;= length<span class="number">-1</span> &amp;&amp; nums[rightchild] &gt; nums[topmax] &#123;</span><br><span class="line">			topmax = rightchild</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> topmax != i &#123;</span><br><span class="line">			nums[i], nums[topmax] = nums[topmax], nums[i]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HeapSort</span><span class="params">(nums []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	lenght := <span class="built_in">len</span>(nums)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenght; i++ &#123;</span><br><span class="line">		lastLen := lenght - i</span><br><span class="line">		HeapSortMax(nums, lastLen)</span><br><span class="line">		<span class="keyword">if</span> i &lt; lenght &#123;</span><br><span class="line">			nums[<span class="number">0</span>], nums[lastLen<span class="number">-1</span>] = nums[lastLen<span class="number">-1</span>], nums[<span class="number">0</span>]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;结果为：&quot;</span>, HeapSort(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="25-相交链表（Go）160-简单"><a href="#25-相交链表（Go）160-简单" class="headerlink" title="25. 相交链表（Go）160-简单"></a><font color=DarkOrange>25. 相交链表（Go）160-简单</font></h4><p><strong>题目：</strong></p>
<p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> </p>
<p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p>
<p>题目数据 保证 整个链式结构中不存在环</p>
<p>注意，函数返回结果后，链表必须 保持其原始结构 </p>
<p>自定义评测：</p>
<p>评测系统 的输入如下（你设计的程序 不适用 此输入）：</p>
<ul>
<li>intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0</li>
<li>listA - 第一个链表</li>
<li>listB - 第二个链表</li>
<li>skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数</li>
<li>skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数</li>
</ul>
<p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 <code>headA</code> 和 <code>headB</code> 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 </p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = <span class="number">8</span><span class="punctuation">,</span> listA = <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span><span class="punctuation">,</span> listB = <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span><span class="punctuation">,</span> skipA = <span class="number">2</span><span class="punctuation">,</span> skipB = <span class="number">3</span></span><br><span class="line">输出：Intersected at &#x27;<span class="number">8</span>&#x27;</span><br><span class="line">解释：相交节点的值为 <span class="number">8</span> （注意，如果两个链表相交则不能为 <span class="number">0</span>）</span><br><span class="line">从各自的表头开始算起，链表 A 为 <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span>，链表 B 为 <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span></span><br><span class="line">在 A 中，相交节点前有 <span class="number">2</span> 个节点；在 B 中，相交节点前有 <span class="number">3</span> 个节点</span><br><span class="line">输入：intersectVal = <span class="number">2</span><span class="punctuation">,</span> listA = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> listB = <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> skipA = <span class="number">3</span><span class="punctuation">,</span> skipB = <span class="number">1</span></span><br><span class="line">输出：Intersected at &#x27;<span class="number">2</span>&#x27;</span><br><span class="line">解释：相交节点的值为 <span class="number">2</span> （注意，如果两个链表相交则不能为 <span class="number">0</span>）</span><br><span class="line">从各自的表头开始算起，链表 A 为 <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span>，链表 B 为 <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span></span><br><span class="line">在 A 中，相交节点前有 <span class="number">3</span> 个节点；在 B 中，相交节点前有 <span class="number">1</span> 个节点。</span><br><span class="line">输入：intersectVal = <span class="number">0</span><span class="punctuation">,</span> listA = <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> listB = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span><span class="punctuation">,</span> skipA = <span class="number">3</span><span class="punctuation">,</span> skipB = <span class="number">2</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">null</span></span></span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span>，链表 B 为 <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span></span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 <span class="number">0</span>，而 skipA 和 skipB 可以是任意值</span><br><span class="line">这两个链表不相交，因此返回 <span class="literal"><span class="keyword">null</span></span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<p>方法一：哈希集合<br>思路和算法</p>
<p>判断两个链表是否相交，可以使用哈希集合存储链表节点</p>
<p>首先遍历链表 headA，并将链表 headA 中的每个节点加入哈希集合中。然后遍历链表 headB，对于遍历到的每个节点，判断该节点是否在哈希集合中：</p>
<ul>
<li>如果当前节点不在哈希集合中，则继续遍历下一个节点</li>
<li>如果当前节点在哈希集合中，则后面的节点都在哈希集合中，即从当前节点开始的所有节点都在两个链表的相交部分，因此在链表 headB 中遍历到的第一个在哈希集合中的节点就是两个链表相交的节点，返回该节点</li>
</ul>
<p>如果链表 headB 中的所有节点都不在哈希集合中，则两个链表不相交，返回 null</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(m+n)，其中 m 和 n 是分别是链表 headA 和 headB 的长度。需要遍历两个链表各一次</li>
<li>空间复杂度：O(m)，其中 m 是链表 headA 的长度。需要使用哈希集合存储链表 headA 中的全部节点</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getIntersectionNode</span><span class="params">(headA, headB *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    vis := <span class="keyword">map</span>[*ListNode]<span class="type">bool</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> tmp := headA; tmp != <span class="literal">nil</span>; tmp = tmp.Next &#123;</span><br><span class="line">        vis[tmp] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> tmp := headB; tmp != <span class="literal">nil</span>; tmp = tmp.Next &#123;</span><br><span class="line">        <span class="keyword">if</span> vis[tmp] &#123;</span><br><span class="line">            <span class="keyword">return</span> tmp</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="26-二叉搜索树的第K大节点（Go）-剑指offer54-简单"><a href="#26-二叉搜索树的第K大节点（Go）-剑指offer54-简单" class="headerlink" title="26. 二叉搜索树的第K大节点（Go） 剑指offer54-简单"></a><font color=DarkOrange>26. 二叉搜索树的第K大节点（Go） 剑指offer54-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一棵二叉搜索树，请找出其中第 <code>k</code> 大的节点的值</p>
<p><strong>示例：</strong></p>
<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<ol>
<li>通过二叉树的中序遍历便是一个从小到大的排序</li>
<li>设置一个count，每遍历一个数据便自增1，当count&#x3D;k时，就找到了正确答案</li>
</ol>
<p><strong>复杂度分析：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 思路：返回中序遍历生成的序列中的第k个节点</span></span><br><span class="line"><span class="comment">// 此题最好只实现：InorderTraverse和KthLargest</span></span><br><span class="line"><span class="comment">// 在Goland IDE里实现全部貌似结果不正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val   <span class="type">int</span></span><br><span class="line">	Left  *TreeNode</span><br><span class="line">	Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateNode 创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateNode</span><span class="params">(i <span class="type">int</span>, nums []<span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">	tree := &amp;TreeNode&#123;nums[i], <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	<span class="comment">// 左节点的数组下标为1,3,5...2*i+1</span></span><br><span class="line">	<span class="keyword">if</span> i &lt; <span class="built_in">len</span>(nums) &amp;&amp; <span class="number">2</span>*i+<span class="number">1</span> &lt; <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">		tree.Left = CreateNode(<span class="number">2</span>*i+<span class="number">1</span>, nums)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 右节点的数组下标为2,4,6...2*i+2</span></span><br><span class="line">	<span class="keyword">if</span> i &lt; <span class="built_in">len</span>(nums) &amp;&amp; <span class="number">2</span>*i+<span class="number">2</span> &lt; <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">		tree.Right = CreateNode(<span class="number">2</span>*i+<span class="number">2</span>, nums)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InorderTraverse</span><span class="params">(root *TreeNode, ret *[]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	InorderTraverse(root.Left, ret)</span><br><span class="line">	*ret = <span class="built_in">append</span>(*ret, root.Val)</span><br><span class="line">	InorderTraverse(root.Right, ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">KthLargest</span><span class="params">(root *TreeNode, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	ret := &amp;[]<span class="type">int</span>&#123;&#125;</span><br><span class="line">	InorderTraverse(root, ret)</span><br><span class="line">	<span class="comment">// 说明没找到第k大节点</span></span><br><span class="line">	<span class="keyword">if</span> k &lt; <span class="number">1</span> &amp;&amp; k &gt; <span class="built_in">len</span>(*ret) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (*ret)[<span class="built_in">len</span>(*ret)-k]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="comment">// 0代表节点为空</span></span><br><span class="line">	treeNode := CreateNode(<span class="number">0</span>, nums)</span><br><span class="line">	fmt.Println(<span class="string">&quot;结果为：&quot;</span>, KthLargest(treeNode, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="27-LFU缓存（Go）-460-困难"><a href="#27-LFU缓存（Go）-460-困难" class="headerlink" title="27. LFU缓存（Go） 460-困难"></a><font color=DarkOrange>27. LFU缓存（Go） 460-困难</font></h4><p><strong>题目：</strong></p>
<p>请你为 最不经常使用（LFU）缓存算法设计并实现数据结构</p>
<p><strong>示例：</strong></p>
<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<p>方法二：双哈希表</p>
<p><strong>复杂度分析：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">	Key   <span class="type">int</span></span><br><span class="line">	Value <span class="type">int</span></span><br><span class="line">	freq  <span class="type">int</span></span><br><span class="line">	pre   *Node</span><br><span class="line">	next  *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LFUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">	limit   <span class="type">int</span></span><br><span class="line">	HashMap <span class="keyword">map</span>[<span class="type">int</span>]*Node</span><br><span class="line">	head    *Node</span><br><span class="line">	end     *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LFUConstructor</span><span class="params">(capacity <span class="type">int</span>)</span></span> LFUCache &#123;</span><br><span class="line">	lfuCache := LFUCache&#123;&#125;</span><br><span class="line">	lfuCache.limit = capacity</span><br><span class="line">	lfuCache.HashMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]*Node, capacity)</span><br><span class="line">	<span class="keyword">return</span> lfuCache</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lfuCache *LFUCache)</span></span> Get(key <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> value, ok := lfuCache.HashMap[key]; ok &#123;</span><br><span class="line">		value.freq++</span><br><span class="line">		lfuCache.refreshNode(value)</span><br><span class="line">		<span class="keyword">return</span> value.Value</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lfuCache *LFUCache)</span></span> Put(key, value <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> v, ok := lfuCache.HashMap[key]; !ok &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(lfuCache.HashMap) &gt;= lfuCache.limit &#123;</span><br><span class="line">			oldKey := lfuCache.removeNode(lfuCache.head)</span><br><span class="line">			<span class="built_in">delete</span>(lfuCache.HashMap, oldKey)</span><br><span class="line">		&#125;</span><br><span class="line">		node := Node&#123;Key: key, Value: value, freq: <span class="number">1</span>&#125;</span><br><span class="line">		lfuCache.addNode(&amp;node)</span><br><span class="line">		lfuCache.HashMap[key] = &amp;node</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		v.Value = value</span><br><span class="line">		v.freq++</span><br><span class="line">		lfuCache.refreshNode(v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lfuCache *LFUCache)</span></span> refreshNode(node *Node) &#123;</span><br><span class="line">	<span class="keyword">if</span> node == lfuCache.end &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	lfuCache.removeNode(node)</span><br><span class="line">	lfuCache.addNode(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lfuCache *LFUCache)</span></span> removeNode(node *Node) <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> node == lfuCache.end &#123;</span><br><span class="line">		lfuCache.end = lfuCache.end.pre</span><br><span class="line">		lfuCache.end.next = <span class="literal">nil</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> node == lfuCache.head &#123;</span><br><span class="line">		lfuCache.head = lfuCache.head.next</span><br><span class="line">		lfuCache.head.pre = <span class="literal">nil</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		node.pre.next = node.next</span><br><span class="line">		node.next.pre = node.pre</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> node.Key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lfuCache *LFUCache)</span></span> addNode(node *Node) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> lfuCache.head == <span class="literal">nil</span> &amp;&amp; lfuCache.end == <span class="literal">nil</span> &#123;</span><br><span class="line">		lfuCache.head = node</span><br><span class="line">		lfuCache.end = node</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	head := lfuCache.head</span><br><span class="line">	<span class="keyword">for</span> head != <span class="literal">nil</span> &amp;&amp; node.freq &gt;= head.freq &#123;</span><br><span class="line">		head = head.next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">		lfuCache.end.next = node</span><br><span class="line">		node.pre = lfuCache.end</span><br><span class="line">		lfuCache.end = node</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">		head.pre.next = node</span><br><span class="line">		node.pre = head.pre</span><br><span class="line">		head.pre = node</span><br><span class="line">		node.next = head</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	lfuCache.head.pre = <span class="literal">nil</span></span><br><span class="line">	lfuCache.end.next = <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	lfuCache := LFUConstructor(<span class="number">3</span>)</span><br><span class="line">	lfuCache.Put(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">	lfuCache.Put(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">	lfuCache.Put(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">	fmt.Println(lfuCache) <span class="comment">// 此时的链表顺序应该是 1 : 3   2 : 4   3 : 5   lfuCache.head 为1 : 3   lfuCache.end 为3 : 5</span></span><br><span class="line">	lfuCache.Get(<span class="number">1</span>)</span><br><span class="line">	fmt.Println(lfuCache) <span class="comment">// 此时的链表顺序应该是  2 : 4   3 : 5  1 : 3   lfuCache.head 为2 : 4    lfuCache.end 为1 : 3</span></span><br><span class="line">	lfuCache.Put(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line">	fmt.Println(lfuCache) <span class="comment">// 此时的链表顺序应该是  3 : 5  4 : 6   1 : 3    lfuCache.head 为3 : 5   lfuCache.end 为1 : 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="28-K个一组翻转链表（Go）25-困难"><a href="#28-K个一组翻转链表（Go）25-困难" class="headerlink" title="28. K个一组翻转链表（Go）25-困难"></a><font color=DarkOrange>28. K个一组翻转链表（Go）25-困难</font></h4><p><strong>题目：</strong></p>
<p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。<code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换</p>
<p><strong>示例：</strong></p>
<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<p><strong>复杂度分析：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Value <span class="type">int</span></span><br><span class="line">	Next  *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseKGroup</span><span class="params">(head *ListNode, k <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">	dummyNode := &amp;ListNode&#123;Next: head&#125;</span><br><span class="line">	pre := dummyNode</span><br><span class="line">	<span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">		tail := pre</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">			tail = tail.Next</span><br><span class="line">			<span class="keyword">if</span> tail == <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> dummyNode.Next</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//记录tail后一个节点，以及pre后一个节点</span></span><br><span class="line">		nextGroupHead := tail.Next</span><br><span class="line">		head = pre.Next</span><br><span class="line">		<span class="comment">//反转</span></span><br><span class="line">		ReverseList(head, tail)</span><br><span class="line">		<span class="comment">//拼接</span></span><br><span class="line">		pre.Next = tail</span><br><span class="line">		head.Next = nextGroupHead</span><br><span class="line">		<span class="comment">//更新pre和head</span></span><br><span class="line">		pre = head</span><br><span class="line">		head = nextGroupHead</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dummyNode.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReverseList 翻转链表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReverseList</span><span class="params">(head *ListNode, tail *ListNode)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> pre *ListNode</span><br><span class="line">	cur := head</span><br><span class="line">	<span class="keyword">for</span> pre != tail &#123;</span><br><span class="line">		next := cur.Next</span><br><span class="line">		cur.Next = pre</span><br><span class="line">		pre = cur</span><br><span class="line">		cur = next</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="29-买卖股票的最佳时机（Go）121-简单"><a href="#29-买卖股票的最佳时机（Go）121-简单" class="headerlink" title="29. 买卖股票的最佳时机（Go）121-简单"></a><font color=DarkOrange>29. 买卖股票的最佳时机（Go）121-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格</p>
<p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润</p>
<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 </p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：<span class="punctuation">[</span><span class="number">7</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：在第 <span class="number">2</span> 天（股票价格 = <span class="number">1</span>）的时候买入，在第 <span class="number">5</span> 天（股票价格 = <span class="number">6</span>）的时候卖出，最大利润 = <span class="number">6</span><span class="number">-1</span> = <span class="number">5</span></span><br><span class="line">     注意利润不能是 <span class="number">7</span><span class="number">-1</span> = <span class="number">6</span><span class="punctuation">,</span> 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票</span><br><span class="line">输入：prices = <span class="punctuation">[</span><span class="number">7</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：在这种情况下<span class="punctuation">,</span> 没有交易完成<span class="punctuation">,</span> 所以最大利润为 <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= prices.length &lt;= 10的5次方</code></li>
<li><code>0 &lt;= prices[i] &lt;= 10的4次方</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法二：一次遍历（贪心算法）</p>
<p>算法</p>
<p>假设给定的数组为：<code>[7, 1, 5, 3, 6, 4]</code></p>
<p>如果我们在图表上绘制给定数组中的数字，我们将会得到：</p>
<p>我们来假设自己来购买股票。随着时间的推移，每天我们都可以选择出售股票与否。那么，假设在第 i 天，如果我们要在今天卖股票，那么我们能赚多少钱呢</p>
<p>显然，如果我们真的在买卖股票，我们肯定会想：如果我是在历史最低点买的股票就好了！太好了，在题目中，我们只要用一个变量记录一个历史最低价格 minprice，我们就可以假设自己的股票是在那天买的。那么我们在第 i 天卖出股票能得到的利润就是 prices[i] - minprice</p>
<p>因此，我们只需要遍历价格数组一遍，记录历史最低点，然后在每一天考虑这么一个问题：如果我是在历史最低点买进的，那么我今天卖出能赚多少钱？当考虑完所有天数之时，我们就得到了最好的答案</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(n)，只需要遍历一次</li>
<li>空间复杂度：O(1)，只使用了常数个变量</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MaxProfit</span><span class="params">(prices []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="comment">// 贪心</span></span><br><span class="line">	res := <span class="number">0</span></span><br><span class="line">	m := prices[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(prices); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> prices[i] &gt; m &#123;</span><br><span class="line">			<span class="keyword">if</span> (prices[i] - m) &gt; res &#123;</span><br><span class="line">				res = prices[i] - m</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			m = prices[i]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="type">int</span>&#123;<span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;结果为：&quot;</span>, MaxProfit(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="30-基本计算器2（Go）227-中等"><a href="#30-基本计算器2（Go）227-中等" class="headerlink" title="30. 基本计算器2（Go）227-中等"></a><font color=DarkOrange>30. 基本计算器2（Go）227-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值</p>
<p>整数除法仅保留整数部分</p>
<p>你可以假设给定的表达式总是有效的。所有中间结果将在 <code>[-2^31, 2^31 - 1]</code> 的范围内</p>
<p>注意：不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval()</code> </p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;3+2*2&quot;</span></span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">输入：s = <span class="string">&quot; 3/2 &quot;</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">输入：s = <span class="string">&quot; 3+5 / 2 &quot;</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 3 * 10^5</li>
<li>s 由整数和算符 (‘+’, ‘-‘, ‘*’, ‘&#x2F;‘) 组成，中间由一些空格隔开</li>
<li>s 表示一个 有效表达式</li>
<li>表达式中的所有整数都是非负整数，且在范围 [0, 2^31 - 1] 内</li>
<li>题目数据保证答案是一个 32-bit 整数</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：栈<br>思路</p>
<p>由于乘除优先于加减计算，因此不妨考虑先进行所有乘除运算，并将这些乘除运算后的整数值放回原表达式的相应位置，则随后整个表达式的值，就等于一系列整数加减后的值</p>
<p>基于此，我们可以用一个栈，保存这些（进行乘除运算后的）整数的值。对于加减号后的数字，将其直接压入栈中；对于乘除号后的数字，可以直接与栈顶元素计算，并替换栈顶元素为计算后的结果</p>
<p>具体来说，遍历字符串 s，并用变量 preSign 记录每个数字之前的运算符，对于第一个数字，其之前的运算符视为加号。每次遍历到数字末尾时，根据 preSign 来决定计算方式：</p>
<ul>
<li>加号：将数字压入栈</li>
<li>减号：将数字的相反数压入栈</li>
<li>乘除号：计算数字与栈顶元素，并将栈顶元素替换为计算结果</li>
</ul>
<p>代码实现中，若读到一个运算符，或者遍历到字符串末尾，即认为是遍历到了数字末尾。处理完该数字后，更新 preSign 为当前遍历的字符</p>
<p>遍历完字符串 s 后，将栈中元素累加，即为该字符串表达式的值</p>
<p><strong>复杂度分析：</strong></p>
<p>时间复杂度：O(n)，其中 n 为字符串 s 的长度。需要遍历字符串 s 一次，计算表达式的值</p>
<p>空间复杂度：O(n)，其中 n 为字符串 s 的长度。空间复杂度主要取决于栈的空间，栈的元素个数不超过 n</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(s <span class="type">string</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">    stack := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    preSign := <span class="string">&#x27;+&#x27;</span></span><br><span class="line">    num := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, ch := <span class="keyword">range</span> s &#123;</span><br><span class="line">        isDigit := <span class="string">&#x27;0&#x27;</span> &lt; ch &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> isDigit &#123;</span><br><span class="line">            num = num * <span class="number">10</span> + <span class="type">int</span>(ch - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !isDigit &amp;&amp; ch != <span class="string">&#x27; &#x27;</span> || i == <span class="built_in">len</span>(s) - <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> preSign &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, num)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, -num)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                stack[<span class="built_in">len</span>(stack) - <span class="number">1</span>] *= num</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                stack[<span class="built_in">len</span>(stack) - <span class="number">1</span>] /= num</span><br><span class="line">            &#125;</span><br><span class="line">            preSign = ch</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> stack &#123;</span><br><span class="line">        ans += v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="31-数组中重复的数据（Go）442-中等"><a href="#31-数组中重复的数据（Go）442-中等" class="headerlink" title="31. 数组中重复的数据（Go）442-中等"></a><font color=DarkOrange>31. 数组中重复的数据（Go）442-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，其中 <code>nums</code> 的所有整数都在范围 <code>[1, n]</code> 内，且每个整数出现 一次 或 两次 。请你找出所有出现 两次 的整数，并以数组形式返回</p>
<p>你必须设计并实现一个时间复杂度为 <code>O(n)</code> 且仅使用常量额外空间的算法解决此问题</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输入：nums = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>n == nums.length</code></li>
<li><code>1 &lt;= n &lt;= 105</code></li>
<li><code>1 &lt;= nums[i] &lt;= n</code></li>
<li><code>nums</code> 中的每个元素出现 <strong>一次</strong> 或 <strong>两次</strong></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：将元素交换到对应的位置<br>思路与算法</p>
<p>由于给定的 n 个数都在 [1,n] 的范围内，如果有数字出现了两次，就意味着 [1,n] 中有数字没有出现过</p>
<p>因此，我们可以尝试将每一个数放在对应的位置。由于数组的下标范围是 [0,n−1]，我们需要将数 i 放在数组中下标为 i−1 的位置：</p>
<ul>
<li>如果 i 恰好出现了一次，那么将 i 放在数组中下标为 i−1 的位置即可</li>
<li>如果 i 出现了两次，那么我们希望其中的一个 i 放在数组下标中为 i−1 的位置，另一个 i 放置在任意「不冲突」的位置 j。也就是说，数 j+1 没有在数组中出现过</li>
</ul>
<p>这样一来，如果我们按照上述的规则放置每一个数，那么我们只需要对数组进行一次遍历。当遍历到位置 i 时，如果 nums[i]−1!&#x3D;i，说明 nums[i] 出现了两次（另一次出现在位置 num[i]−1），我们就可以将 num[i] 放入答案</p>
<p>放置的方法也很直观：我们对数组进行一次遍历。当遍历到位置 i 时，我们知道 nums[i] 应该被放在位置 nums[i]−1。因此我们交换 num[i] 和 nums[nums[i]−1] 即可，直到待交换的两个元素相等为止</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li><p>时间复杂度：O(n)。每一次交换操作会使得至少一个元素被交换到对应的正确位置，因此交换的次数为 O(n)，总时间复杂度为 O(n)</p>
</li>
<li><p>空间复杂度：O(1)。返回值不计入空间复杂度</p>
</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> (ans []<span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">for</span> nums[i] != nums[nums[i] - <span class="number">1</span>] &#123;</span><br><span class="line">            nums[i], nums[nums[i] - <span class="number">1</span>] = nums[nums[i] - <span class="number">1</span>], nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> num - <span class="number">1</span> != i &#123;</span><br><span class="line">            ans = <span class="built_in">append</span>(ans, num)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="32-零钱兑换（Go）-332-中等"><a href="#32-零钱兑换（Go）-332-中等" class="headerlink" title="32. 零钱兑换（Go） 332-中等"></a><font color=DarkOrange>32. 零钱兑换（Go） 332-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。你可以认为每种硬币的数量是无限的</p>
<p><strong>示例：</strong></p>
<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<p>动态规划</p>
<p><strong>复杂度分析：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CoinChange</span><span class="params">(coins []<span class="type">int</span>, amount <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	dp := <span class="built_in">make</span>([]<span class="type">int</span>, amount+<span class="number">1</span>)</span><br><span class="line">	<span class="comment">// 初始化线性备忘录</span></span><br><span class="line">	<span class="keyword">for</span> k := <span class="keyword">range</span> dp &#123;</span><br><span class="line">		<span class="comment">// 相当于无限大，方便比较</span></span><br><span class="line">		dp[k] = amount + <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 这个就是占位的</span></span><br><span class="line">	dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(dp); i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> _, coin := <span class="keyword">range</span> coins &#123;</span><br><span class="line">			<span class="comment">// 至少包含 1 枚某种硬币</span></span><br><span class="line">			<span class="keyword">if</span> i-coin &lt; <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">continue</span> <span class="comment">// 这种情况别闹</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 选择一个较小的</span></span><br><span class="line">			dp[i] = min(dp[i], <span class="number">1</span>+dp[i-coin])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> dp[amount] == amount+<span class="number">1</span> &#123;</span><br><span class="line">		<span class="comment">// 没有合适的</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[amount]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;结果为：&quot;</span>, CoinChange(nums, <span class="number">11</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="33-两数相加（Go）2-中等"><a href="#33-两数相加（Go）2-中等" class="headerlink" title="33. 两数相加（Go）2-中等"></a><font color=DarkOrange>33. 两数相加（Go）2-中等</font></h4><p><strong>题目：</strong></p>
<p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：l1 = <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> l2 = <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">7</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">]</span></span><br><span class="line">解释：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br><span class="line">输入：l1 = <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span> l2 = <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span></span><br><span class="line">输入：l1 = <span class="punctuation">[</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">]</span><span class="punctuation">,</span> l2 = <span class="punctuation">[</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">8</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>题目数据保证列表表示的数字不含前导零</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：模拟<br>思路与算法</p>
<p>由于输入的两个链表都是逆序存储数字的位数的，因此两个链表中同一位置的数字可以直接相加</p>
<p>我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。具体而言，如果当前两个链表处相应位置的数字为 n1,n2，进位值为 carry，则它们的和为 n1+n2+carry；其中，答案链表处相应位置的数字为 (n1+n2+carry)mod10，而新的进位值为 ⌊<br>n1+n2+carry除以10⌋</p>
<p>如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 0 </p>
<p>此外，如果链表遍历结束后，有 carry&gt;0，还需要在答案链表的后面附加一个节点，节点的值为 carry</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(max(m,n))，其中 m 和 n 分别为两个链表的长度。我们要遍历两个链表的全部位置，而处理每个位置只需要 O(1) 的时间</li>
<li>空间复杂度：O(1)。注意返回值不计入空间复杂度</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span></span> (head *ListNode) &#123;</span><br><span class="line">    <span class="keyword">var</span> tail *ListNode</span><br><span class="line">    carry := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> l1 != <span class="literal">nil</span> || l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        n1, n2 := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">            n1 = l1.Val</span><br><span class="line">            l1 = l1.Next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">            n2 = l2.Val</span><br><span class="line">            l2 = l2.Next</span><br><span class="line">        &#125;</span><br><span class="line">        sum := n1 + n2 +carry</span><br><span class="line">        sum, carry = sum % <span class="number">10</span>, sum / <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">            head = &amp;ListNode&#123;Val: sum&#125;</span><br><span class="line">            tail = head</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail.Next = &amp;ListNode&#123;Val: sum&#125;</span><br><span class="line">            tail = tail.Next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> carry &gt; <span class="number">0</span> &#123;</span><br><span class="line">        tail.Next = &amp;ListNode&#123;Val: carry&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="34-链表中倒数第K个节点（Go）剑指offer22-简单"><a href="#34-链表中倒数第K个节点（Go）剑指offer22-简单" class="headerlink" title="34. 链表中倒数第K个节点（Go）剑指offer22-简单"></a><font color=DarkOrange>34. 链表中倒数第K个节点（Go）剑指offer22-简单</font></h4><p><strong>题目：</strong></p>
<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点</p>
<p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 3 个节点是值为 4 的节点</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">给定一个链表<span class="punctuation">:</span> <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span><span class="punctuation">,</span> 和 k = <span class="number">2.</span></span><br><span class="line">返回链表 <span class="number">4</span>-&gt;<span class="number">5.</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<p>方法一：顺序查找<br>思路与算法</p>
<p>最简单直接的方法即为顺序查找，假设当前链表的长度为 n，则我们知道链表的倒数第 k 个节点即为正数第 n−k 个节点，此时我们只需要顺序遍历到链表的第 n−k 个节点即为倒数第 k 个节点</p>
<p>我们首先求出链表的长度 n，然后顺序遍历到链表的第 n−k 个节点返回即可</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(n)，其中 n 为链表的长度。需要两次遍历</li>
<li>空间复杂度：O(1)</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getKthFromEnd</span><span class="params">(head *ListNode, k <span class="type">int</span>)</span></span> (kth *ListNode) &#123;</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> node := head; node != <span class="literal">nil</span>; node = node.Next &#123;</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> kth = head; n &gt; k; n-- &#123;</span><br><span class="line">        kth = kth.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="35-路径总和（Go）112-简单"><a href="#35-路径总和（Go）112-简单" class="headerlink" title="35. 路径总和（Go）112-简单"></a><font color=DarkOrange>35. 路径总和（Go）112-简单</font></h4><p><strong>题目：</strong></p>
<p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> </p>
<p>叶子节点 是指没有子节点的节点</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：root = <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">11</span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="number">13</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span> targetSum = <span class="number">22</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">解释：等于目标和的根节点到叶节点路径如上图所示</span><br><span class="line">输入：root = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> targetSum = <span class="number">5</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">false</span></span></span><br><span class="line">解释：树中存在两条根节点到叶子节点的路径：</span><br><span class="line">(<span class="number">1</span> --&gt; <span class="number">2</span>)<span class="punctuation">:</span> 和为 <span class="number">3</span></span><br><span class="line">(<span class="number">1</span> --&gt; <span class="number">3</span>)<span class="punctuation">:</span> 和为 <span class="number">4</span></span><br><span class="line">不存在 sum = <span class="number">5</span> 的根节点到叶子节点的路径</span><br><span class="line">输入：root = <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> targetSum = <span class="number">0</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">false</span></span></span><br><span class="line">解释：由于树是空的，所以不存在根节点到叶子节点的路径</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：广度优先搜索<br>思路及算法</p>
<p>首先我们可以想到使用广度优先搜索的方式，记录从根节点到当前节点的路径和，以防止重复计算</p>
<p>这样我们使用两个队列，分别存储将要遍历的节点，以及根节点到这些节点的路径和即可</p>
<p><strong>复杂度分析：</strong></p>
<p>时间复杂度：O(N)，其中 N 是树的节点数。对每个节点访问一次</p>
<p>空间复杂度：O(N)，其中 N 是树的节点数。空间复杂度主要取决于队列的开销，队列中的元素个数不会超过树的节点数</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasPathSum</span><span class="params">(root *TreeNode, targetSum <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    queNode := []*TreeNode&#123;&#125;</span><br><span class="line">    queVal := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    queNode = <span class="built_in">append</span>(queNode, root)</span><br><span class="line">    queVal = <span class="built_in">append</span>(queVal, root.Val)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queNode) != <span class="number">0</span> &#123;</span><br><span class="line">        now := queNode[<span class="number">0</span>]</span><br><span class="line">        queNode = queNode[<span class="number">1</span>:]</span><br><span class="line">        temp := queVal[<span class="number">0</span>]</span><br><span class="line">        queVal = queVal[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> now.Left == <span class="literal">nil</span> &amp;&amp; now.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> temp == targetSum &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> now.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">            queNode = <span class="built_in">append</span>(queNode, now.Left)</span><br><span class="line">            queVal = <span class="built_in">append</span>(queVal, now.Left.Val + temp)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> now.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">            queNode = <span class="built_in">append</span>(queNode, now.Right)</span><br><span class="line">            queVal = <span class="built_in">append</span>(queVal, now.Right.Val + temp)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="36-字符串相乘（Go）43-中等"><a href="#36-字符串相乘（Go）43-中等" class="headerlink" title="36. 字符串相乘（Go）43-中等"></a><font color=DarkOrange>36. 字符串相乘（Go）43-中等</font></h4><p><strong>题目：</strong></p>
<p>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式</p>
<p>注意：不能使用任何内置的 <code>BigInteger</code> 库或直接将输入转换为整数</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入<span class="punctuation">:</span> num1 = <span class="string">&quot;2&quot;</span><span class="punctuation">,</span> num2 = <span class="string">&quot;3&quot;</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="string">&quot;6&quot;</span></span><br><span class="line">输入<span class="punctuation">:</span> num1 = <span class="string">&quot;123&quot;</span><span class="punctuation">,</span> num2 = <span class="string">&quot;456&quot;</span></span><br><span class="line">输出<span class="punctuation">:</span> <span class="string">&quot;56088&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; num1.length, num2.length &lt;&#x3D; 200</li>
<li>num1 和 num2 只能由数字组成</li>
<li>num1 和 num2 都不包含任何前导零，除了数字0本身</li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：做加法<br>如果 num1和 num2之一是 0，则直接将 0 作为结果返回即可</p>
<p>如果 num1和 num2都不是 0，则可以通过模拟「竖式乘法」的方法计算乘积。从右往左遍历乘数，将乘数的每一位与被乘数相乘得到对应的结果，再将每次得到的结果累加。这道题中，被乘数是 num1，乘数是 num2</p>
<p>需要注意的是，num2除了最低位以外，其余的每一位的运算结果都需要补 0</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(mn+n^2)，其中 m 和 n 分别是 num1和 num2的长度。需要从右往左遍历 num2，对于 num2 的每一位，都需要和 num1的每一位计算乘积，因此计算乘积的总次数是 mn。字符串相加操作共有 n 次，相加的字符串长度最长为 m+n，因此字符串相加的时间复杂度是 O(mn+n^2)。总时间复杂度是 O(mn+n^2)</li>
<li>空间复杂度：O(m+n)，其中 m 和 n 分别是 num1和 num2的长度。空间复杂度取决于存储中间状态的字符串，由于乘积的最大长度为 m+n，因此存储中间状态的字符串的长度不会超过 m+n</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(num1 <span class="type">string</span>, num2 <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num1 == <span class="string">&quot;0&quot;</span> || num2 == <span class="string">&quot;0&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans := <span class="string">&quot;0&quot;</span></span><br><span class="line">    m, n := <span class="built_in">len</span>(num1), <span class="built_in">len</span>(num2)</span><br><span class="line">    <span class="keyword">for</span> i := n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        curr := <span class="string">&quot;&quot;</span></span><br><span class="line">        add := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j := n - <span class="number">1</span>; j &gt; i; j-- &#123;</span><br><span class="line">            curr += <span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        y := <span class="type">int</span>(num2[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> j := m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j-- &#123;</span><br><span class="line">            x := <span class="type">int</span>(num1[j] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            product := x * y + add</span><br><span class="line">            curr = strconv.Itoa(product % <span class="number">10</span>) + curr</span><br><span class="line">            add = product / <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ; add != <span class="number">0</span>; add /= <span class="number">10</span> &#123;</span><br><span class="line">            curr = strconv.Itoa(add % <span class="number">10</span>) + curr</span><br><span class="line">        &#125;</span><br><span class="line">        ans = addStrings(ans, curr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addStrings</span><span class="params">(num1, num2 <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    i, j := <span class="built_in">len</span>(num1) - <span class="number">1</span>, <span class="built_in">len</span>(num2) - <span class="number">1</span></span><br><span class="line">    add := <span class="number">0</span></span><br><span class="line">    ans := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ; i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || add != <span class="number">0</span>; i, j = i - <span class="number">1</span>, j - <span class="number">1</span> &#123;</span><br><span class="line">        x, y := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            x = <span class="type">int</span>(num1[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            y = <span class="type">int</span>(num2[j] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        result := x + y + add</span><br><span class="line">        ans = strconv.Itoa(result % <span class="number">10</span>) + ans</span><br><span class="line">        add = result / <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="37-用栈实现队列（Go）-232-简单"><a href="#37-用栈实现队列（Go）-232-简单" class="headerlink" title="37. 用栈实现队列（Go） 232-简单"></a><font color=DarkOrange>37. 用栈实现队列（Go） 232-简单</font></h4><p><strong>题目：</strong></p>
<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>
<p>实现 <code>MyQueue</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>
<li><code>int pop()</code> 从队列的开头移除并返回元素</li>
<li><code>int peek()</code> 返回队列开头的元素</li>
<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>
</ul>
<p>说明：</p>
<ul>
<li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的</li>
<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="punctuation">[</span><span class="string">&quot;MyQueue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;push&quot;</span><span class="punctuation">,</span> <span class="string">&quot;push&quot;</span><span class="punctuation">,</span> <span class="string">&quot;peek&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pop&quot;</span><span class="punctuation">,</span> <span class="string">&quot;empty&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">输出：</span><br><span class="line"><span class="punctuation">[</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyQueue myQueue = new MyQueue();</span><br><span class="line">myQueue.push(<span class="number">1</span>); <span class="comment">// queue is: [1]</span></span><br><span class="line">myQueue.push(<span class="number">2</span>); <span class="comment">// queue is: [1, 2] (leftmost is front of the queue)</span></span><br><span class="line">myQueue.peek(); <span class="comment">// return 1</span></span><br><span class="line">myQueue.pop(); <span class="comment">// return 1, queue is [2]</span></span><br><span class="line">myQueue.empty(); <span class="comment">// return false</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= x &lt;= 9</code></li>
<li>最多调用 <code>100</code> 次 <code>push</code>、<code>pop</code>、pe<code>ek</code> 和 <code>empty</code></li>
<li>假设所有操作都是有效的 （例如，一个空的队列不会调用 <code>pop</code> 或者 <code>peek</code> 操作）</li>
</ul>
<p><strong>思路：</strong></p>
<p>队列是一种 先进先出（first in - first out， FIFO）的数据结构，队列中的元素都从后端（rear）入队（push），从前端（front）出队（pop）<br>实现队列最直观的方法是用链表，但在这篇文章里我会介绍另一个方法 - 使用栈</p>
<p>栈是一种 后进先出（last in - first out， LIFO）的数据结构，栈中元素从栈顶（top）压入（push)，也从栈顶弹出（pop）</p>
<p>为了满足队列的 FIFO 的特性，我们需要用到两个栈，用它们其中一个来反转元素的入队顺序，用另一个来存储元素的最终顺序</p>
<p>方法一（使用两个栈 入队 - O(n)， 出队 - O(1)）</p>
<p>算法</p>
<p><strong>一. 入队（push）</strong></p>
<p>一个队列是 FIFO 的，但一个栈是 LIFO 的。这就意味着最新压入的元素必须得放在栈底。为了实现这个目的，我们首先需要把 s1 中所有的元素移到 s2 中，接着把新元素压入 s2。最后把 s2 中所有的元素弹出，再把弹出的元素压入 s1</p>
<p><strong>二. 出队（pop）</strong></p>
<p>直接从 <code>s1</code> 弹出就可以了，因为 <code>s1</code> 的栈顶元素就是队列的队首元素。同时我们把弹出之后 <code>s1</code> 的栈顶元素赋值给代表队首元素的 <code>front</code> 变量</p>
<p><strong>三. 判断空（empty）</strong></p>
<p><code>s1</code> 存储了队列所有的元素，所以只需要检查 <code>s1</code> 的是否为空就可以了</p>
<p><strong>四. 取队首元素（peek）</strong></p>
<p>在我们的算法中，用了 <code>front</code> 变量来存储队首元素，在每次 <code>入队</code> 操作或者 <code>出队</code> 操作之后这个变量都会随之更新</p>
<p><strong>复杂度分析：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> MyQueue struct &#123;</span><br><span class="line">    stack []<span class="built_in">int</span></span><br><span class="line">    back []<span class="built_in">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Constructor() MyQueue &#123;</span><br><span class="line">    <span class="keyword">return</span> MyQueue&#123;</span><br><span class="line">        stack: make([]<span class="built_in">int</span>, <span class="number">0</span>),</span><br><span class="line">        back: make([]<span class="built_in">int</span>, <span class="number">0</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyQueue) Push(x <span class="built_in">int</span>)  &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(this.back) != <span class="number">0</span> &#123;</span><br><span class="line">        val := this.back[<span class="built_in">len</span>(this.back) - <span class="number">1</span>]</span><br><span class="line">        this.back = this.back[:<span class="built_in">len</span>(this.back) - <span class="number">1</span>]</span><br><span class="line">        this.stack = append(this.stack, val)</span><br><span class="line">    &#125;</span><br><span class="line">    this.stack = append(this.stack, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyQueue) Pop() <span class="built_in">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(this.stack) != <span class="number">0</span> &#123;</span><br><span class="line">        val := this.stack[<span class="built_in">len</span>(this.stack) - <span class="number">1</span>]</span><br><span class="line">        this.stack = this.stack[:<span class="built_in">len</span>(this.stack) - <span class="number">1</span>]</span><br><span class="line">        this.back = append(this.back, val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.back) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    val := this.back[<span class="built_in">len</span>(this.back) - <span class="number">1</span>]</span><br><span class="line">    this.back = this.back[:<span class="built_in">len</span>(this.back) - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyQueue) Peek() <span class="built_in">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(this.stack) != <span class="number">0</span> &#123;</span><br><span class="line">        val := this.stack[<span class="built_in">len</span>(this.stack) - <span class="number">1</span>]</span><br><span class="line">        this.stack = this.stack[:<span class="built_in">len</span>(this.stack) - <span class="number">1</span>]</span><br><span class="line">        this.back = append(this.back, val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.back) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    val := this.back[<span class="built_in">len</span>(this.back) - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyQueue) Empty() <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this.stack) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(this.back) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="38-用队列实现栈（Go）225-简单"><a href="#38-用队列实现栈（Go）225-简单" class="headerlink" title="38. 用队列实现栈（Go）225-简单"></a><font color=DarkOrange>38. 用队列实现栈（Go）225-简单</font></h4><p><strong>题目：</strong></p>
<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）</p>
<p><strong>示例：</strong></p>
<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<p><strong>复杂度分析：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStack <span class="keyword">struct</span> &#123;</span><br><span class="line">	queue1, queue2 []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructor 在这里初始化你的数据结构</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> (s MyStack) &#123;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *MyStack)</span></span> Push(x <span class="type">int</span>) &#123;</span><br><span class="line">	s.queue2 = <span class="built_in">append</span>(s.queue2, x)</span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(s.queue1) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		s.queue2 = <span class="built_in">append</span>(s.queue2, s.queue1[<span class="number">0</span>])</span><br><span class="line">		s.queue1 = s.queue1[<span class="number">1</span>:]</span><br><span class="line">	&#125;</span><br><span class="line">	s.queue1, s.queue2 = s.queue2, s.queue1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *MyStack)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">	v := s.queue1[<span class="number">0</span>]</span><br><span class="line">	s.queue1 = s.queue1[<span class="number">1</span>:]</span><br><span class="line">	<span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *MyStack)</span></span> Top() <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> s.queue1[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *MyStack)</span></span> Empty() <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(s.queue1) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="39-翻转字符串里的单词-151-中等"><a href="#39-翻转字符串里的单词-151-中等" class="headerlink" title="39. 翻转字符串里的单词 151-中等"></a><font color=DarkOrange>39. 翻转字符串里的单词 151-中等</font></h4><p><strong>题目：</strong></p>
<p><strong>示例：</strong></p>
<p><strong>提示：</strong></p>
<p><strong>思路：</strong></p>
<p><strong>复杂度分析：</strong></p>
<p><strong>代码：</strong></p>
<h4 id="40-平衡二叉树（Go）110-简单"><a href="#40-平衡二叉树（Go）110-简单" class="headerlink" title="40. 平衡二叉树（Go）110-简单"></a><font color=DarkOrange>40. 平衡二叉树（Go）110-简单</font></h4><p><strong>题目：</strong></p>
<p>给定一个二叉树，判断它是否是高度平衡的二叉树</p>
<p>本题中，一棵高度平衡二叉树定义为：一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 </p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：root = <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">20</span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="number">15</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">输入：root = <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">false</span></span></span><br><span class="line">输入：root = <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="literal"><span class="keyword">true</span></span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中的节点数在范围 <code>[0, 5000]</code> 内</li>
<li><code>-10^4 &lt;= Node.val &lt;= 10^4</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>前言<br>这道题中的平衡二叉树的定义是：二叉树的每个节点的左右子树的高度差的绝对值不超过 1，则二叉树是平衡二叉树。根据定义，一棵二叉树是平衡二叉树，当且仅当其所有子树也都是平衡二叉树，因此可以使用递归的方式判断二叉树是不是平衡二叉树，递归的顺序可以是自顶向下或者自底向上</p>
<p>方法一：自顶向下的递归<br>定义函数 height，用于计算二叉树中的任意一个节点 p 的高度：</p>
<p>有了计算节点高度的函数，即可判断二叉树是否平衡。具体做法类似于二叉树的前序遍历，即对于当前遍历到的节点，首先计算左右子树的高度，如果左右子树的高度差是否不超过 1，再分别递归地遍历左右子节点，并判断左子树和右子树是否平衡。这是一个自顶向下的递归的过程</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li><p>时间复杂度：O(n^2)，其中 n 是二叉树中的节点个数</p>
<p>最坏情况下，二叉树是满二叉树，需要遍历二叉树中的所有节点，时间复杂度是 O(n)</p>
<p>对于节点 p，如果它的高度是 d，则 height(p) 最多会被调用 d 次（即遍历到它的每一个祖先节点时）。对于平均的情况，一棵树的高度 h 满足 O(h)&#x3D;O(logn)，因为 d≤h，所以总时间复杂度为 O(nlogn)。对于最坏的情况，二叉树形成链式结构，高度为 O(n)，此时总时间复杂度为 O(n^2)</p>
</li>
<li><p>空间复杂度：O(n)，其中 n 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 n</p>
</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> abs(height(root.Left) - height(root.Right)) &lt;= <span class="number">1</span> &amp;&amp;</span><br><span class="line">    isBalanced(root.Left) &amp;&amp; isBalanced(root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(root * TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(height(root.Left), height(root.Right)) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> * x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="41-螺旋矩阵（Go）54-中等"><a href="#41-螺旋矩阵（Go）54-中等" class="headerlink" title="41. 螺旋矩阵（Go）54-中等"></a><font color=DarkOrange>41. 螺旋矩阵（Go）54-中等</font></h4><p><strong>题目：</strong></p>
<p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素</p>
<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">输入：matrix = <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">7</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">]</span></span><br><span class="line">输入：matrix = <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">9</span><span class="punctuation">,</span><span class="number">10</span><span class="punctuation">,</span><span class="number">11</span><span class="punctuation">,</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">输出：<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">,</span><span class="number">8</span><span class="punctuation">,</span><span class="number">12</span><span class="punctuation">,</span><span class="number">11</span><span class="punctuation">,</span><span class="number">10</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">5</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 10</code></li>
<li><code>-100 &lt;= matrix[i] [j] &lt;= 100</code></li>
</ul>
<p><strong>思路：</strong></p>
<p>方法一：模拟<br>可以模拟螺旋矩阵的路径。初始位置是矩阵的左上角，初始方向是向右，当路径超出界限或者进入之前访问过的位置时，顺时针旋转，进入下一个方向</p>
<p>判断路径是否进入之前访问过的位置需要使用一个与输入矩阵大小相同的辅助矩阵 visited，其中的每个元素表示该位置是否被访问过。当一个元素被访问时，将 visited 中的对应位置的元素设为已访问</p>
<p>如何判断路径是否结束？由于矩阵中的每个元素都被访问一次，因此路径的长度即为矩阵中的元素数量，当路径的长度达到矩阵中的元素数量时即为完整路径，将该路径返回</p>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(mn)，其中 m 和 n 分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次</li>
<li>空间复杂度：O(mn)。需要创建一个大小为 m×n 的矩阵 visited 记录每个位置是否被访问过</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SpiralOrder</span><span class="params">(matrix [][]<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(matrix) == <span class="number">0</span> || <span class="built_in">len</span>(matrix[<span class="number">0</span>]) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	rows, columns := <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">	visited := <span class="built_in">make</span>([][]<span class="type">bool</span>, rows)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rows; i++ &#123;</span><br><span class="line">		visited[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, columns)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		total          = rows * columns</span><br><span class="line">		order          = <span class="built_in">make</span>([]<span class="type">int</span>, total)</span><br><span class="line">		row, column    = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">		directions     = [][]<span class="type">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;</span><br><span class="line">		directionIndex = <span class="number">0</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total; i++ &#123;</span><br><span class="line">		order[i] = matrix[row][column]</span><br><span class="line">		visited[row][column] = <span class="literal">true</span></span><br><span class="line">		nextRow, nextColumn := row+directions[directionIndex][<span class="number">0</span>],</span><br><span class="line">			column+directions[directionIndex][<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">if</span> nextRow &lt; <span class="number">0</span> || nextRow &gt;= rows || nextColumn &lt; <span class="number">0</span> ||</span><br><span class="line">			nextColumn &gt;= columns || visited[nextRow][nextColumn] &#123;</span><br><span class="line">			directionIndex = (directionIndex + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">		&#125;</span><br><span class="line">		row += directions[directionIndex][<span class="number">0</span>]</span><br><span class="line">		column += directions[directionIndex][<span class="number">1</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> order</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := [][]<span class="type">int</span>&#123;</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">		&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(SpiralOrder(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>下面的题为面试经历过的题目</strong></p>
<h4 id="1-Golang合并2个切片并去重排序"><a href="#1-Golang合并2个切片并去重排序" class="headerlink" title="1. Golang合并2个切片并去重排序"></a><font color=DarkOrange>1. Golang合并2个切片并去重排序</font></h4><p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Solution</span><span class="params">(nums1, nums2 []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	nums1 = <span class="built_in">append</span>(nums1, nums2...)</span><br><span class="line">	hashMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">	<span class="keyword">var</span> result []<span class="type">int</span></span><br><span class="line">	<span class="keyword">for</span> _, num := <span class="keyword">range</span> nums1 &#123;</span><br><span class="line">		<span class="comment">// 先计算Map长度，然后再往Map里添加数据</span></span><br><span class="line">		hashMapLen := <span class="built_in">len</span>(hashMap)</span><br><span class="line">		hashMap[num] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">		<span class="comment">// 如何Map的长度有变化，说明num没有重复，可以将其添加到切片里</span></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(hashMap) != hashMapLen &#123;</span><br><span class="line">			result = <span class="built_in">append</span>(result, num)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 内置方法排序</span></span><br><span class="line">	sort.Ints(result)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">2</span>&#125;</span><br><span class="line">	nums2 := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;结果为：&quot;</span>, Solution(nums1, nums2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-约瑟夫环问题"><a href="#2-约瑟夫环问题" class="headerlink" title="2. 约瑟夫环问题"></a><font color=DarkOrange>2. 约瑟夫环问题</font></h4><p><strong>题目：</strong>有n个人围成一圈，顺序排号。从第1个人开始报数（从1到3报数），凡报到3的人退出圈子，循环报数，问最后剩下的人是开始围圈时的第几号</p>
<p><strong>思路：</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JosephRing</span><span class="params">(nums [13]<span class="type">int</span>, n, m <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> front, rear, round = <span class="number">0</span>, n, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">// 队不为空</span></span><br><span class="line">		<span class="keyword">if</span> rear-front == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m<span class="number">-1</span>; i++ &#123;</span><br><span class="line">			front = (front + <span class="number">1</span>) % n</span><br><span class="line">			rear = (rear + <span class="number">1</span>) % n</span><br><span class="line">			nums[rear] = nums[front]</span><br><span class="line">		&#125;</span><br><span class="line">		front = (front + <span class="number">1</span>) % n</span><br><span class="line">		round++</span><br><span class="line">		fmt.Printf(<span class="string">&quot;第%d轮：%d\n&quot;</span>, round, nums[front])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> nums [<span class="number">13</span>]<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> n, m = <span class="number">12</span>, <span class="number">3</span></span><br><span class="line">	nums[<span class="number">0</span>] = n</span><br><span class="line">	<span class="comment">// 初始化队列，入队</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++ &#123;</span><br><span class="line">		nums[i] = i</span><br><span class="line">	&#125;</span><br><span class="line">	JosephRing(nums, n, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Josephus</span><span class="params">(n <span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> n</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (Josephus(n<span class="number">-1</span>, k)+k<span class="number">-1</span>)%n + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := <span class="number">12</span></span><br><span class="line">	k := <span class="number">3</span></span><br><span class="line">	res := Josephus(n, k)</span><br><span class="line">	fmt.Println(<span class="string">&quot;结果为：&quot;</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-一个单链表，如何求倒数第n-1个节点的值"><a href="#3-一个单链表，如何求倒数第n-1个节点的值" class="headerlink" title="3. 一个单链表，如何求倒数第n-1个节点的值"></a><font color=DarkOrange>3. 一个单链表，如何求倒数第n-1个节点的值</font></h4><p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	Value <span class="type">int</span></span><br><span class="line">	Next  *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNodeLen 求单链表长度</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">// 	head：单链表</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">// 	lenght：单链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListNodeLen</span><span class="params">(head *ListNode)</span></span> (lenght <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> ; head != <span class="literal">nil</span>; head = head.Next &#123;</span><br><span class="line">		lenght++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> lenght</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ToSlice 将链表转化切片，然后直接下标取值</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">// 	head：单链表；n：第n个元素</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">// 	result：单链表第倒数n-1个元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToSlice</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> (result <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> values []<span class="type">int</span></span><br><span class="line">	<span class="keyword">for</span> ; head != <span class="literal">nil</span>; head = head.Next &#123;</span><br><span class="line">		values = <span class="built_in">append</span>(values, head.Value)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 切片长度=链表长度</span></span><br><span class="line">	valuesLen := <span class="built_in">len</span>(values)</span><br><span class="line">	<span class="comment">// 判断是否会越界，左右都需要判断</span></span><br><span class="line">	<span class="keyword">if</span> n<span class="number">-1</span> &gt;= <span class="number">1</span> &amp;&amp; n &lt;= valuesLen+<span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> values[valuesLen-n+<span class="number">1</span>]</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FastSlow 快慢指针</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">// 	head：单链表；n：第n个元素</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">// 	result：单链表第倒数n-1个元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FastSlow</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> (result <span class="type">int</span>) &#123;</span><br><span class="line">	dummy := &amp;ListNode&#123;<span class="number">0</span>, head&#125;</span><br><span class="line">	first, second := head, dummy</span><br><span class="line">	<span class="comment">// 需要判断是否会越界</span></span><br><span class="line">	listNodeLen := ListNodeLen(head)</span><br><span class="line">	<span class="keyword">if</span> n<span class="number">-1</span> &gt;= <span class="number">1</span> &amp;&amp; n &lt;= listNodeLen+<span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++ &#123;</span><br><span class="line">			first = first.Next</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> ; first != <span class="literal">nil</span>; first = first.Next &#123;</span><br><span class="line">			second = second.Next</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> second.Next.Value</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoublePointer 双指针，优化后，不需要判断临界值</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">// 	head：单链表；n：第n个元素</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">// 	result：单链表第倒数n-1个元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoublePointer</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> (result <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> second, first *ListNode</span><br><span class="line">	first = head</span><br><span class="line">	second = head</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; first.Next != <span class="literal">nil</span>; i++ &#123;</span><br><span class="line">		<span class="comment">//间隔n-1才赋值</span></span><br><span class="line">		<span class="keyword">if</span> i &gt;= n<span class="number">-1</span> &#123;</span><br><span class="line">			second = second.Next</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//头部往后移动</span></span><br><span class="line">		first = first.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> second.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReverseList 反转链表，链表反转后，未反转的链表的倒数第n-1个节点的值就是反转后链表的第n-1个的值</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">// 	head：单链表；n：第n个元素</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">// 	result：单链表第倒数n-1个元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReverseList</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> (result <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> prev *ListNode</span><br><span class="line">	curr := head</span><br><span class="line">	<span class="keyword">for</span> curr != <span class="literal">nil</span> &#123;</span><br><span class="line">		next := curr.Next</span><br><span class="line">		curr.Next = prev</span><br><span class="line">		prev = curr</span><br><span class="line">		curr = next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 遍历反转后的链表，然后取出第n-1个的值</span></span><br><span class="line">	i := <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> prev != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> i == n<span class="number">-1</span> &#123;</span><br><span class="line">			result = prev.Value</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		i++</span><br><span class="line">		prev = prev.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateListNode 使用slice生成单链表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateListNode</span><span class="params">(nums []<span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">	<span class="keyword">var</span> head ListNode</span><br><span class="line">	<span class="keyword">var</span> pre ListNode</span><br><span class="line">	<span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">		node := ListNode&#123;Value: num, Next: <span class="literal">nil</span>&#125;</span><br><span class="line">		<span class="keyword">if</span> head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">			head.Next = &amp;node</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> pre.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">			pre.Next = &amp;node</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			pre.Next.Next = &amp;node</span><br><span class="line">			pre = *pre.Next</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>&#125;</span><br><span class="line">	n := <span class="number">5</span></span><br><span class="line">	head := CreateListNode(nums)</span><br><span class="line">	<span class="comment">// n值如果不在临界值内，返回0</span></span><br><span class="line">	toSlice := ToSlice(head, n)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;链表转切片，链表倒数第%d-1个：%d\n&quot;</span>, n, toSlice)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// n值如果不在临界值内，返回0</span></span><br><span class="line">	fastSlow := FastSlow(head, n)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;快慢指针，链表倒数第%d-1个：%d\n&quot;</span>, n, fastSlow)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// n值如果小于临界值指向链表最后一个元素，大于临界值指向链表第一个元素（倒数第n-1个元素）</span></span><br><span class="line">	doublePointer := DoublePointer(head, n)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;双指针优化后，链表倒数第%d-1个：%d\n&quot;</span>, n, doublePointer)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// n值如果不在临界值内，返回0</span></span><br><span class="line">	reverseList := ReverseList(head, n)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;反转链表，链表倒数第%d-1个：%d\n&quot;</span>, n, reverseList)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ToDo</span></span><br><span class="line">	<span class="comment">// 将单链表转为双链表，只需要找到第n个节点，然后取出双链表的第n个节点的上一个节点的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-多协程统计10000内的素数"><a href="#4-多协程统计10000内的素数" class="headerlink" title="4. 多协程统计10000内的素数"></a><font color=DarkOrange>4. 多协程统计10000内的素数</font></h4><p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JoinChannel 协程负责将所有需要计算的数字放入intChan通道。注意：全部放入后将intChan通道关闭，这样消费者通过for-range遍历时才不会死循环</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JoinChannel</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++ &#123;</span><br><span class="line">		intChan &lt;- i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CloseChannel 判断工作协程是否全部结束，如果结束则关闭resultChan，以此来通知主线程</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CloseChannel</span><span class="params">(resultChan, exitChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">		&lt;-exitChan</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(resultChan)</span><br><span class="line">	<span class="built_in">close</span>(exitChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calculate for-range循环遍历intChan，并计算是否是素数。</span></span><br><span class="line"><span class="comment">// for-range会遍历到该通道被关闭未知，当range循环结束后向exitChan中放入一个标识。表明当前协程已经结束</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Calculate</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>, resultChan <span class="keyword">chan</span> <span class="type">int</span>, exitChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> v := <span class="keyword">range</span> intChan &#123;</span><br><span class="line">		flag := <span class="literal">true</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">2</span>; i &lt; v; i++ &#123;</span><br><span class="line">			<span class="keyword">if</span> v%i == <span class="number">0</span> &#123;</span><br><span class="line">				flag = <span class="literal">false</span></span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> flag &#123;</span><br><span class="line">			resultChan &lt;- v</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	exitChan &lt;- <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 任务队列通道</span></span><br><span class="line">	intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1000</span>)</span><br><span class="line">	<span class="comment">// 结果通道，所有计算的结果全部放在这里</span></span><br><span class="line">	resultChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2000</span>)</span><br><span class="line">	<span class="comment">// 标识退出的管道</span></span><br><span class="line">	exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="comment">// 分发任务</span></span><br><span class="line">	<span class="keyword">go</span> JoinChannel(intChan)</span><br><span class="line">	<span class="comment">// 开启10个协程来计算素数，并放入结果通道中</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> Calculate(intChan, resultChan, exitChan)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 开启协程，不断从exitChan中获取结束标志，当获取数量达到10个时</span></span><br><span class="line">	<span class="keyword">go</span> CloseChannel(resultChan, exitChan)</span><br><span class="line">	<span class="comment">// 主线程range遍历结果集</span></span><br><span class="line">	<span class="keyword">for</span> result := <span class="keyword">range</span> resultChan &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;素数：&quot;</span>, result)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-abc组成的字符串删除"><a href="#5-abc组成的字符串删除" class="headerlink" title="5. abc组成的字符串删除"></a><font color=DarkOrange>5. abc组成的字符串删除</font></h4><p><strong>题目：</strong> 一个字符串，只有abc三个字符组成，现在需要删除字符串，删除规则为：每次只能删除2个字符，删除a和b或者删除a和c，字符串能否被全部删除，如果能，需要多少次</p>
<p><strong>代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Solution</span><span class="params">(str <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="comment">// 判断字符串长度是否为奇数，奇数则无法完全删除</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(str) == <span class="number">0</span> || <span class="built_in">len</span>(str)%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	a, b, c := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, s := <span class="keyword">range</span> str &#123;</span><br><span class="line">		<span class="keyword">switch</span> <span class="type">string</span>(s) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;a&quot;</span>:</span><br><span class="line">			a += <span class="number">1</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;b&quot;</span>:</span><br><span class="line">			b += <span class="number">1</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;c&quot;</span>:</span><br><span class="line">			c += <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// a的数量等于b+c的数量</span></span><br><span class="line">	<span class="keyword">if</span> a == b+c &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">&quot;aabbccaaaaabbcbb&quot;</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;结果为：&quot;</span>, Solution(str))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Go编程题30题"><a href="#Go编程题30题" class="headerlink" title="Go编程题30题"></a><font color=DarkOrange>Go编程题30题</font></h4><p>链接：<a href="https://blog.csdn.net/weixin_45604257/article/details/101649973">点击跳转</a></p>
<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>项目经验面试题</title>
    <url>/2022/10/28/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <script id="hbeData" type="hbeData" data-hmacdigest="e7b24c9d384c858a487df064978021e7dd5327de63ab378d65d2948a1f006380">77cc46b16fd309e8f5b42a0dad109aa88a81e87c9c9da4bbe0e82fdb8f0235028e78338c19170f99d2383f3abdd4e98fae824092bc07345b49baf095afb7f81b15541b2aa5c2e525ab4f690d3d3c0dc1f5b84fd6c518e5dd3fd78324f232157f1218680b54feb74870c2513780c1c92bb30736d289743200ee95bed39e9c5eb21b440793f04a13b2ecb05b08e98a5cd4ba622cc7d1b084c61f57b18e4ed7201c81938310c187cf1294a9d5179663a96d1f39e0755e6bdd6826585d2f7c6598d4db2d3e1b7c066b83416c55b8dae7c9aee7cd4e4ef5d4cec3b7a7b74a7c50a59ae38afda3a840f2ccd997abe7df69d54bb243898fc195bc72975b0e822486ada70ec1371e77aa2223b06187ce8b3b9b46305728db810f25f10e323df322be2bcc90283d4653944f632655f03104182a2ecfdffc371a651db56703722c1b468078b74cbdabf0c98fc31e488bab5dfd7d51e2e7f590c65141b79b7b5431d96860316a1f9fbdaf8172bd13c0170dee82cbadd1481d0beee659369faf777cd9577a49705b2e0d88fc4911d8140ba6773880cf15e7466f925ea49ed54effac77dac7e1ceead081b00452cd224fbcee4ccdc246ebb240411a3100927773d27df47d48f5c2066f593b610d54b6e7f5d664f5e0b2192065033babba923ce6974611ed5bcb4dbcf328504539d6a52efc398e6f0c2098a075f47342f7e3dc8ce988c9b094e0beb6d8866250cdbc6e1c9d355524aed80462a723b08b5ed37ae9def91fb89485bc043b18f48d0e9dd175f74ae0098bfd2cb17b270908fdfcc5b30d2ae094f7f146734ea25a763d01d72954f439f0b4cfe6b65609162f7216e29c97c433968afe97ab3a3196a475ac8693b0c1ef73a4bd1c1c60cd7f9e3e92443bf69c716b5d98abf1c67174d1e4bacfa8b2f17a1bc2270f30661e2f4f73a8d9ebcdd66ba2b84e74e82e127593e012f6810a4afa5d83385fc32374e95bdc479dba6577bb00e890ba6400174597b15533699eaafa4774134da61bb8eeb4344071784e62254bbec42d4bfd37e858e2c6c71ae028917e88815fd8afb6ae2388d7e44ffc1dcc98b8b7ffe5031f0dc018d6f6e9a9142cb5e437b7eb7345c969a3278f6c513a5abe03f615fbb0dafb0b4343e286ef612fd570caa4fe82ef344910769e56f270617d6dd602b08ff561e5365099946404736fe85402be330290d3f77629be6cb92cc454f67a65c04e6e68e1940014307a5c290e924a5359deedb76e42a866723ae4d125e56fda410b5c74189146db466fd44fda6adec44b56f4ef83b548c5d360be3330ae263fb0b7b9620333c228414b68b1772084156d8e5dd912a96455eec6d541deabb5c08451bebc588b68d8a6efd86715a9d8977cc208a86e27d59e752e8cfe88d8aed9e79f7c21a2e9e376f94da703e1448fd4871002dcde7594812858a6e5ad9622b74d8b2f955304b8eae6eb22c067ef7c935731928ceba320fe7f6e5a77994db0b940692234ec843d687aae462ef30766e922b453b7dd1f91ab3da9a506c70ae0c38b0e66e6e4bb3181f69f7f20cd25590aa23c69dae8dca2403a5922a26a044d57292c02d84998be1560815f2f842270c04334afd71c6d76eb8dcaf95497da786ff1be59f48b030b5978e78260e0623d1988ff324075e1e2ef5d3e5e245b503f2e4c0ed4ef176b8af972b7304d87f76197bf94ca45302c34b3ec6be66cc6c06ca539a35ce143546afeb038a147c058d8abd1b5d1544a458f2110229c3625b8ef1b57e3caf7e7d2c2d8f1a17a1d74e4ee87b53690f67309b823696926b9349a7eabab5eb7f5b885dfaf3123cb8ee2486ded6362b4ce316a21ef6c89f6ebc9f867712bbf72dc70370d977773c6c3dce687eed13e59fc1f3e30abfaef1058f7eef146a0bbd8faa99df8fc0f8f36d83259227965d0ae8ae44d46af4eb8765aead150b172beb5312d08c5b60499700e539d59a406b7f68251613478345afc16d58f48d8a30882fd0701167339f68ef9fa35274072c43df8872e458d042ee32b57d4db5cd080a8bd7d74187ff63f167761669e2ffee8c91056cda31b370725807a797a0d111c188c5a2753d21143c48d1d012da447f0a8f2dd86864fd8886c56f1931d67ae484ffd5dd57887be242d68cd18bd3407f932c30154b4b52f77dad180f3048c5c28f0f1973a4c925aaba482fbbb5b3a123fbcc6a0c9516ced471e1d9ae166376a9cc48a397e8721d7e303a650f7a5d822b751cf061ea2369d07bd981c6effef6d1ce431ac578d4cb4ccc41e65ceaf334acb50774649e5d2eedb95c75568fc17ec9ac295cafb6d8fca1ea37f73a7de9b6efe1b8f2f092b1cec9dcffdd456e6c9b5e23a476b1b7759565615db54304628bf02555c7676902a5a7a7cbf66a069bce43d6682c4967041b93d87e89187ff7c98d6de4d8dc140c18093164def5c99dacb304990c4f39b5757b8f6d863f3b120871390c13921ddc178d2ad402ea2848d0e8d61f3fd30a4c777d56998794753ae44c9d623e4470a2db0bb9e0cf1ab382dab21e5b23a8b6c55142bea833fe4347f973cd3e37a8d25f573ea2c915e9ff45ca78fdb00e3bf654c9a958f742cff3c54357b8616573bee35e15e5daf440ae5787d2ed5ce26f43320058ee04475c9a5e814a6252e1f123eadb55241d462c1c02882f3bba3f6b09406114486a4502c3698d7ac6917cca03fd35ee984623d6733852caff7507f68d03bb6b14cf3f9bcda73b5e727795c40bfe8756e7aba4f8e29975f3d51fae8a36edec997e26bb0da2c5ab62987b1b3eb9b85513dbd919aad2494f6e7eadb7c91f1a49823b4c5cb9ad3eef8f9843f7243f68149011c41c8bdaa3931bb3b26d75e8c750ca0fb828cb2e11fc736b36e1e2ddcaa9aa1f14049d81990c8f57a53922b54e6417f41b65abd57d48468e75557c7866a74c8570ad73697f2092f531858f3b6599f450e9f130d507c5953d3c255457dda0c18d96284854fe488bcece4a3d24657bf1189a4ab58ebd4f272e500af94f87df6210e1d32122f222af2917e4f46fe05722dc5a55a66d8f12365e8d12199b854682f0ea1990a125d21a6108946ae275a587be8376fbe707a95a2390163a6031e4d7b2d96387e9a023ddbb77343881fa1680ad159b83fda204a4b763e9a1d013c3c3c5338f96ac2539e63b340e4f93b6d52dc961dbd722d48fa2ab7cb921cef46f7d34ba6b0e94ec9f0942e63fa04a87e65f1ffb197419136926d8b345471cea9cabc5e3187f68e959e56d491322c1e2fc070ee079e21145b2169e9512aaa2bb537c42035b571576943f400ece0f56534b7ace56772e2345bd5d39aabc381d172605cef2681e0f9444827a614aee72501c7ca12d19b277ae75100e04322e40e67bfaabfa90ab659ffafa9c6f8e847c2032f14f60ea0699c3af549135db1cb4292b03e85b9f1a8f72377bdc19cb81334398d5c2b4206e0bb562f93fe2854c93163e44feff814f80d622b7eb16a5b494ff6aa1d69ffc8f30d8b7aad8337ba7cf1a787d4b84edf444821932587043a8cab5eabd459a99505e621b397d125019ce4d73403cacd91521448ec67975d9129968d2411aa0eb5d09db4795ca6eac07486341efb874a1eec79be8e597086ff3f0aa80915462577674bf552b9d73b9b5c56ed2d8ceb8137a9350c9002440ab06f67c4760f233ccb42c773251d3529918740b26d36ae5c27ef24ec0d9aa8b8ea5b047d935c9e9194ef3d7d29375ec1e5dc66cad4dc3270816047a22198d3742a416eea6079b290ff5493ac91c6dfff392794c9b0cb4958f5c900cc0afb3bba03d8360938f61c3b32ae56088d8301c04205743170cf5a12f1647f2d65a315f0e78e8a4b42b78071138ac140b5edf645fba90b28c3241505d4529ce6993f131571ce3b2f5331e702072c77da823844d2abc1aa2d23ba8420c9d16d4faf2669e0203c4f99a091bcda0be1d47f45d7804cbc2104e3a4b506bbad6d0afd747f9c2237f7de5e8a03a56923198f421961cb800697539507cd40496c5d0d2ea4bf0b503c62fcd1f9945a99c3390a7d49a69a314d13ac203cf27d0983ed36678eaaca70edc145fe0342a0b4fe61026daafdfb157aaabe657eb9149448109b22eba134637978652db94a6eb301e7bffc902d7da48573deb2fefa000af74fc213a9656450b1da326be6c3aeb6aec1dcb94425977e7a803e05cfdc9288cf4d8c7e469578758b67503372fc87d54fd976a46c7528f1df19f5f5270cf36482f479d4f86b19ba603e280398162a122b3bbd965fc328f04d0310410ac0734efa75d92905e68207256fb440f0b68a2f8803bcb8caa1bcfbf116a620d8f2c9fedd33740e04a8bce576daaa96b4e8791dbee5475c97b6ed20c15e2c5a108ad9d349c6fa05dfdfe4587104168f402f6e8819f279e849657fdf4254797cbc44b05ff697978cb2bf0bb1a6fe4c63941e072406514933fcffdd0e7c116e26420738054639e02af0fcfca711601a34e421eb2a484d3da6c9b4c559d27436aa2b83a1bd17bbfb89db828dca0d614d0de627821ab82d1402dab0f0a79f784e1c51a6531da74911e47e2ad9934c4e74d23dc0da27cb7a9cb77b00d77c5fb7e51ff082b1ce3f4e66936ae525a0990b75cffc3471eefbab27945ad97aa0c2346d0ac48591d04dd6ff539aeea8a8a29b495efd31deb869e4ea6a6b005da0c2b931440f5c40a2d9f03d52b8ac154d992aac6039359b957acdbbee524aed96eaa813073406cf678c350ba6d88eed9ae06139cd8963dd1e8696b6a142b659f5ebce73127510666b85c468b48c398d1d698846dc5d3b2130f098fd9fe29258cd48cd9768bf0a682ab657a42c3e7021a4e1b9bd8823ee90908e602239cdbbf8c9be002c1297f5ae615255b102baf0f277a415ca78e34cd81cb9c021a6c662fdd1c9fb67622057c3264b05da1a7e14130215069003e89241d450e72d8674d9b45dcfbd624ee01bdbbaac4024b8198bd1f3e3dac0e43d373677623ecddf1bfd96c1f462a9508bea581dc8c9661e923e0dc0bd7be7210e6821854e9f0f10a11e7ebd22abf3f138e9c6a92795e12a7250a5106f865657817cca02e68ad4a2e4cb62cfaad0e52a09f74d25dc91919586042d5abbcd151e3f42575818fb1f9a3785c73d7b0c60814b30225099b3eca48fef6892685941be7c8e4e7f090ab6c6dd9036203b3aa99111b553ee8872828200b21aca767ca9bbafe7e5f12ce6b50ef9ae85bfcc513b516901beb6741c46bd779e7351bebc5222c53568da1b278f6a92a55fd0720e909e670566f2cedba21641418cdc4f085715b6dc03bfd3f19c0fa4bd4d36eda7b53e3d57a136777009442403680ad41739916b3aecf9a0cbc63db158b9f3cf1da0fdda9329315da81ccd0a62df5f9a5dc6456f89e28e991558dbb3c01e19b99b6d2277f04a61c5546a4cd26ab6bb87411a6d415723a17ce140fba9b126fc5a7f272f3e530e0b3ad3b4d96a4a7deed521530221169365c0d4fad2021d22f6a7b150f6cf44acd71be98e96e6f7406d059f25a5be3a5a63a81cac627782da732c4e0edecc8addc5ddb887217d3a7719f36b443e4cc22f6b6928d611124ecd47c44814e16388280624b7778075a2386a2c718e15b232e3e902540b8cefbe3995894fefd05071aad9123d853ab9e6e8edebba727509a2ef593f64090398d9ad50ea398a574187d29b4953dbafd45762d5f3f0866c028b98956f5a8d32ef1a21723f260034b730350ffd5ac429ee988cd9aea43d768b197cba5466088164e729a53288117196ea9d40d299ac4b8c06422ae5a85fc05f88889c16bbd8f2f74c3f117f1086583fc8f4f2a9bbe40213022556d2208696a093bd326f7b298277c09a9b2288f26d2fc88757e379183882aca04bcddf3fa92eaaf855fcc45412f1d76297d74c98f29c6d52c30cecec38c74b0883650fc70389c68669b6e88e6d054ec3f8c418e530ccc2a89acd15e40e864620b67c421b9105887d396340f02aeefa9a5c8fdc76f032bf2bf141c3aabe0eb2f00b598fc4e1b913e79eb66d15d6a4c41737af9dd49c610bdf8334ecabe0597f5ede7c87c9d31ccc763f91c3d8b9a41bb237acb7603e96a9b5fbd1a639385006b0b20be9e7a5ab77e4fd428c8c9963a0e8001afce92926371fd2797d7834190cb67ee6155279888c524992f5735c479e5bd2797316300cb600c041c633ff4514519ff58b618fa850522e1ab9ed0687b2ba504255d52e29b22966495fadda71b874ab3265074722ec9c92baf53bcc5f021c9f01afe3ed064c6f2d1052b4e3fc3b0429a6b5f3939167f3270bf8c8d5addc6e954fb1dac8db46ee0a465f3e14e13a55917c6abd06c7a0e60089dee9c3d6827e6c8d8e44db78c6a6c2a026a055cae24fbda379617061e4fdd0e88ebf5a82dfd841046c5be2db28fc935f7b112251aebb51abd62f7b102aa2c93cb77303c2435b27150fabf66066e22d81250ae4297efa37f98ba7b1041e1e07204534671236e388525b6d79d86404032ab5045e365d008624ba70f7a613ccef4b5800bd2173c49f20bee9b967be6296170ac7a8a90bcd50b71e33eb1f1d00e641411f9650838a18d507994ccdb83137b98f53b56427274325ce4072996b717b1c18c9d66537fb5679805448927d8cd2bfcd832a3d74a4bcce3420545ec11537f80742b581604e6fea0425cc385066f7dc6b6e8be50134efbe3aaacafbe95f9c49b24106379494a0c278815d95f21c85696a2e02823aac66d9d49e445fcc88049dbf7a21c35780559846217485890c7204a2949c00adb78a95f8f95c5c7a078b88f877dfa40bb7066cce8220996549059c198b65967b54f6d4690583dd8fbc576c7a7c4e85e2176d06eefd82f9e373fd8090912c5d8f66d223941fec8637e8124c005a1cfb904a48456fa67118fb43ace0c9243dbaaa0f8c6f52bd07bc90c96bd499c948b29d7259924e8d35ca2df4398fc3edc1abfbe3b2626b1fd696a1da55ec48b7f92eaa4e3af10ae058db7dafdd896f69522a5e5105c510ca94f6277b2bbe496321dac192a63d503863890ce9fab26339ce637b63acef701389dae5b442d26d07221cd932b04b764027cca9b764fc7ce48bf1c1fbc1e9250a9a5c95a20f12dd1aeade6960ad632ed6d1ef9874a189c436f9c3a69c72a96f2d4a0ec95be366995fac29e94006c67f80e5439e421a9b5994ca814e576ef27b098ef5dae72f4a5330ae9fbd331e25b9cb68cd7c8229293b3f42bbfc57c283338adbc6592488ad4351cc155ff632013442ef43549fa705c02ab3465acd44d5f3e512da11edec52d5e60250c2c19d9029f70515e19f8ca9a5976ed9dc4bc1ce886c2a30c247e5d9c57f8c8c99e0bdbed543fb3b9b5c364a8b8cd258fa0cb78f5d786d617ce5c75dfc53d86977afbb754a070a2f8bdd62bfe0bd563d0a72c36ab372bbd9b0daee1fc36e9b875e0b2aefeea0e26fb5d21cafb94f84c1bf6f2b0704c517f8e32d9bd10f5f33b6282153564d4de4074d3f92e69cfe0841d1cbca334bef819ef6ac74659a3fe9da0d32800e28c5717cdaa260d37a71267f6c56c2812a6ed68e905156de64f2f35976274f47a69d1e0554d65048ea12d86cf0cdd595cdffe128265a8475af06e0b8c1c088b4179f8e67c786914bc9a9cbfc3bba33c5dede0cd1cf45cee8a5623a36ab7a6081d368a88b6975417108a826cf820b64893a69071d97d34456a7df5f9d027e96e14e892c033af44439f5f60f2a20015669587f3f8b3c3e772f866fae11bc867edea5dbf12f1e2a3a1cf0190c36aad0b0be2733a36cbd819f456efed1dce4a4697c7c4edcea049f6ed4539f9a2fa2e13422065b3f87e4a2d9b1cfb32cbe95893eeffaa60fef9f03f17f49239070c328efe0c7e2c21412810eea2eae5796abd20d78217d60a5babbe73a3b68f933e8cd6d27b0c8ebdac38ccc81464ac566a2aa8dc87aa0eb476ccee067ce68929211d08239b22daef6f6516bf4c2143df1cc3d42e48d60c84752dff7305a540f45f815b206060464db16e29d3cd7e900966f5af198dbfdac81d19d2c8b08734bc899e740b30ea84af0389e43f33521499a6c5d4e505bf22da92a4496fabf9e62b2c3fb961e0f7330320d3b12b7bf28772a985e090edf5087935181e10ec1c0240f4e2a627de9abea03a4779fb83385f941785db67c2f1d6e99986446831a8c7a1d30dbff60175163d300189e0d849b6308d558b139b23dc3a0255d8b879065d5dd3e42f650385a8d2249a40c45f9830a0007504a7ad3ebf9018c6e9460b0935307dd14f319c33a83d7075cff931691c53cc8afa152d5d9e464ba399bd587c5138355f4885d5907433e4bd1b211afa164e356dbe58c72a5efd495d0d792429cbec40128db559f9f97680adc1e8881a74d589e4437925f40ac3e60ad7c97961601dcd138893935d18ff2792200930d0ddf9515eccd8cb398608044b893d3429d8aba933d514a018faaf0e4a6648406682066a279dfa5bf0c0ae39915bbcb55da8d7bb9041ea348f406d229a6e6069a86b116281ae3bc64d6b806ece8b0568eb646c03cf45cec67994a5d6dee06e1b3caed342b8c4069fa50e3e74e808288c7cd226bc96d92d242dad54cd823533cbce3b5defc7208d6b8df81d6bbad89c25a286745cb32fe42c88d3c2abb6d2ba83de697139e1472251f29d7377da2c5b8f08cb8ec366eaac8f0e21f22161eda044e8ef0bbb9d1d3dbc5e9439afa460aab53411969d301d53760f242c863421bc239e21b057b2785e899b46c5fd2d9869197204c38147e9544ab2f55a379738a4fa1ba6fc75ffc4b249b02991ddebaa1a18ee3c7d562851eb50b529516ac7117cd8e5e853af7415ef0720bfcda86077046400528acae4f821bb34b859f1b59909e35a7639c180c08753f27de2419d16cc391727f359406c6774bbb233c3083d56253dbbac0cd11d4aeed045c3cdb3bf46242ddd9127511bb8b517e0a6b90d8ad971c250d040d83108027048a5f3b936d8cb35df03510f3cf4513a1218bb51323b9613cf1e0737abba3bd1c9598617a4ff92320ae53ae744801049db41cf26b8e933737e89b8e850e45598d684f8a84e51c4bfdba2bc187fd37f06f2819dc7af4546c915e747fb7f5f5c8f619e359762795094a7b43919510663865d1c8dccebd3a645b21711a926e780d144c36092708567976073ce82dffba6e8ba4e6d9e3e978eea8d1e046ba96e81911f1fcf767c780389becd67e7a8ed72295ccb1f4538d4122f4d79a81885d589906b0bf582fe09afa9cf00a7e79a46dbcf94053b3594ac6aabef0e2dcdfac1a8863c24a5e196783d259f1ed0011ee0c6f5027dffb024a5c4cc778c39ca2f7f2b7f8d14e13b170d568107628f8b12384311fd0f5c94a38170e04d9f7c12ad5952fc49669cd83b3ed01d171ceb5c5f3e5e3e230639225619fc9de6c21eb9efa94fb082740657cae75e4471e421c0ac7c6484300e6202d005abb8bb3f8b6a16b9aadbc3636d62d53240239723bbb7d0c5757e2de64418763d73d08fc6f5bb050cafe38d92a9daae87888e0380fc970df6c8f9ae28e2fa00b9bc2d6d6249fb236d2d9e07cc6dc144f67eced9311d7acd560b107eb3e82865e9509b17a0bc859756d5e8a8088ce139283069bf043dc8e03b538f3629f60e8b72c226c5175a92df9a200d67f20730c074587d1f4df0dc7273882c10f9efba5f19553f3d462792bf4e21d6e59da5abce2c086ca873621257f561cad668501d974d54305adf8aa5dda493301546872c514b655e36ab7a2a830015949d89772fe3db335b3db2dcf7f8502ff747c3e1cce329e1a298cee59bb52fc8f02ed49058938a6b82ba2cd8497dfa727093d9a641787ccaf612d1ad399779bfbf72bd4ce9507345eaccc2927fdb4a0d9ca7ef78a2f49321c1d8cf4e6eff816cb5437c46c5d44abd45d7a525f7a524bbe77d86c636eedf6f0f33ad97ae7d43c33488417a5bcd2617598d431731d295d79c61245517ac696553a7f44aa88cebd20969f62fd03e113157f237b65c2f717b12c3cefcb16916d7af69f9019c02f04310bbddd62e8faa1fe5e3e87cc8bbadd17eb48e2508d908a9ee91ff137a1c459564536b7dca89269012efa3eb33c099b2cf1e76330b1682080dd857caed841c3f0fde13f35052d5c75285dc080a46885ea7f76314d9920db3fdd1d8944a48b511d433bb34691d0025b8cbe93cf19c1b748fb5e26a95526d4b2db7708522b59dcecdfe6e24ac61b47a34bf77cbd6781b3249d4f1f021643c3e52555721b7d40483d933fc3885040cd27080aeaf9c52c2816b19355924c69b81b43fee7333592aa9e220a6765e8b49ee59cde7c97666b1d8dbdc115aaa44a65bcdeef3db81fc3a0dbb5c3f01aa2a0866c683a65af60c49ac0258ca663538a45c7f3496998d59e6787b63f7b25d66c10e4b06b7ebcad934bd05a6fc78676a65dccb4497576d6b5c13674499105003b0090ac8c3bf21b93a9732d437a41ae616688c0f0df140218a0cfc2316ffc610dd2a0be180bca76c7cd74447329b6ecbdddfd1d0842de8861b8c2390a8d6daf6d44745e71c3aeedcdaa7b95bb1253131a8364d5761e00848bfcce2ef1d274367de5f63228c1b053b38c724cca73f97ab6f6f5a6a34985fad851d1113a860d691000ac58438e09a8f161a3f3ae4e86142de4e2ef7ce60662470e6af443e1334fee4621a9bdfffd4d0ae1d62d8b278bc73860ea98ea314eeb1cad65a2f992f4300802af940df171eb46f2f09a7bff69233f9e17cc113fe1dbacef899dd47ecbcc15387222660d96676b4f015b0e19545c7c506126ffa0dd130a15436c6ff2fbf3d012c137f7c52a3579f45ba99da1333927fb7abc0653d01c1d05fe675c7145e77e51dc39ed1454d238c098e82298efac88b3de1a8b05fff6098d2f87ac726692ae3a379b443bb32692de0ddc27707937c62ed4cbd7c68e8b33ef1a5263e3598803ebbc2968840fad67c1be1a0b770c8bd81484450c28e0f9c41884b3dc21df09c52cc738a3d77a84c74e45ec66e6d30ece411c5a1c1433c79f6c6f79cca41ababc2df24f17953c87ace38c931ea878fdbf5ef4290c9807a36040e96228f74fb3657f69f5679ef39e0a6a07a2f12bea94aa8cee1fec853962d2a7da3a27ae8396fb1345971efae375fffb067022ae967f33e1015c89a6e0f203c31b96ec684e5ecb20f233ab0d078fd049ea707d4db81961950e1a1842d89a3e25b76f6183c63884ee7b9feadab6814a0e895bffba465e06831edb1c240c428e1ef6022a23b66658b0d9879e5ac41cbbb4c2ef24a4a52cce012c6e4486fdfd98166604db67deed66f6c8bc1572632ab0448bf92a701d65ee2f36d2b63d992dab1af2eb4334aa637f2b2dcac02cccaa4e30c837ba3687268049330e3c2415821bf9a29d5281e51234d7ea3bbcca0adabda2ed9b1646728497cacc8b0ec50a3c1f7618714bfe83a6674ec0febffcef1d5eb95c3d54a246ae35117a3889f52ce54fdae37c7c9c0b8cd3869b247cf7aff7eea798e5f1df98e3f2fd60b3f844f884702c99b72b34e9a3d17a365681f0c0dec3b9697a545f77b57e7dc7d73b4690da028183ae9a2e8d5ab85b22bfc70186ad5032d53b9896dd9085ebf7b64ed1bc51c4d9f9633b453bb2bc7c4bdc00a7d38f6e2e94828f52184c04b534a42ae525f7e6e63821adb957a37905dde9c7bf6342267011e016a8e87448f1dce9eb7aa00f233b28fa5364f06a0d55a6a2c35aa6be5235b91d9631184b4f6b9d52e784bb9efb6d2973a8512b465be226d05006c782e5fdc15fee696c22e04a58b6a26fe8c8a3a93b8184692d05b565d1505ecd5a3cf8a21cd6eaeed91a36d8e1c00a0ec5524e99c739b4b3bddf7da4feb43c19ddb47e89240ec2a14d3878672bce002102ff1e61665af0ef1acc55d912b4b48070720c6c8de9c317a862a64effba64e0d424047905f97701374e255ff2cc2a9f929ad23f3997222e71ac450fec7349c90fd461a18db3b7321d956fc225116a261f470619f3fe7112d881894e98070bf6e7d9bbedd3412fc850090c2769</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>加密</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络面试题</title>
    <url>/2022/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>计算机网络常见面试题</p>
<h4 id="1-OSI七层模型，TCP-x2F-IP四层模型，五层协议"><a href="#1-OSI七层模型，TCP-x2F-IP四层模型，五层协议" class="headerlink" title="1. OSI七层模型，TCP&#x2F;IP四层模型，五层协议"></a><font color=DarkOrange>1. OSI七层模型，TCP&#x2F;IP四层模型，五层协议</font></h4><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7m5w06lbkj313n0iawpi.jpg" alt="69.jpg" style="zoom:55%;" /></div>

<h5 id="1-1-OSI七层模型"><a href="#1-1-OSI七层模型" class="headerlink" title="1.1 OSI七层模型"></a><font color=DarkOrange>1.1 OSI七层模型</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7m5mu30e3j30v41834qp.jpg" alt="1.jpeg" style="zoom:80%;" /></div>

<h5 id="1-2-TCP-x2F-IP四层模型"><a href="#1-2-TCP-x2F-IP四层模型" class="headerlink" title="1.2 TCP&#x2F;IP四层模型"></a><font color=DarkOrange>1.2 TCP&#x2F;IP四层模型</font></h5><ul>
<li>它只有四层，相当于五层协议中<strong>数据链路层和物理层合并为网络接口层</strong></li>
<li>现在的 TCP&#x2F;IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层</li>
<li>TCP&#x2F;IP 协议族是一种沙漏形状，中间小两边大，IP 协议在其中占用举足轻重的地位</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7m62vqibaj324q0v8amp.jpg" alt="image.png" style="zoom:20%;" /></div>

<h5 id="1-3-五层协议"><a href="#1-3-五层协议" class="headerlink" title="1.3 五层协议"></a><font color=DarkOrange>1.3 五层协议</font></h5><ul>
<li><strong>应用层：</strong> 提供用户接口，特指能够发起网络流量的程序，比如客户端程序：QQ，MSN，浏览器等；服务器程序：web服务器，邮件服务器，流媒体服务器等等。数据单位为报文</li>
<li><strong>传输层：</strong> 提供的是进程间的通用数据传输服务。由于应用层协议很多，定义通用的运输层协议就可以支持不断增多的应用层协议</li>
<li><strong>网络层：</strong> 为主机间提供数据传输服务，而运输层协议是为主机中的进程提供服务。网络层把运输层传递下来的报文段或者用户数据报封装成分组</li>
<li><strong>数据链路层：</strong> 不同的网络类型，发送数据的机制不同，数据链路层就是将数据包封装成能够在不同的网络传输的帧。能够进行差错检验，但不纠错，监测处错误丢掉该帧</li>
<li><strong>物理层：</strong> 物理层解决如何在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的主要任务描述为：确定与传输媒体的接口的一些特性</li>
</ul>
<h4 id="2-TCP和UDP有什么区别"><a href="#2-TCP和UDP有什么区别" class="headerlink" title="2. TCP和UDP有什么区别"></a><font color=DarkOrange>2. TCP和UDP有什么区别</font></h4><ul>
<li>TCP面向连接（如打电话要先拨号建立连接）；UDP是无连接的，即发送数据之前不需要建立连接</li>
<li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付.</li>
<li>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流；UDP是面向报文的</li>
<li>每一条TCP连接只能是点到点的；UDP支持一对一，一对多，多对一和多对多的交互通信</li>
<li>TCP首部开销20字节；UDP的首部开销小，只有8个字节</li>
<li>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</li>
</ul>
<p>TCP使用场景：</p>
<ul>
<li>相对于 UDP，TCP 实现了数据传输过程中的各种控制，可以进行丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。在对可靠性要求较高的情况下，可以使用 TCP，即不考虑 UDP 的时候，都可以选择 TCP</li>
</ul>
<hr>
<p>UDP使用场景：</p>
<ul>
<li>包总量较小的通信（DNS、SNMP）</li>
<li>视频、音频等多媒体通信（即时通信）</li>
<li>广播通信</li>
</ul>
<h4 id="3-TCP中三次握手和四次挥手"><a href="#3-TCP中三次握手和四次挥手" class="headerlink" title="3. TCP中三次握手和四次挥手"></a><font color=DarkOrange>3. TCP中三次握手和四次挥手</font></h4><h5 id="3-1-三次握手"><a href="#3-1-三次握手" class="headerlink" title="3.1 三次握手"></a><font color=DarkOrange>3.1 三次握手</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7m6hb6w0oj318a0o6qau.jpg" alt="75.jpg" style="zoom:30%;" /></div>

<p>假设 A 为客户端，B 为服务器端：</p>
<ul>
<li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求</li>
<li>A 向 B 发送连接请求报文段，<code>SYN=1</code>，<code>ACK=0</code>，选择一个初始的序号 <code>seq = x</code></li>
<li>B 收到连接请求报文段，如果同意建立连接，则向 A 发送连接确认报文段，<code>SYN=1</code>，<code>ACK=1</code>，确认号为 <code>x+1</code>，同时也选择一个初始的序号 <code>seq = y</code></li>
<li>A 收到 B 的连接确认报文段后，还要向 B 发出确认，确认号为 <code>ack = y+1</code>，序号为 <code>seq = x+1</code></li>
<li>A 的 TCP 通知上层应用进程，连接已经建立。</li>
<li>B 收到 A 的确认后，连接建立。</li>
<li>B 的 TCP 收到主机 A 的确认后，也通知其上层应用进程：TCP 连接已经建立</li>
</ul>
<p><strong>为什么TCP连接需要三次握手，两次不可以吗?</strong></p>
<ul>
<li>TCP是一个双向通信协议，通信双方都有能力发送信息，并接收响应。如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认</li>
<li>为了防止已失效的连接请求报文段突然又传送到了服务端，占用服务器资源<ul>
<li>现假定出现一种异常情况，即A发出的第一个连接请求报文段并没有丢失，而是在某些网络节点长时间滞留了，以致延误到连接释放以后的某个时间才到B。本来这是一个已失效的报文段。但是B收到此失效的连接请求报文段后，就误认为是A有发出一次新的连接请求。于是就向A发出确认报文段，同意建立连接。假定不采用三次握手，那么只要B发出确认，新的连接就建立了</li>
<li>由于现在A并没有发出建立连接的请求，因此不会理睬B的确认，也不会向B发送数据。但B却以为新的运输连接已经建立了，并一直等待A发来数据。B的许多资源就这样白白浪费了</li>
<li>采用三次握手的办法可以防止上述现象的发生。例如在刚才的情况下，A不会向B的确认发出确认。B由于收不到确认，就知道A并没有要求建立连接</li>
</ul>
</li>
</ul>
<h5 id="3-2-四次挥手"><a href="#3-2-四次挥手" class="headerlink" title="3.2 四次挥手"></a><font color=DarkOrange>3.2 四次挥手</font></h5><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7m6m8l61xj31hc0u0h05.jpg" alt="76.jpg" style="zoom:30%;" /></div>

<p>数据传输结束后，通信的双方都可释放连接。现在 A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭 TCP连接</p>
<ul>
<li>A 把连接释放报文段首部的 <code>FIN = 1</code>，其序号 <code>seq = u</code>，等待 B 的确认。</li>
<li>B 发出确认，确认号 <code>ack = u+1</code>，而这个报文段自己的序号 <code>seq = v</code>。（TCP 服务器进程通知高层应用进程）</li>
<li>从 A 到 B 这个方向的连接就释放了，TCP 连接处于半关闭状态。A 不能向 B 发送数据；B 若发送数据，A 仍要接收</li>
<li>当 B 不再需要连接时，发送连接释放请求报文段，FIN&#x3D;1。</li>
<li>A 收到后发出确认，进入<code>TIME-WAIT</code>状态，等待 <code>2 MSL（2*2 = 4 mins）</code>时间后释放连接。</li>
<li>B 收到 A 的确认后释放连接</li>
</ul>
<p><strong>为什么需要四次挥手</strong></p>
<ul>
<li>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 <code>CLOSE-WAIT</code>状态</li>
<li>这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文</li>
</ul>
<h4 id="4-常见的HTTP状态码有哪些"><a href="#4-常见的HTTP状态码有哪些" class="headerlink" title="4. 常见的HTTP状态码有哪些"></a><font color=DarkOrange>4. 常见的HTTP状态码有哪些</font></h4><table>
<thead>
<tr>
<th align="left">状态码</th>
<th align="left">类别</th>
<th align="left">原因短语</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1XX</td>
<td align="left">Informational（信息性状态码）</td>
<td align="left">接收的请求正在处理</td>
</tr>
<tr>
<td align="left">2XX</td>
<td align="left">Success（成功状态码）</td>
<td align="left">请求正常处理完毕</td>
</tr>
<tr>
<td align="left">3XX</td>
<td align="left">Redirection（重定向状态码）</td>
<td align="left">需要进行附加操作以完成请求</td>
</tr>
<tr>
<td align="left">4XX</td>
<td align="left">Client Error（客户端错误状态码）</td>
<td align="left">服务器无法处理请求</td>
</tr>
<tr>
<td align="left">5XX</td>
<td align="left">Server Error（服务器错误状态码）</td>
<td align="left">服务器处理请求出错</td>
</tr>
</tbody></table>
<ul>
<li>1XX：<ul>
<li><strong>100 Continue</strong> ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应</li>
</ul>
</li>
<li>2XX：<ul>
<li><strong>200 OK</strong></li>
<li><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用</li>
<li><strong>206 Partial Content</strong> ：表示客户端进行了范围请求。响应报文包含由 Content-Range 指定范围的实体内容</li>
</ul>
</li>
<li>3XX：<ul>
<li><strong>301 Moved Permanently</strong> ：永久性重定向</li>
<li><strong>302 Found</strong> ：临时性重定向</li>
<li>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法</li>
<li><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源</li>
<li><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码</li>
<li><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法</li>
</ul>
</li>
<li>4XX：<ul>
<li><strong>400 Bad Request</strong> ：请求报文中存在语法错误</li>
<li><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败</li>
<li><strong>403 Forbidden</strong> ：请求被拒绝，服务器端没有必要给出拒绝的详细理由</li>
<li><strong>404 Not Found</strong></li>
</ul>
</li>
<li>5XX：<ul>
<li><strong>500 Internal Server Error</strong> ：服务器正在执行请求时发生错误</li>
<li><strong>502 Bad Gateway</strong> : 是用来表示代理或网关在处理请求时发生了错误，并不一定是原始服务器出现了问题</li>
<li><strong>503 Service Unavailable</strong> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求</li>
<li><strong>504 Gateway Timeout</strong>：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应</li>
</ul>
</li>
</ul>
<p><strong>注意：某些代理服务器在DNS查询超时时会返回400或者500错误</strong></p>
<h4 id="5-HTTPS和HTTP有什么区别"><a href="#5-HTTPS和HTTP有什么区别" class="headerlink" title="5. HTTPS和HTTP有什么区别"></a><font color=DarkOrange>5. HTTPS和HTTP有什么区别</font></h4><p>http协议和https协议的区别：<strong>传输信息安全性不同</strong>、<strong>连接方式不同</strong>、<strong>端口不同</strong>、<strong>证书专申请方式不同</strong></p>
<ul>
<li>传输信息安全性不同<ul>
<li>http协议：是超文本传输协议，信息是明文传输。如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息</li>
<li>https协议：是具有安全性的SSL&#x2F;TLS加密传输协议，为浏览器和服务器之间的通信加密，确保数据传输的安全性</li>
</ul>
</li>
<li>连接方式不同<ul>
<li>http协议：http的连接很简单，是无状态的，客户端和服务器端都无法验证对方的身份</li>
<li>https协议：是由SSL&#x2F;TLS＋HTTP协议构建的可进行加密传输、身份认证的网络协议。客户端可以验证服务器端的身份，如果配置了客户端验证，服务器方也可以验证客户端的身份</li>
</ul>
</li>
<li>端口不同<ul>
<li>http协议：使用的端口是80</li>
<li>https协议：使用的端口是443</li>
</ul>
</li>
<li>证书申请方式不同<ul>
<li>http协议：无需申请证书</li>
<li>https协议：需要到ca申请证书，一般免费证书很少，需要交费</li>
</ul>
</li>
</ul>
<h4 id="6-HTTP-x2F-HTPS安全性"><a href="#6-HTTP-x2F-HTPS安全性" class="headerlink" title="6. HTTP&#x2F;HTPS安全性"></a><font color=DarkOrange>6. HTTP&#x2F;HTPS安全性</font></h4><h5 id="6-1-HTTP的安全性问题"><a href="#6-1-HTTP的安全性问题" class="headerlink" title="6.1 HTTP的安全性问题"></a><font color=DarkOrange>6.1 HTTP的安全性问题</font></h5><ul>
<li>使用明文进行通信，内容可能会被窃听</li>
<li>不验证通信方的身份，通信方的身份有可能遭遇伪装</li>
<li>无法证明报文的完整性，报文有可能遭篡改</li>
</ul>
<hr>
<p>HTTPs（Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲HTTPs是HTTP的安全版。HTTPs 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信。也就是说 HTTPs 使用了隧道进行通信。通过使用 SSL，HTTPs 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）</p>
<h5 id="6-2-对称密钥加密"><a href="#6-2-对称密钥加密" class="headerlink" title="6.2 对称密钥加密"></a><font color=DarkOrange>6.2 对称密钥加密</font></h5><p>对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥</p>
<ul>
<li>优点：运算速度快；</li>
<li>缺点：无法安全地将密钥传输给通信方</li>
</ul>
<h5 id="6-3-非对称密钥加密"><a href="#6-3-非对称密钥加密" class="headerlink" title="6.3 非对称密钥加密"></a><font color=DarkOrange>6.3 非对称密钥加密</font></h5><p>非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密</p>
<p>非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确</p>
<ul>
<li>优点：可以更安全地将公开密钥传输给通信发送方</li>
<li>缺点：运算速度慢</li>
</ul>
<h5 id="6-4-HTTPs-采用的加密方式"><a href="#6-4-HTTPs-采用的加密方式" class="headerlink" title="6.4 HTTPs 采用的加密方式"></a><font color=DarkOrange>6.4 HTTPs 采用的加密方式</font></h5><p>HTTPs 采用混合的加密机制，使用非对称密钥加密用于传输对称密钥来保证安全性，之后使用对称密钥加密进行通信来保证效率</p>
<h4 id="7-SSL-x2F-TLS协议的握手过程"><a href="#7-SSL-x2F-TLS协议的握手过程" class="headerlink" title="7. SSL&#x2F;TLS协议的握手过程"></a><font color=DarkOrange>7. SSL&#x2F;TLS协议的握手过程</font></h4><p>我们知道，HTTP 协议都是明文传输内容，在早期只展示静态内容时没有问题。伴随着互联网的快速发展，人们对于网络传输安全性的要求也越来越高，HTTPS 协议因此出现。如上图所示，在 HTTPS 加密中真正起作用的其实是 SSL&#x2F;TLS 协议。SSL&#x2F;TLS 协议作用在 HTTP 协议之下，对于上层应用来说，原来的发送接收数据流程不变，这就很好地兼容了老的 HTTP 协议，这也是软件开发中分层实现的体现</p>
<h5 id="7-1-SSL-Secure-Socket-Layer，安全套接字层"><a href="#7-1-SSL-Secure-Socket-Layer，安全套接字层" class="headerlink" title="7.1 SSL (Secure Socket Layer，安全套接字层)"></a><font color=DarkOrange>7.1 SSL (Secure Socket Layer，安全套接字层)</font></h5><p>SSL为Netscape所研发，用以保障在Internet上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之传输过程中不会被截取，当前为3.0版本</p>
<p>SSL协议可分为两层： SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。 SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等</p>
<h5 id="7-2-TLS-Transport-Layer-Security，传输层安全协议"><a href="#7-2-TLS-Transport-Layer-Security，传输层安全协议" class="headerlink" title="7.2 TLS (Transport Layer Security，传输层安全协议)"></a><font color=DarkOrange>7.2 TLS (Transport Layer Security，传输层安全协议)</font></h5><p>用于两个应用程序之间提供保密性和数据完整性</p>
<p>TLS 1.0是IETF（Internet Engineering Task Force，Internet工程任务组）制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本，可以理解为SSL 3.1，它是写入了 RFC 的。该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）。较低的层为 TLS 记录协议，位于某个可靠的传输协议（例如 TCP）上面</p>
<h5 id="7-3-握手过程"><a href="#7-3-握手过程" class="headerlink" title="7.3 握手过程"></a><font color=DarkOrange>7.3 握手过程</font></h5><ul>
<li><p><strong>1-client hello：</strong> 握手第一步是客户端向服务端发送 Client Hello 消息，这个消息里包含了一个客户端生成的随机数 <strong>Random1</strong>、客户端支持的<strong>加密套件</strong>（Support Ciphers）和 SSL Version 等信息</p>
</li>
<li><p><strong>2-server hello：</strong> 第二步是服务端向客户端发送 Server Hello 消息，这个消息会从 Client Hello 传过来的 Support Ciphers 里确定一份加密套件，这个套件决定了后续加密和生成摘要时具体使用哪些算法，另外还会生成一份随机数 <strong>Random2</strong>。注意，至此客户端和服务端都拥有了两个随机数（Random1+ Random2），这两个随机数会在后续生成对称秘钥时用到</p>
</li>
<li><p><strong>3-server certificate：</strong> 这一步是服务端将自己的证书下发给客户端，让客户端验证自己的身份，客户端验证通过后取出证书中的公钥</p>
</li>
<li><p><strong>4-Server Hello Done：</strong> Server Hello Done 通知客户端 Server Hello 过程结束</p>
</li>
<li><p><strong>5-Client Key Exchange：</strong> 上面客户端根据服务器传来的公钥生成了 <strong>PreMaster Key</strong>，Client Key Exchange 就是将这个 key 传给服务端，服务端再用自己的私钥解出这个 <strong>PreMaster Key</strong> 得到客户端生成的 <strong>Random3</strong>。至此，客户端和服务端都拥有 <strong>Random1</strong> + <strong>Random2</strong> + <strong>Random3</strong>，两边再根据同样的算法就可以生成一份秘钥，握手结束后的应用层数据都是使用这个秘钥进行对称加密。为什么要使用三个随机数呢？这是因为 SSL&#x2F;TLS 握手过程的数据都是明文传输的，并且多个随机数种子来生成秘钥不容易被暴力破解出来</p>
</li>
<li><p><strong>6-Change Cipher Spec(Client)：</strong> 这一步是客户端通知服务端后面再发送的消息都会使用前面协商出来的秘钥加密了，是一条事件消息</p>
</li>
<li><p><strong>7-Finished(Client)：</strong> 客户端发送Finished报文。该报文包含连接至今全部报文的整理校验值。这次握手协议是否能成功，要以服务器是否能够正确解密该报文作为判定标准</p>
</li>
<li><p><strong>8-Change Cipher Spec(Server)：</strong> 服务器同样发送Change Cipher Spec报文给客户端</p>
</li>
<li><p><strong>9-Finished(Server)：</strong> 服务器同样发送Finished报文给客户端</p>
</li>
<li><p><strong>10-11Application Data：</strong> 到这里，双方已安全地协商出了同一份秘钥，所有的应用层数据都会用这个秘钥加密后再通过 TCP 进行可靠传输</p>
</li>
<li><p><strong>12-Alert：warning, close notify：</strong> 最后由客户端断开连接。断开连接时，发送close_notify报文。上图做了一些省略，在这步之后再发送一种叫做MAC（Message Authentication Code）的报文摘要。MAC能够查知报文是否遭到篡改，从而保护报文的完整性</p>
</li>
</ul>
<h4 id="8-Get和Post区别"><a href="#8-Get和Post区别" class="headerlink" title="8. Get和Post区别"></a><font color=DarkOrange>8. Get和Post区别</font></h4><ul>
<li><p>一般约束为：GET是从服务器上获取数据，POST是向服务器传送数据</p>
</li>
<li><p>Get是不安全的，因为在传输过程，数据被放在请求的URL中；Post的所有操作对用户来说都是不可见的</p>
</li>
<li><p>Get传送的数据量较小，这主要是因为受URL长度限制；Post传送的数据量较大，一般被默认为不受限制</p>
</li>
<li><p>Get限制Form表单的数据集的值必须为ASCII字符；而Post支持整个ISO10646字符集</p>
</li>
<li><p>Get执行效率却比Post方法好。Get是form提交的默认方法</p>
</li>
<li><p>GET产生一个TCP数据包；POST产生两个TCP数据包（非必然，客户端可灵活决定）</p>
</li>
</ul>
<h4 id="9-从输入网址到获得页面的网络请求过程"><a href="#9-从输入网址到获得页面的网络请求过程" class="headerlink" title="9. 从输入网址到获得页面的网络请求过程"></a><font color=DarkOrange>9. 从输入网址到获得页面的网络请求过程</font></h4><ol>
<li>输入地址</li>
<li>浏览器查找域名的 IP 地址</li>
<li>浏览器向 web 服务器发送一个 HTTP 请求</li>
<li>服务器的永久重定向响应</li>
<li>服务器处理请求</li>
<li>服务器返回一个 HTTP 响应</li>
<li>浏览器显示 HTML</li>
<li>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）</li>
</ol>
<p><strong>详细解读：</strong> <a href="https://zhuanlan.zhihu.com/p/133906695">点击跳转至网页</a></p>
<h4 id="10-TCP报头格式和UDP报头格式"><a href="#10-TCP报头格式和UDP报头格式" class="headerlink" title="10. TCP报头格式和UDP报头格式"></a><font color=DarkOrange>10. TCP报头格式和UDP报头格式</font></h4><p>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。运输层提供了进程间的逻辑通信，运输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个运输层实体之间有一条端到端的逻辑通信信道</p>
<ul>
<li><p>TCP和UDP的特点</p>
<ul>
<li><strong>传输控制协议 TCP</strong>（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）</li>
<li><strong>用户数据报协议 UDP</strong>（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。例如：视频传输、实时通信</li>
</ul>
</li>
<li><p>TCP首部格式</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7m8ophl1uj317p0r3n7l.jpg" alt="74.jpg" style="zoom:30%;" /></div>

<ul>
<li><strong>序号 seq</strong> ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。[301,400]为序号301的数据长度，下一个则为401。</li>
<li><strong>确认号 ack</strong> ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li>
<li><strong>数据偏移</strong> ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度</li>
<li><strong>确认 ACK</strong> ：当 ACK&#x3D;1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1</li>
<li><strong>同步 SYN</strong> ：在连接建立时用来同步序号。当 SYN&#x3D;1，ACK&#x3D;0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN&#x3D;1，ACK&#x3D;1。</li>
<li><strong>终止 FIN</strong> ：用来释放一个连接，当 FIN&#x3D;1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</li>
<li><strong>窗口</strong> ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的</li>
</ul>
</li>
<li><p>UDP首部格式</p>
<p>首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7m8rstr7dj31580k211a.jpg" alt="73.jpg" style="zoom:33%;" /></div></li>
</ul>
<h4 id="11-TCP连接中如果断电怎么办"><a href="#11-TCP连接中如果断电怎么办" class="headerlink" title="11. TCP连接中如果断电怎么办"></a><font color=DarkOrange>11. TCP连接中如果断电怎么办</font></h4><p>都已经断电了，还能怎么办，等电来</p>
<h4 id="12-TCP滑动窗口"><a href="#12-TCP滑动窗口" class="headerlink" title="12. TCP滑动窗口"></a><font color=DarkOrange>12. TCP滑动窗口</font></h4><div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7mctzf6qaj31hm0setua.jpg" alt="78.jpg" style="zoom:30%;" /></div>

<p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，<strong>接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小</strong></p>
<p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口</p>
<p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {32, 33} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收</p>
<h4 id="13-TCP流量控制"><a href="#13-TCP流量控制" class="headerlink" title="13. TCP流量控制"></a><font color=DarkOrange>13. TCP流量控制</font></h4><ul>
<li>流量控制是为了控制发送方发送速率，保证接收方来得及接收</li>
<li>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据</li>
</ul>
<h4 id="14-TCP拥塞处理（Congestion-Handling）"><a href="#14-TCP拥塞处理（Congestion-Handling）" class="headerlink" title="14. TCP拥塞处理（Congestion Handling）"></a><font color=DarkOrange>14. TCP拥塞处理（Congestion Handling）</font></h4><p><strong>拥塞控制的一般原理：</strong></p>
<ul>
<li>在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏——产生拥塞(congestion)。</li>
<li>出现资源拥塞的条件：对资源需求的总和 &gt; 可用资源</li>
<li>若网络中有许多资源同时产生拥塞，网络的性能就要明显变坏，整个网络的吞吐量将随输入负荷的增大而下降</li>
</ul>
<p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度</p>
<p>TCP 主要通过四种算法来进行拥塞控制：<strong>慢开始</strong>、<strong>拥塞避免</strong>、<strong>快重传</strong>、<strong>快恢复</strong></p>
<h4 id="15-TCP的LISTEN状态是什么"><a href="#15-TCP的LISTEN状态是什么" class="headerlink" title="15. TCP的LISTEN状态是什么"></a><font color=DarkOrange>15. TCP的LISTEN状态是什么</font></h4><p>TCP的LISTEN是服务器处于监听状态：</p>
<ul>
<li><strong>CLOSED：</strong> 初始状态</li>
<li><strong>LISTEN：</strong> 服务器处于监听状态</li>
<li><strong>TIME_WAIT：</strong> 客户端收到服务端的FIN包，并立即发出ACK包做最后的确认，在此之后的2MSL时间称为TIME_WAIT状态</li>
</ul>
<h4 id="16-Tcp中的拆包和粘包"><a href="#16-Tcp中的拆包和粘包" class="headerlink" title="16. Tcp中的拆包和粘包"></a><font color=DarkOrange>16. Tcp中的拆包和粘包</font></h4><ul>
<li><strong>粘包：</strong> 在socket通讯过程中，如果通讯的一端一次性连续发送多条数据包，tcp协议会将多个数据包打包成一个tcp报文发送出去，这就是所谓的粘包</li>
<li><strong>拆包：</strong> 而如果通讯的一端发送的数据包超过一次tcp报文所能传输的最大值时，就会将一个数据包拆成多个最大tcp长度的tcp报文分开传输，这就叫做拆包</li>
</ul>
<h4 id="17-HTTP的请求和响应报文"><a href="#17-HTTP的请求和响应报文" class="headerlink" title="17. HTTP的请求和响应报文"></a><font color=DarkOrange>17. HTTP的请求和响应报文</font></h4><ul>
<li><p>请求报文</p>
<ul>
<li>请求行：由三部分组成（请求方法、请求URL-不包括域名、HTTP版本协议）</li>
<li>请求头：由关键字-值对组成，每行一对</li>
<li>空行：通知服务器以下不再有请求头</li>
<li>请求体</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7m91nfjb1j30i8065djn.jpg" alt="84.jpg" style="zoom:80%;" /></div>
</li>
<li><p>响应报文</p>
<ul>
<li>响应行：由三部分组成：服务器HTTP协议版本，响应状态码，状态码的文本描述</li>
<li>响应头：由关键字-值对组成，每行一对</li>
<li>空行：通知服务器以下不再有响应头</li>
<li>响应体</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7m93g347vj30jk07faec.jpg" alt="96.jpg" style="zoom:80%;" /></div></li>
</ul>
<h4 id="18-HTTP方法"><a href="#18-HTTP方法" class="headerlink" title="18. HTTP方法"></a><font color=DarkOrange>18. HTTP方法</font></h4><ul>
<li>GET：获取资源<ul>
<li>当前网络请求中，绝大部分使用的是GET方法</li>
</ul>
</li>
<li>HEAD：获取报文首部<ul>
<li>和GET方法一样，但是不返回报文实体主体部分</li>
<li>主要用于确认 URL 的有效性以及资源更新的日期时间等</li>
</ul>
</li>
<li>POST：传输实体主体<ul>
<li>POST 主要用来传输数据，而 GET 主要用来获取资源</li>
</ul>
</li>
<li>PUT：上传文件<ul>
<li>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法</li>
</ul>
</li>
<li>PATCH：对资源进行部分修改<ul>
<li>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改</li>
</ul>
</li>
<li>DELETE：删除文件<ul>
<li>与 PUT 功能相反，并且同样不带验证机制</li>
</ul>
</li>
<li>OPTIONS：查询支持的方法<ul>
<li>查询指定的 URL 能够支持的方法</li>
<li>会返回 Allow：GET，POST，HEAD，OPTIONS 这样的内容</li>
</ul>
</li>
<li>CONNECT：要求在与代理服务器通信时建立隧道<ul>
<li>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输</li>
</ul>
</li>
<li>TRACE：追踪路径<ul>
<li>服务器会将通信路径返回给客户端</li>
<li>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输</li>
<li>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）</li>
</ul>
</li>
</ul>
<h4 id="19-如何理解HTTP协议是无状态的"><a href="#19-如何理解HTTP协议是无状态的" class="headerlink" title="19. 如何理解HTTP协议是无状态的"></a><font color=DarkOrange>19. 如何理解HTTP协议是无状态的</font></h4><ul>
<li>HTTP协议是无状态的（stateless），指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和上一次打开这个服务器上的网页之间没有任何联系</li>
<li>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）</li>
<li>缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</li>
</ul>
<h4 id="20-HTTP2-0特性"><a href="#20-HTTP2-0特性" class="headerlink" title="20. HTTP2.0特性"></a><font color=DarkOrange>20. HTTP2.0特性</font></h4><p>HTTP&#x2F;2的通过支持请求与响应的多路复用来减少延迟，通过压缩HTTP首部字段将协议开销降至最低，同时增加对请求优先级和服务器端推送的支持</p>
<h4 id="21-什么是短连接和长连接"><a href="#21-什么是短连接和长连接" class="headerlink" title="21. 什么是短连接和长连接"></a><font color=DarkOrange>21. 什么是短连接和长连接</font></h4><p>在HTTP&#x2F;1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话</p>
<p>而从HTTP&#x2F;1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure>

<p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接</p>
<p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接</p>
<h4 id="22-Client如何实现长连接"><a href="#22-Client如何实现长连接" class="headerlink" title="22. Client如何实现长连接"></a><font color=DarkOrange>22. Client如何实现长连接</font></h4><p>使用TCP协议的<strong>KeepAlive</strong>机制与<strong>HeartBeat</strong>心跳包</p>
<ul>
<li><code>HeartBeat</code>心跳包</li>
<li>TCP协议的<code>KeepAlive</code>机制</li>
</ul>
<h4 id="23-Quic有什么优点相比Http2"><a href="#23-Quic有什么优点相比Http2" class="headerlink" title="23. Quic有什么优点相比Http2"></a><font color=DarkOrange>23. Quic有什么优点相比Http2</font></h4><ul>
<li><strong>HTTP1：</strong> 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷</li>
<li><strong>HTTP2：</strong> 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的</li>
<li><strong>Quic：</strong> 基于 UDP 实现，是 HTTP3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议.quic中加密认证的报文(TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击)。这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险</li>
</ul>
<p>此外quic还有向前纠错的能力，QUIC 协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间(包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗)</p>
<h4 id="24-Grpc的优缺点"><a href="#24-Grpc的优缺点" class="headerlink" title="24. Grpc的优缺点"></a><font color=DarkOrange>24. Grpc的优缺点</font></h4><p>gRPC是Google公司基于Protobuf开发的跨语言的开源RPC框架。gRPC基于HTTP&#x2F;2协议设计，可以基于一个HTTP&#x2F;2链接提供多个服务，对于移动设备更加友好</p>
<p>最底层为TCP或Unix Socket协议，在此之上是HTTP&#x2F;2协议的实现，然后在HTTP&#x2F;2协议之上又构建了针对Go语言的gRPC核心库。应用程序通过gRPC插件生产的Stub代码和gRPC核心库通信，也可以直接和gRPC核心库通信</p>
<p><strong>优点：</strong></p>
<ul>
<li>protobuf二进制消息，性能好&#x2F;效率高（空间和时间效率都很不错）</li>
<li>proto文件生成目标代码，简单易用</li>
<li>序列化反序列化直接对应程序中的数据类，不需要解析后在进行映射(XML,JSON都是这种方式)</li>
<li>支持向前兼容（新加字段采用默认值）和向后兼容（忽略新加字段），简化升级</li>
<li>支持多种语言（可以把proto文件看做IDL文件）</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>GRPC尚未提供连接池，需要自行实现</li>
<li>尚未提供“服务发现”、“负载均衡”机制</li>
<li>因为基于HTTP2，绝大部多数<code>HTTP Server、Nginx</code>都尚不支持，即Nginx不能将GRPC请求作为HTTP请求来负载均衡，而是作为普通的TCP请求（nginx1.9版本已支持）</li>
<li>Protobuf二进制可读性差（貌似提供了Text_Fromat功能）默认不具备动态特性（可以通过动态定义生成消息类型或者动态编译支持）</li>
</ul>
<h4 id="25-Http1和Http2和Grpc之间的区别是什么"><a href="#25-Http1和Http2和Grpc之间的区别是什么" class="headerlink" title="25. Http1和Http2和Grpc之间的区别是什么"></a><font color=DarkOrange>25. Http1和Http2和Grpc之间的区别是什么</font></h4><p>在互联网流量传输只使用了几个网络协议。使用 <code>IPv4</code> 进行路由，使用 <code>TCP</code> 进行连接层面的流量控制，使用 <code>SSL/TLS</code> 协议实现传输安全，使用 <code>DNS</code> 进行域名解析，使用 <code>HTTP</code> 进行应用数据的传输</p>
<p><strong>HTTP2和HTTP1相比的新特性包括：</strong></p>
<ul>
<li><p>新的二进制格式（Binary Format）</p>
<ul>
<li>HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮</li>
</ul>
</li>
<li><p>多路复用（MultiPlexing）</p>
<ul>
<li>连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面</li>
</ul>
</li>
<li><p>Header压缩</p>
<p>Header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小</p>
</li>
<li><p>服务端推送（server push）</p>
<ul>
<li>服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能</li>
</ul>
</li>
</ul>
<hr>
<p>Grpc的设计目标是在任何环境下运行，支持可插拔的负载均衡，跟踪，运行状况检查和身份验证。它不仅支持数据中心内部和跨数据中心的服务调用，它也适用于分布式计算的最后一公里，将设备，移动应用程序和浏览器连接到后端服务，同时，它也是高性能的，而 HTTP2 恰好支持这些</p>
<p><strong>Grpc是基于http2的</strong></p>
<ul>
<li>HTTP2天然的通用性满足各种设备，场景</li>
<li>HTTP2的性能相对来说也是很好的，除非你需要极致的性能</li>
<li>HTTP2的安全性非常好，天然支持 SSL</li>
<li>HTTP2的鉴权也非常成熟</li>
<li>Grpc基于 HTTP2 多语言实现也更容易</li>
</ul>
<h4 id="26-数字签名、数字证书、SSL、https是什么关系"><a href="#26-数字签名、数字证书、SSL、https是什么关系" class="headerlink" title="26. 数字签名、数字证书、SSL、https是什么关系"></a><font color=DarkOrange>26. 数字签名、数字证书、SSL、https是什么关系</font></h4><p>HTTPS 是建立在密码学基础之上的一种安全通信协议，严格来说是基于 HTTP 协议和 SSL&#x2F;TLS 的组合</p>
<h4 id="27-Cookie"><a href="#27-Cookie" class="headerlink" title="27. Cookie"></a><font color=DarkOrange>27. Cookie</font></h4><p>HTTP协议是无状态的，主要是为了让HTTP协议尽可能简单，使得它能够处理大量事务。HTTP&#x2F;1.1引入Cookie来保存状态信息</p>
<p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。它用于告知服务端两个请求是否来自同一浏览器，并保持用户的登录状态</p>
<ul>
<li><p>用途</p>
<ul>
<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>
<li>个性化设置（如用户自定义设置、主题等）</li>
<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>
</ul>
</li>
<li><p>创建过程</p>
<ul>
<li>服务器发送的响应报文包含Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中</li>
<li>客户端之后对同一个服务器发送请求时，会从浏览器中读出 Cookie 信息通过 Cookie 请求首部字段发送给服务器</li>
</ul>
</li>
<li><p>分类</p>
<ul>
<li>会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效</li>
<li>持久性 Cookie：指定一个特定的过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie</li>
</ul>
</li>
<li><p>JavaScript 获取 Cookie</p>
<ul>
<li>通过 <code>Document.cookie</code> 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie</li>
</ul>
</li>
<li><p>Secure 和 HttpOnly</p>
<ul>
<li>标记为 Secure 的 Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障</li>
<li>标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用。因为跨域脚本 (XSS) 攻击常常使用 JavaScript 的 <code>Document.cookie</code>API 窃取用户的 Cookie 信息，因此使用 HttpOnly 标记可以在一定程度上避免 XSS 攻击</li>
</ul>
</li>
<li><p>作用域</p>
<ul>
<li>Domain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了 Domain，则一般包含子域名。例如，如果设置 Domain&#x3D;mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）</li>
<li>Path 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 %x2F (“&#x2F;“) 作为路径分隔符，子路径也会被匹配</li>
</ul>
</li>
</ul>
<h4 id="28-Session"><a href="#28-Session" class="headerlink" title="28. Session"></a><font color=DarkOrange>28. Session</font></h4><p>除了可以将用户信息通过 Cookie 存储在用户浏览器中，也可以利用 Session 存储在服务器端，存储在服务器端的信息更加安全</p>
<p>Session 可以存储在服务器上的文件、数据库或者内存中，现在最常见的是将 Session 存储在内存型数据库中，比如 Redis</p>
<p>使用 Session 维护用户登录的过程如下：</p>
<ul>
<li>用户进行登录时，用户提交包含用户名和密码的表单，放入 HTTP 请求报文中；</li>
<li>服务器验证该用户名和密码</li>
<li>如果正确则把用户信息存储到 Redis 中，它在 Redis 中的 ID 称为 Session ID</li>
<li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中</li>
<li>客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从 Redis 中取出用户信息，继续之后的业务操作</li>
</ul>
<p>应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，例如转账等操作，除了使用 Session 管理用户状态之外，还需要对用户进行重新验证，比如重新输入密码，或者使用短信验证码等方式</p>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h7mdikcs2aj31d80jr11b.jpg" alt="86.jpg" style="zoom:100%;" /></div>

<h4 id="29-Cookie与Session异同"><a href="#29-Cookie与Session异同" class="headerlink" title="29. Cookie与Session异同"></a><font color=DarkOrange>29. Cookie与Session异同</font></h4><p>Cookie 和 Session 都为了用来保存状态信息，都是保存客户端状态的机制，它们都是为了解决HTTP无状态的问题而所做的努力</p>
<ul>
<li>作用范围不同：Cookie 保存在客户端(浏览器)，Session 保存在服务器端</li>
<li>存取方式的不同：Cookie只能保存 ASCII，Session可以存任意数据类型，比如UserId等</li>
<li>有效期不同：Cookie可设置为长时间保持，比如默认登录功能功能，Session一般有效时间较短，客户端关闭或者Session超时都会失效</li>
<li>隐私策略不同：Cookie存储在客户端，信息容易被窃取;Session存储在服务端，相对安全一些</li>
<li>存储大小不同： 单个Cookie 保存的数据不能超过 4K，Session可存储数据远高于Cookie</li>
</ul>
<h4 id="30-浏览器禁用Cookie"><a href="#30-浏览器禁用Cookie" class="headerlink" title="30. 浏览器禁用Cookie"></a><font color=DarkOrange>30. 浏览器禁用Cookie</font></h4><p>此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是使用 URL 重写技术，将 Session ID 作为 URL 的参数进行传递</p>
<h4 id="31-Cookie与Session选择"><a href="#31-Cookie与Session选择" class="headerlink" title="31. Cookie与Session选择"></a><font color=DarkOrange>31. Cookie与Session选择</font></h4><ul>
<li>Cookie 只能存储 ASCII 码字符串，而 Session 则可以存取任何类型的数据，因此在考虑数据复杂性时首选 Session</li>
<li>Cookie 存储在浏览器中，容易被恶意查看。如果非要将一些隐私数据存在 Cookie 中，可以将 Cookie 值进行加密，然后在服务器进行解密</li>
<li>对于大型网站，如果用户所有的信息都存储在 Session 中，那么开销是非常大的，因此不建议将所有的用户信息都存储到 Session 中</li>
</ul>
<h4 id="32-Unicode和ASCII以及Utf8的区别"><a href="#32-Unicode和ASCII以及Utf8的区别" class="headerlink" title="32. Unicode和ASCII以及Utf8的区别"></a><font color=DarkOrange>32. Unicode和ASCII以及Utf8的区别</font></h4><ul>
<li>Unicode 是字符集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</li>
<li>ASCII 码一共规定了128个字符的编码，比如空格SPACE是32（二进制00100000），大写的字母A是65（二进制01000001）</li>
<li>UTF-8 是编码规则</li>
</ul>
<h4 id="33-TFO的原理是什么"><a href="#33-TFO的原理是什么" class="headerlink" title="33. TFO的原理是什么"></a><font color=DarkOrange>33. TFO的原理是什么</font></h4><p>TCP快速打开（TCP Fast Open，TFO）是对TCP的一种简化握手手续的拓展，用于提高两端点间连接的打开速度</p>
<p>简而言之，就是在TCP的三次握手过程中传输实际有用的数据。这个扩展最初在Linux系统实现，Linux服务器，Linux系统上的Chrome浏览器，或运行在Linux上的其他支持的软件</p>
<p>它通过握手开始时的SYN包中的TFO cookie来验证一个之前连接过的客户端。如果验证成功，它可以在三次握手最终的ACK包收到之前就开始发送数据，这样便跳过了一个绕路的行为，更在传输开始时就降低了延迟</p>
<p>这个加密的Cookie被存储在客户端，在一开始的连接时被设定好。然后每当客户端连接时，这个Cookie被重复返回</p>
<p>请求Tcp Fast Open Cookie：</p>
<ul>
<li>客户端发送SYN数据包，该数据包包含Fast Open选项，且该选项的Cookie为空，这表明客户端请求Fast Open Cookie</li>
<li>支持TCP Fast Open的服务器生成Cookie，并将其置于SYN-ACK数据包中的Fast Open选项以发回客户端</li>
<li>客户端收到SYN-ACK后，缓存Fast Open选项中的Cookie</li>
</ul>
<h4 id="34-TIME-WAIT的作用"><a href="#34-TIME-WAIT的作用" class="headerlink" title="34. TIME_WAIT的作用"></a><font color=DarkOrange>34. TIME_WAIT的作用</font></h4><p>主动关闭的Socket端会进入TIME_WAIT状态，并且持续2MSL时间长度，MSL就是maximum segment lifetime(最大分节生命期），这是一个IP数据包能在互联网上生存的最长时间，超过这个时间将在网络中消失。MSL在RFC 1122上建议是2分钟，而源自berkeley的TCP实现传统上使用30秒，因而，TIME_WAIT状态一般维持在1-4分钟</p>
<ul>
<li>可靠地实现TCP全双工连接的终止</li>
<li>允许老的重复分节在网络中消逝</li>
</ul>
<h4 id="35-网络的性能指标有哪些"><a href="#35-网络的性能指标有哪些" class="headerlink" title="35. 网络的性能指标有哪些"></a><font color=DarkOrange>35. 网络的性能指标有哪些</font></h4><p>通常是以4个指标来衡量网络的性能，分别是带宽、延时、吞吐率、PPS（Packet Per Second），它们表示的意义如下：</p>
<ul>
<li>带宽：表示链路的最大传输速率，单位是 <code>b/s</code> （比特 &#x2F; 秒），带宽越大，其传输能力就越强</li>
<li>延时：表示请求数据包发送后，收到对端响应，所需要的时间延迟。不同的场景有着不同的含义，比如可以表示建立 <code>TCP</code> 连接所需的时间延迟，或一个数据包往返所需的时间延迟</li>
<li>吞吐率：表示单位时间内成功传输的数据量，单位是 <code>b/s</code>（比特 &#x2F; 秒）或者 <code>B/s</code>（字节 &#x2F; 秒），吞吐受带宽限制，带宽越大，吞吐率的上限才可能越高</li>
<li>PPS：全称是 <code>Packet Per Second</code>（包 &#x2F; 秒），表示以网络包为单位的传输速率，一般用来评估系统对于网络的转发能</li>
</ul>
<p>除了以上这四种基本的指标，还有一些其他常用的性能指标，比如：</p>
<ul>
<li>网络的可用性：表示网络能否正常通信</li>
<li>并发连接数：表示 TCP 连接数量</li>
<li>丢包率：表示所丢失数据包数量占所发送数据组的比率</li>
<li>重传率：表示重传网络包的比例</li>
</ul>
<h4 id="36-如何区分流量控制和拥塞控制"><a href="#36-如何区分流量控制和拥塞控制" class="headerlink" title="36. 如何区分流量控制和拥塞控制"></a><font color=DarkOrange>36. 如何区分流量控制和拥塞控制</font></h4><ul>
<li>拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷</li>
<li>拥塞控制是一个全局性的过程，涉及到所有的主机、所有的路由器，以及与降低网络传输性能有关的所有因素</li>
<li>流量控制往往指在给定的发送端和接收端之间的点对点通信量的控制</li>
<li>流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收</li>
<li>流量控制属于通信双方协商；拥塞控制涉及通信链路全局</li>
<li>流量控制需要通信双方各维护一个发送窗、一个接收窗，对任意一方，接收窗大小由自身决定，发送窗大小由接收方响应的TCP报文段中窗口值确定；拥塞控制的拥塞窗口大小变化由试探性发送一定数据量数据探查网络状况后而自适应调整</li>
<li>实际最终发送窗口 &#x3D; min{流控发送窗口，拥塞窗口}</li>
</ul>
<h4 id="37-解释RTO，RTT和超时重传"><a href="#37-解释RTO，RTT和超时重传" class="headerlink" title="37. 解释RTO，RTT和超时重传"></a><font color=DarkOrange>37. 解释RTO，RTT和超时重传</font></h4><ul>
<li><strong>超时重传</strong>：发送端发送报文后若长时间未收到确认的报文则需要重发该报文。可能有以下几种情况：<ul>
<li>发送的数据没能到达接收端，所以对方没有响应。</li>
<li>接收端接收到数据，但是ACK报文在返回过程中丢失</li>
<li>接收端拒绝或丢弃数据</li>
</ul>
</li>
<li><strong>RTO</strong>：从上一次发送数据，因为长期没有收到ACK响应，到下一次重发之间的时间。就是重传间隔<ul>
<li>通常每次重传RTO是前一次重传间隔的两倍，计量单位通常是RTT。例：1RTT，2RTT，4RTT，8RTT……</li>
<li>重传次数到达上限之后停止重传</li>
</ul>
</li>
<li><strong>RTT</strong>：数据从发送到接收到对方响应之间的时间间隔，即数据报在网络中一个往返用时。大小不稳定</li>
</ul>
<h4 id="38-停止等待和超时重传"><a href="#38-停止等待和超时重传" class="headerlink" title="38. 停止等待和超时重传"></a><font color=DarkOrange>38. 停止等待和超时重传</font></h4><ul>
<li>停止等待：通常我们说如果A和B双方建立好tcp连接后就可以相互发送数据了，A为发送方，B为接收方。因为这里讨论可靠传输原理，所以把传输的数据单元称为分组。“停止等待”就是每发送完一个分组就停止发送，等待对方确认后再发送下一个分组。停止等待协议考虑了数据在网络中传输出现的几种情况来提供有效措施保障数据的可靠传输，下面我们就一一来介绍这几种情况</li>
<li>超时重传：原理是在发送某一个数据以后就开启一个计时器，在一定时间内如果没有得到发送的数据报的ACK报文，那么就重新发送数据，直到发送成功为止。影响超时重传机制协议效率的一个关键参数是重传超时时间（RTO，Retransmission TimeOut）</li>
</ul>
<h4 id="39-交换机和路由器的区别"><a href="#39-交换机和路由器的区别" class="headerlink" title="39. 交换机和路由器的区别"></a><font color=DarkOrange>39. 交换机和路由器的区别</font></h4><ul>
<li>交换机是一根网线上网，但是大家上网是分别拨号，各自使用自己的宽带，大家上网没有影响。而路由器比交换机多了一个虚拟拨号功能，通过同一台路由器上网的电脑是共用一个宽带账号，大家上网要相互影响</li>
<li>交换机工作在中继层，交换机根据MAC地址寻址。路由器工作在网络层，根据IP地址寻址，路由器可以处理TCP&#x2F;IP协议，而交换机不可以</li>
<li>交换机可以使连接它的多台电脑组成局域网，如果还有代理服务器的话还可以实现同时上网功能而且局域网所有电脑是共享它的带宽速率的，但是交换机没有路由器的自动识别数据包发送和到达地址的功能。路由器可以自动识别数据包发送和到达的地址，路由器相当于马路上的警察，负责交通疏导和指路的</li>
<li>举几个例子,路由器是小邮局，就一个地址(IP)，负责一个地方的收发(个人电脑，某个服务器，所以你家上网要这个东西)，交换机是省里的大邮政中心，负责由一个地址给各个小地方的联系。简单的说路由器专管入网，交换机只管配送，路由路由就是给你找路让你上网的，交换机只负责开门，交换机上面要没有路由你是上不了网的</li>
<li>路由器提供了防火墙的服务。路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，从而可以防止广播风暴</li>
</ul>
<h4 id="40-子网掩码的作用"><a href="#40-子网掩码的作用" class="headerlink" title="40. 子网掩码的作用"></a><font color=DarkOrange>40. 子网掩码的作用</font></h4><p>内网中192.168.1.199的前三组是网络号，后一组是主机号，子网掩码就是255.255.255.0</p>
<p><strong>首先要说明的是</strong>：不是某个IP的网络号和主机号决定子网掩码是什么，而是子网掩码决定了某个IP地址的网络号与主机号是什么，IP地址是要搭配子网掩码使用的。例如上面的子网掩码决定了192.168.1.199的前三段192.168.1是网络号，最后一段199是主机号</p>
<p>我们再来理解子网掩码的作用，先举个例子，市面上的两个厂家都生产电子秤，每个厂家都坚称他们的秤最准，那你是怎么知道他们的秤到底准不准？很简单，你去找一个 1KG 的国际千克原器，各放到他们的秤上测量，如果秤的测量值是1KG，那这把秤就是准的，<strong>子网掩码的作用</strong>就相当于这个大家公认的国际千克原器，是我们测量两个IP是否属于同一个网段的一个工具（应该说是让你知道某个IP地址的网络号与主机号分别是什么） </p>
<h4 id="41-WebSocket是什么"><a href="#41-WebSocket是什么" class="headerlink" title="41. WebSocket是什么"></a><font color=DarkOrange>41. WebSocket是什么</font></h4><p>WebSocket 是一种在单个TCP连接上进行全双工通信的协议。WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据</p>
<p>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输</p>
<p>WebSocket本质上一种计算机网络应用层的协议，用来弥补http协议在持久通信能力上的不足</p>
<p>WebSocket 协议在2008年诞生，2011年成为国际标准。现在最新版本浏览器都已经支持了</p>
<p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种</p>
<p>WebSocket 的其他特点包括：</p>
<ul>
<li>建立在 TCP 协议之上，服务器端的实现比较容易</li>
<li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器</li>
<li>数据格式比较轻量，性能开销小，通信高效</li>
<li>可以发送文本，也可以发送二进制数据</li>
<li>没有同源限制，客户端可以与任意服务器通信</li>
<li>协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h86wdeuto8j30bm08ogmr.jpg" alt="image.png" style="zoom:100%;" /></div>

<h5 id="41-1-为什么需要WebSocket"><a href="#41-1-为什么需要WebSocket" class="headerlink" title="41.1 为什么需要WebSocket"></a><font color=DarkOrange>41.1 为什么需要WebSocket</font></h5><p>我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？</p>
<p>因为 HTTP 协议有一个缺陷：通信只能由客户端发起，不具备服务器推送能力</p>
<p>举例来说，我们想了解查询今天的实时数据，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息</p>
<p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用”轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）</p>
<p>在 WebSocket 协议出现以前，创建一个和服务端进双通道通信的 web 应用，需要依赖HTTP协议，进行不停的轮询，这会导致一些问题：</p>
<ul>
<li>服务端被迫维持来自每个客户端的大量不同的连接</li>
<li>大量的轮询请求会造成高开销，比如会带上多余的header，造成了无用的数据传输</li>
</ul>
<p>http协议本身是没有持久通信能力的，但是我们在实际的应用中，是很需要这种能力的，所以，为了解决这些问题，WebSocket协议由此而生。并且在HTML5标准中增加了有关WebSocket协议的相关api，所以只要实现了HTML5标准的客户端，就可以与支持WebSocket协议的服务器进行全双工的持久通信了</p>
<h5 id="41-2-WebSocket与HTTP的区别"><a href="#41-2-WebSocket与HTTP的区别" class="headerlink" title="41.2 WebSocket与HTTP的区别"></a><font color=DarkOrange>41.2 WebSocket与HTTP的区别</font></h5><ul>
<li><strong>相同点：</strong> 都是一样基于TCP的，都是可靠性传输协议。都是应用层协议</li>
<li><strong>联系：</strong> WebSocket在建立握手时，数据是通过HTTP传输的。但是建立之后，在真正传输时候是不需要HTTP协议的</li>
<li>WebSocket是双向通信协议，模拟Socket协议，可以双向发送或接受信息，而HTTP是单向的</li>
<li>WebSocket是需要浏览器和服务器握手进行建立连接的，而http是浏览器发起向服务器的连接</li>
<li><strong>注意：</strong> 虽然HTTP&#x2F;2也具备服务器推送功能，但HTTP&#x2F;2 只能推送静态资源，无法推送指定的信息</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h86xbj214qj30hg0e7djz.jpg" alt="image.png" style="zoom:80%;" /></div>

<h5 id="41-3-WebSocket和Socket的区别"><a href="#41-3-WebSocket和Socket的区别" class="headerlink" title="41.3 WebSocket和Socket的区别"></a><font color=DarkOrange>41.3 WebSocket和Socket的区别</font></h5><p>Socket是应用层与TCP&#x2F;IP协议通信的中间软件抽象层，它是一组接口。而WebSocket协议是一个完整的应用层协议，拥有一套完整的API</p>
<h4 id="42-WebSocket协议的原理"><a href="#42-WebSocket协议的原理" class="headerlink" title="42. WebSocket协议的原理"></a><font color=DarkOrange>42. WebSocket协议的原理</font></h4><p>与http协议一样，WebSocket协议也需要通过已建立的TCP连接来传输数据。具体实现上是通过http协议建立通道，然后在此基础上用真正的WebSocket协议进行通信，所以WebSocket协议和http协议是有一定的交叉关系的</p>
<p>首先，WebSocket 是一个持久化的协议，相对于 HTTP 这种非持久的协议来说。简单的举个例子吧，用目前应用比较广泛的 PHP 生命周期来解释</p>
<p>HTTP 的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次 HTTP 请求就结束了</p>
<p>在 HTTP1.1 中进行了改进，使得有一个 keep-alive，也就是说，在一个 HTTP 连接中，可以发送多个 Request，接收多个 Response。但是请记住 Request &#x3D; Response， 在 HTTP 中永远是这样，也就是说一个 Request 只能有一个 Response。而且这个 Response 也是被动的，不能主动发起</p>
<p>首先 WebSocket 是基于 HTTP 协议的，或者说借用了 HTTP 协议来完成一部分握手</p>
<p>首先我们来看个典型的 WebSocket 握手</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /chat <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: server.<span class="property">example</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Upgrade</span>: websocket</span><br><span class="line"><span class="title class_">Connection</span>: <span class="title class_">Upgrade</span></span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Key</span>: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Protocol</span>: chat, superchat</span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Version</span>: <span class="number">13</span></span><br><span class="line"><span class="title class_">Origin</span>: <span class="attr">http</span>:<span class="comment">//example.com</span></span><br></pre></td></tr></table></figure>

<p>熟悉 HTTP 的童鞋可能发现了，这段类似 HTTP 协议的握手请求中，多了这么几个东西。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Upgrade</span>: websocket</span><br><span class="line"><span class="title class_">Connection</span>: <span class="title class_">Upgrade</span></span><br></pre></td></tr></table></figure>

<p>这个就是 WebSocket 的核心了，告诉 Apache 、 Nginx 等服务器：注意啦，我发起的请求要用 WebSocket 协议，快点帮我找到对应的助理处理~而不是那个老土的 HTTP。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Key</span>: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Protocol</span>: chat, superchat</span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Version</span>: <span class="number">13</span></span><br></pre></td></tr></table></figure>

<p>首先， Sec-WebSocket-Key 是一个 Base64 encode 的值，这个是浏览器随机生成的，告诉服务器：泥煤，不要忽悠我，我要验证你是不是真的是 WebSocket 助理</p>
<p>然后， Sec_WebSocket-Protocol 是一个用户定义的字符串，用来区分同 URL 下，不同的服务所需要的协议。简单理解：今晚我要服务A，别搞错啦~</p>
<p>最后， Sec-WebSocket-Version 是告诉服务器所使用的 WebSocket Draft （协议版本），在最初的时候，WebSocket 协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么 Firefox 和 Chrome 用的不是一个版本之类的，当初 WebSocket 协议太多可是一个大难题。。不过现在还好，已经定下来啦~大家都使用同一个版本： 服务员，我要的是13岁的噢→_→</p>
<p>然后服务器会返回下列东西，表示已经接受到请求， 成功建立 WebSocket 啦</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">101</span> <span class="title class_">Switching</span> <span class="title class_">Protocols</span></span><br><span class="line"><span class="title class_">Upgrade</span>: websocket</span><br><span class="line"><span class="title class_">Connection</span>: <span class="title class_">Upgrade</span></span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Accept</span>: <span class="title class_">HSmrc0</span>sMlYUkAGmm5OPpG2HaGWk=</span><br><span class="line"><span class="title class_">Sec</span>-<span class="title class_">WebSocket</span>-<span class="title class_">Protocol</span>: chat</span><br></pre></td></tr></table></figure>

<p>这里开始就是 HTTP 最后负责的区域了，告诉客户，我已经成功切换协议啦~</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Upgrade</span>: websocket</span><br><span class="line"><span class="title class_">Connection</span>: <span class="title class_">Upgrade</span></span><br></pre></td></tr></table></figure>

<p>依然是固定的，告诉客户端即将升级的是 WebSocket 协议，而不是 mozillasocket，lurnarsocket 或者 shitsocket</p>
<p>然后， Sec-WebSocket-Accept 这个则是经过服务器确认，并且加密过后的 Sec-WebSocket-Key 。 服务器：好啦好啦，知道啦，给你看我的 ID CARD 来证明行了吧</p>
<p>后面的， Sec-WebSocket-Protocol 则是表示最终使用的协议</p>
<p>至此，HTTP 已经完成它所有工作了，接下来就是完全按照 WebSocket 协议进行了</p>
<p><strong>WebSocket连接的过程：</strong></p>
<ul>
<li>首先，客户端发起http请求，经过3次握手后，建立起TCP连接；http请求里存放WebSocket支持的版本号等信息，如：Upgrade、Connection、WebSocket-Version等</li>
<li>然后，服务器收到客户端的握手请求后，同样采用HTTP协议回馈数据</li>
<li>最后，客户端收到连接成功的消息后，开始借助于TCP传输信道进行全双工通信</li>
</ul>
<h4 id="43-Websocket的优缺点"><a href="#43-Websocket的优缺点" class="headerlink" title="43. Websocket的优缺点"></a><font color=DarkOrange>43. Websocket的优缺点</font></h4><ul>
<li><strong>优点：</strong> WebSocket协议一旦建议后，互相沟通所消耗的请求头是很小的；服务器可以向客户端推送消息了</li>
<li><strong>缺点：</strong> 少部分浏览器不支持，浏览器支持的程度与方式有区别（IE10）</li>
</ul>
<h4 id="44-WebSocket应用场景"><a href="#44-WebSocket应用场景" class="headerlink" title="44. WebSocket应用场景"></a><font color=DarkOrange>44. WebSocket应用场景</font></h4><ul>
<li>即时聊天通信</li>
<li>多玩家游戏</li>
<li>在线协同编辑&#x2F;编辑</li>
<li>实时数据流的拉取与推送</li>
<li>体育&#x2F;游戏实况</li>
<li>实时地图位置</li>
<li>即时<code>Web</code>应用程序：即时<code>Web</code>应用程序使用一个<code>Web</code>套接字在客户端显示数据，这些数据由后端服务器连续发送。在<code>WebSocke</code>t中，数据被连续推送&#x2F;传输到已经打开的同一连接中，这就是为什么<code>WebSocket</code>更快并提高了应用程序性能的原因。 例如在交易网站或比特币交易中，这是最不稳定的事情，它用于显示价格波动，数据被后端服务器使用Web套接字通道连续推送到客户端</li>
<li>游戏应用程序：在游戏应用程序中，你可能会注意到，服务器会持续接收数据，而不会刷新用户界面。屏幕上的用户界面会自动刷新，而且不需要建立新的连接，因此在<code>WebSocket</code>游戏应用程序中非常有帮助</li>
<li>聊天应用程序：聊天应用程序仅使用<code>WebSocket</code>建立一次连接，便能在订阅户之间交换，发布和广播消息。它重复使用相同的<code>WebSocket</code>连接，用于发送和接收消息以及一对一的消息传输</li>
</ul>
<h5 id="44-1-不能使用WebSocket的场景"><a href="#44-1-不能使用WebSocket的场景" class="headerlink" title="44.1 不能使用WebSocket的场景"></a><font color=DarkOrange>44.1 不能使用WebSocket的场景</font></h5><p>如果我们需要通过网络传输的任何实时更新或连续数据流，则可以使用<code>WebSocket</code>。如果我们要获取旧数据，或者只想获取一次数据供应用程序使用，则应该使用<code>HTTP</code>协议，不需要很频繁或仅获取一次的数据可以通过简单的<code>HTTP</code>请求查询，因此在这种情况下最好不要使用<code>WebSocket</code></p>
<p><strong>注意：</strong> 如果仅加载一次数据，则<code>RESTful</code> <code>Web</code>服务足以从服务器获取数据</p>
<h4 id="45-WebSocket断线重连"><a href="#45-WebSocket断线重连" class="headerlink" title="45. WebSocket断线重连"></a><font color=DarkOrange>45. WebSocket断线重连</font></h4><p>心跳就是客户端定时的给服务端发送消息，证明客户端是在线的， 如果超过一定的时间没有发送则就是离线了</p>
<h5 id="45-1-如何判断在线或离线"><a href="#45-1-如何判断在线或离线" class="headerlink" title="45.1 如何判断在线或离线"></a><font color=DarkOrange>45.1 如何判断在线或离线</font></h5><p>当客户端第一次发送请求至服务端时会携带唯一标识、以及时间戳，服务端到db或者缓存去查询改请求的唯一标识，如果不存在就存入db或者缓存中</p>
<p>第二次客户端定时再次发送请求依旧携带唯一标识、以及时间戳，服务端到db或者缓存去查询改请求的唯一标识，如果存在就把上次的时间戳拿取出来，使用当前时间戳减去上次的时间</p>
<p>得出的毫秒秒数判断是否大于指定的时间，若小于的话就是在线，否则就是离线</p>
<h5 id="45-2-如何解决断线问题"><a href="#45-2-如何解决断线问题" class="headerlink" title="45.2 如何解决断线问题"></a><font color=DarkOrange>45.2 如何解决断线问题</font></h5><p>通过查阅资料了解到 nginx 代理的 websocket 转发，无消息连接会出现超时断开问题。网上资料提到解决方案两种，一种是修改nginx配置信息，第二种是websocket发送心跳包</p>
<ul>
<li>断线的可能原因1：websocket超时没有消息自动断开连接<ul>
<li>解决方案：这时候我们就需要知道服务端设置的超时时长是多少，在小于超时时间内发送心跳包，有2中方案:一种是客户端主动发送上行心跳包，另一种方案是服务端主动发送下行心跳包</li>
</ul>
</li>
<li>断线的可能原因2：websocket异常包括服务端出现中断，交互切屏等等客户端异常中断等<ul>
<li>当若服务端宕机了，客户端怎么做、服务端再次上线时怎么做？</li>
<li>客户端则需要断开连接，通过onclose 关闭连接，服务端再次上线时则需要清除之间存的数据，若不清除 则会造成只要请求到服务端的都会被视为离线</li>
<li>针对这种异常的中断解决方案就是处理重连，下面我们给出的重连方案是使用js库处理：引入reconnecting-websocket.min.js，ws建立链接方法使用js库api方法</li>
</ul>
</li>
</ul>
<h4 id="46-WebSocket总结"><a href="#46-WebSocket总结" class="headerlink" title="46. WebSocket总结"></a><font color=DarkOrange>46. WebSocket总结</font></h4><ul>
<li>WebSocket 是为了在 web 应用上进行双通道通信而产生的协议，相比于轮询HTTP请求的方式，WebSocket 有节省服务器资源，效率高等优点</li>
<li>WebSocket 中的掩码是为了防止早期版本中存在中间缓存污染攻击等问题而设置的，客户端向服务端发送数据需要掩码，服务端向客户端发送数据不需要掩码</li>
<li>WebSocket 中 Sec-WebSocket-Key 的生成算法是拼接服务端和客户端生成的字符串，进行SHA1哈希算法，再用base64编码</li>
<li>WebSocket 协议握手是依靠 HTTP 协议的，依靠于 HTTP 响应101进行协议升级转换</li>
</ul>
<p>WebSocket相关知识参考链接：<a href="https://juejin.cn/post/7020964728386093093#heading-4">点击跳转</a></p>
<hr>
<h4 id="47-内网穿透"><a href="#47-内网穿透" class="headerlink" title="47. 内网穿透"></a><font color=DarkOrange>47. 内网穿透</font></h4><h5 id="47-1-什么是内网穿透"><a href="#47-1-什么是内网穿透" class="headerlink" title="47.1 什么是内网穿透"></a><font color=DarkOrange>47.1 什么是内网穿透</font></h5><p>内网穿透，也就是 NAT 穿透，进行 NAT 穿透是为了使具有某一个特定源 IP 地址和源端口号的数据包不被 NAT 设备屏蔽而正确路由到内网主机</p>
<p><strong>用一句话将就是：通过公网IP的端口映射实现能访问内网服务器的资源</strong></p>
<h5 id="47-2-实现方式"><a href="#47-2-实现方式" class="headerlink" title="47.2 实现方式"></a><font color=DarkOrange>47.2 实现方式</font></h5><p><strong>通过FRP开源方式实现</strong></p>
<p>FRP使用 Go 语言开发，可以支持 Windows、Linux、macOS、ARM 等多平台部署。frp内网穿透无需多复杂的配置就可以达到比较好的穿透效果，具有较强的扩展性，支持tcp, udp, http, https 协议，并且 web 服务支持根据域名进行路由转发。此外，<strong>FRP 提供了一种新的代理类型 XTCP ，可以在传输大量数据时让流量不经过服务器中转，用于实现点对点穿透，</strong>当然，此功能并不能保证在你的网络环境 100% 可用，成功率较低，而且还要求访问端也得运行 FRP 客户端 (目前手机端ios没有frp客户端软件)。由于实现条件较多，所以有文件传输需求的朋友但必须用frp的朋友还是建议买带宽稍大一点的 VPS 会比较省心。<strong>frp适合有linux基础的个人，且需要自购一个云主机做中转，企业追求稳定可以考虑其他方式</strong></p>
<p>FRP实现内网穿透，就在于使用反向代理，使得真实的服务端得以隐藏。当外部用户（client）请求访问服务端VPS的时候，服务端VPS是客户端的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。这样就实现了内网穿透。即：</p>
<ul>
<li>Client &#x3D; 外部用户</li>
<li>proxy &#x3D; 公网服务器（需要在服务器上搭建FRP服务端）</li>
<li>Server &#x3D; 内网服务器（需要在服务器上搭建FRP客户端）</li>
</ul>
<div align="center"><img src="http://tva1.sinaimg.cn/large/0079DIvogy1h8abwwqcesj30zq06kju4.jpg" alt="image.png" style="zoom:50%;" /></div>



<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
